{"ast":null,"code":"var _jsxFileName = \"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\nimport \"../../stylesheets/components/timeline.css\"; //props an array of tweets to render\n//default: boolean\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timeline(props) {\n  _s();\n\n  useEffect(() => {\n    setTweetList(props.tweets.map(item => {\n      return [item, false]; //[value, deleted?]\n    }));\n  }, [props.tweets]); // async function getListTweets() {\n  //     await axios\n  //             .get(`/apiTweet/tweet/getNTweets/${MAX_NB_TWEETS}`)\n  //             .then( (res) => {\n  //                 setTweetList(res.data.map( item => {\n  //                     return [item, false]; //[value, deleted?]\n  //                 }));\n  //             });\n  //     }\n  // getListTweets();\n\n  const [tweetList, setTweetList] = useState(props.tweets.map(item => {\n    return [item, false]; //[value, deleted?]\n  }));\n  const [tweets, setTweets] = useState(genTweetsToRender());\n\n  function genTweetsToRender() {\n    //console.log(tweetList);\n    return tweetList.map(async item => {\n      await axios.post(\"/apiTweet/tweet/getTweetId\", item[0]).then(res => {\n        const tweetId = res.data;\n\n        if (!item[1]) {\n          return /*#__PURE__*/_jsxDEV(Tweet, {\n            id: tweetId,\n            tweet: item[0],\n            default: props.default,\n            user: props.user,\n            deleted: false,\n            onDelete: handleHideTweet\n          }, tweetId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(TweetDeleted, {\n            id: tweetId,\n            deleted: true,\n            onDelete: handleHideTweet\n          }, tweetId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }, this);\n        }\n      });\n    });\n  }\n\n  function handleHideTweet(event, id) {\n    //console.log(\"handleHideTweet\");\n    setTweetList(prev => {\n      //console.log(\"setTweetList\");\n      return prev.map(item => {\n        if (item[0]['index'] === id) {\n          //console.log(\"hidden\");\n          return [item[0], !item[1]];\n        } else {\n          //console.log(id);\n          return item;\n        }\n      });\n    });\n  }\n\n  async function handleRenderNewTweet(event, newTweetId) {\n    await axios.get(`/apiTweet/tweet/${newTweetId}`).then(res => {\n      console.log('res.data: ', res.data); //console.log(\"handleRenderNewTweet\");\n\n      setTweetList(prev => {\n        //console.log(\"setter\");\n        prev.unshift([res.data, false]);\n        return [...prev];\n      });\n      setTweets(genTweetsToRender());\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline column\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"timeline-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: props.scroll,\n        className: \"timeline-home\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), props.default || /*#__PURE__*/_jsxDEV(NewTweet, {\n      onPost: handleRenderNewTweet,\n      user: props.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"timeline-main\",\n      className: \"timeline-main\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timeline-tweets\",\n        children: tweets === '' ? \"\" : tweets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timeline, \"0uyc2FWQHbrc8rvDgge5RJpAm/k=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js"],"names":["React","useState","useEffect","axios","Tweet","NewTweet","TweetDeleted","Timeline","props","setTweetList","tweets","map","item","tweetList","setTweets","genTweetsToRender","post","then","res","tweetId","data","default","user","handleHideTweet","event","id","prev","handleRenderNewTweet","newTweetId","get","console","log","unshift","scroll"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\";\n\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\n\nimport \"../../stylesheets/components/timeline.css\";\n\n//props an array of tweets to render\n//default: boolean\nexport default function Timeline(props){\n    useEffect( () => {\n        setTweetList(props.tweets.map( item => {\n            return [item, false]; //[value, deleted?]\n        }));\n    }, [props.tweets]); \n    // async function getListTweets() {\n    //     await axios\n    //             .get(`/apiTweet/tweet/getNTweets/${MAX_NB_TWEETS}`)\n    //             .then( (res) => {\n    //                 setTweetList(res.data.map( item => {\n    //                     return [item, false]; //[value, deleted?]\n    //                 }));\n    //             });\n    //     }\n    // getListTweets();\n    \n    const [tweetList, setTweetList] = useState(props.tweets.map( item => {\n                                        return [item, false]; //[value, deleted?]\n                                    }));\n\n    const [tweets, setTweets] = useState(genTweetsToRender());\n\n    function genTweetsToRender(){\n        //console.log(tweetList);\n        return (\n            tweetList.map(async (item) => {\n                await axios\n                    .post(\"/apiTweet/tweet/getTweetId\", item[0])\n                    .then( (res) => { \n                        const tweetId = res.data; \n                        if (!item[1])\n                        {\n                            return(\n                                <Tweet \n                                    key={tweetId}\n                                    id={tweetId}\n                                    tweet={item[0]}\n                                    default={props.default}\n                                    user={props.user}\n                                    deleted={false}\n                                    onDelete={handleHideTweet}\n                                />\n                            );\n                        }\n                        else\n                        {\n                            return(\n                                <TweetDeleted \n                                    key={tweetId} \n                                    id={tweetId} \n                                    deleted={true} \n                                    onDelete={handleHideTweet}\n                                />\n                            );\n                        }\n                    })\n            })\n        )\n    }\n\n    function handleHideTweet(event, id){\n        //console.log(\"handleHideTweet\");\n        setTweetList( prev => {\n            //console.log(\"setTweetList\");\n            return( prev.map(item => {\n                if(item[0]['index']===id)\n                {\n                    //console.log(\"hidden\");\n                    return [item[0], !item[1]];\n                }\n                else\n                {\n                    //console.log(id);\n                    return item;\n                }\n            }));\n        });\n    }\n\n    async function handleRenderNewTweet(event, newTweetId){\n        await axios\n            .get(`/apiTweet/tweet/${newTweetId}`)\n            .then( (res) => {\n                console.log('res.data: ', res.data);\n                //console.log(\"handleRenderNewTweet\");\n                setTweetList( prev => {\n                    //console.log(\"setter\");\n                    prev.unshift([res.data, false]);\n                    return([...prev]);\n                });\n                setTweets(genTweetsToRender());\n            });\n\n        \n    }\n\n    return (\n        <div className=\"timeline column\">\n            <header className=\"timeline-header\">\n                <div onClick={props.scroll} className=\"timeline-home\">Home</div>\n            </header>\n            {/* if default timeline, no new tweets needed */}\n            {props.default || <NewTweet onPost={handleRenderNewTweet} user={props.user} />}\n            <main id=\"timeline-main\" className=\"timeline-main\">\n                <section className=\"timeline-tweets\">\n                    {tweets===''? \"\" : tweets}\n                </section>\n            </main>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}