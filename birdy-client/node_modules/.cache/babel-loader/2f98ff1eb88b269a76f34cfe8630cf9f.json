{"ast":null,"code":"import { defaults, remove, splitAndCapture } from \"./utils\";\nimport { AnchorTagBuilder } from \"./anchor-tag-builder\";\nimport { Match } from \"./match/match\";\nimport { EmailMatch } from \"./match/email-match\";\nimport { HashtagMatch } from \"./match/hashtag-match\";\nimport { MentionMatch } from \"./match/mention-match\";\nimport { PhoneMatch } from \"./match/phone-match\";\nimport { UrlMatch } from \"./match/url-match\";\nimport { Matcher } from \"./matcher/matcher\";\nimport { HtmlTag } from \"./html-tag\";\nimport { EmailMatcher } from \"./matcher/email-matcher\";\nimport { UrlMatcher } from \"./matcher/url-matcher\";\nimport { HashtagMatcher } from \"./matcher/hashtag-matcher\";\nimport { PhoneMatcher } from \"./matcher/phone-matcher\";\nimport { MentionMatcher } from \"./matcher/mention-matcher\";\nimport { parseHtml } from './htmlParser/parse-html';\n/**\n * @class Autolinker\n * @extends Object\n *\n * Utility class used to process a given string of text, and wrap the matches in\n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n *\n * Any of the configuration options may be provided in an Object provided\n * to the Autolinker constructor, which will configure how the {@link #link link()}\n * method will process the links.\n *\n * For example:\n *\n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *\n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * The {@link #static-link static link()} method may also be used to inline\n * options into a single call, which may be more convenient for one-off uses.\n * For example:\n *\n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * ## Custom Replacements of Links\n *\n * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n * may be provided to fully customize the output of Autolinker. This function is\n * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\n * match that is encountered.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *\n *                         return tag;\n *\n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *\n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *\n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *\n *                 case 'phone' :\n *                     var phoneNumber = match.getPhoneNumber();\n *                     console.log( phoneNumber );\n *\n *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n *\n *                 case 'hashtag' :\n *                     var hashtag = match.getHashtag();\n *                     console.log( hashtag );\n *\n *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n *\n *                 case 'mention' :\n *                     var mention = match.getMention();\n *                     console.log( mention );\n *\n *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n *             }\n *         }\n *     } );\n *\n *\n * The function may return the following values:\n *\n * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n *   would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be\n *   used directly as the replacement HTML for the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n *   an HTML tag before writing out its HTML text.\n */\n\nvar Autolinker =\n/** @class */\nfunction () {\n  /**\n   * @method constructor\n   * @param {Object} [cfg] The configuration options for the Autolinker instance,\n   *   specified in an Object (map).\n   */\n  function Autolinker(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\n     * The Autolinker version number exposed on the instance itself.\n     *\n     * Ex: 0.25.1\n     */\n\n\n    this.version = Autolinker.version;\n    /**\n     * @cfg {Boolean/Object} [urls]\n     *\n     * `true` if URLs should be automatically linked, `false` if they should not\n     * be. Defaults to `true`.\n     *\n     * Examples:\n     *\n     *     urls: true\n     *\n     *     // or\n     *\n     *     urls: {\n     *         schemeMatches : true,\n     *         wwwMatches    : true,\n     *         tldMatches    : true\n     *     }\n     *\n     * As shown above, this option also accepts an Object form with 3 properties\n     * to allow for more customization of what exactly gets linked. All default\n     * to `true`:\n     *\n     * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n     *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n     *   `false` to prevent these types of matches.\n     * @cfg {Boolean} [urls.wwwMatches] `true` to match urls found prefixed with\n     *   `'www.'`, i.e. `www.google.com`. `false` to prevent these types of\n     *   matches. Note that if the URL had a prefixed scheme, and\n     *   `schemeMatches` is true, it will still be linked.\n     * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n     *   level domains (.com, .net, etc.) that are not prefixed with a scheme or\n     *   `'www.'`. This option attempts to match anything that looks like a URL\n     *   in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc. `false`\n     *   to prevent these types of matches.\n     */\n\n    this.urls = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [email=true]\n     *\n     * `true` if email addresses should be automatically linked, `false` if they\n     * should not be.\n     */\n\n    this.email = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [phone=true]\n     *\n     * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n     * `false` if they should not be.\n     */\n\n    this.phone = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean/String} [hashtag=false]\n     *\n     * A string for the service name to have hashtags (ex: \"#myHashtag\")\n     * auto-linked to. The currently-supported values are:\n     *\n     * - 'twitter'\n     * - 'facebook'\n     * - 'instagram'\n     *\n     * Pass `false` to skip auto-linking of hashtags.\n     */\n\n    this.hashtag = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String/Boolean} [mention=false]\n     *\n     * A string for the service name to have mentions (ex: \"@myuser\")\n     * auto-linked to. The currently supported values are:\n     *\n     * - 'twitter'\n     * - 'instagram'\n     * - 'soundcloud'\n     *\n     * Defaults to `false` to skip auto-linking of mentions.\n     */\n\n    this.mention = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [newWindow=true]\n     *\n     * `true` if the links should open in a new window, `false` otherwise.\n     */\n\n    this.newWindow = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean/Object} [stripPrefix=true]\n     *\n     * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n     * from the beginning of URL links' text, `false` otherwise. Defaults to\n     * `true`.\n     *\n     * Examples:\n     *\n     *     stripPrefix: true\n     *\n     *     // or\n     *\n     *     stripPrefix: {\n     *         scheme : true,\n     *         www    : true\n     *     }\n     *\n     * As shown above, this option also accepts an Object form with 2 properties\n     * to allow for more customization of what exactly is prevented from being\n     * displayed. Both default to `true`:\n     *\n     * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n     *   a URL match from being displayed to the user. Example:\n     *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n     *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n     *   will be removed, so as not to remove a potentially dangerous scheme\n     *   (such as `'file://'` or `'javascript:'`)\n     * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n     *   `'www.'` part of a URL match from being displayed to the user. Ex:\n     *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n     *   strip the `'www'`.\n     */\n\n    this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [stripTrailingSlash=true]\n     *\n     * `true` to remove the trailing slash from URL matches, `false` to keep\n     *  the trailing slash.\n     *\n     *  Example when `true`: `http://google.com/` will be displayed as\n     *  `http://google.com`.\n     */\n\n    this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [decodePercentEncoding=true]\n     *\n     * `true` to decode percent-encoded characters in URL matches, `false` to keep\n     *  the percent-encoded characters.\n     *\n     *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n     *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n     */\n\n    this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Number/Object} [truncate=0]\n     *\n     * ## Number Form\n     *\n     * A number for how many characters matched text should be truncated to\n     * inside the text of a link. If the matched text is over this number of\n     * characters, it will be truncated to this length by adding a two period\n     * ellipsis ('..') to the end of the string.\n     *\n     * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n     * truncated to 25 characters might look something like this:\n     * 'yahoo.com/some/long/pat..'\n     *\n     * Example Usage:\n     *\n     *     truncate: 25\n     *\n     *\n     *  Defaults to `0` for \"no truncation.\"\n     *\n     *\n     * ## Object Form\n     *\n     * An Object may also be provided with two properties: `length` (Number) and\n     * `location` (String). `location` may be one of the following: 'end'\n     * (default), 'middle', or 'smart'.\n     *\n     * Example Usage:\n     *\n     *     truncate: { length: 25, location: 'middle' }\n     *\n     * @cfg {Number} [truncate.length=0] How many characters to allow before\n     *   truncation will occur. Defaults to `0` for \"no truncation.\"\n     * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n     *\n     * - 'end' (default): will truncate up to the number of characters, and then\n     *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n     * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n     *   'yahoo.com/s..th/to/a/file'\n     * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n     *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n     *   attempting to make the URL human-readable before looking for a good\n     *   point to insert the ellipsis if it is still too long. Ex:\n     *   'yahoo.com/some..to/a/file'. For more details, see\n     *   {@link Autolinker.truncate.TruncateSmart}.\n     */\n\n    this.truncate = {\n      length: 0,\n      location: 'end'\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} className\n     *\n     * A CSS class name to add to the generated links. This class will be added\n     * to all links, as well as this class plus match suffixes for styling\n     * url/email/phone/hashtag/mention links differently.\n     *\n     * For example, if this config is provided as \"myLink\", then:\n     *\n     * - URL links will have the CSS classes: \"myLink myLink-url\"\n     * - Email links will have the CSS classes: \"myLink myLink-email\", and\n     * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n     * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n     * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n     *   where [type] is either \"instagram\", \"twitter\" or \"soundcloud\"\n     */\n\n    this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Function} replaceFn\n     *\n     * A function to individually process each match found in the input string.\n     *\n     * See the class's description for usage.\n     *\n     * The `replaceFn` can be called with a different context object (`this`\n     * reference) using the {@link #context} cfg.\n     *\n     * This function is called with the following parameter:\n     *\n     * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n     *   can be used to retrieve information about the match that the `replaceFn`\n     *   is currently processing. See {@link Autolinker.match.Match} subclasses\n     *   for details.\n     */\n\n    this.replaceFn = null; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} context\n     *\n     * The context object (`this` reference) to call the `replaceFn` with.\n     *\n     * Defaults to this Autolinker instance.\n     */\n\n    this.context = undefined; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} [sanitizeHtml=false]\n     *\n     * `true` to HTML-encode the start and end brackets of existing HTML tags found\n     * in the input string. This will escape `<` and `>` characters to `&lt;` and\n     * `&gt;`, respectively.\n     *\n     * Setting this to `true` will prevent XSS (Cross-site Scripting) attacks,\n     * but will remove the significance of existing HTML tags in the input string. If\n     * you would like to maintain the significance of existing HTML tags while also\n     * making the output HTML string safe, leave this option as `false` and use a\n     * tool like https://github.com/cure53/DOMPurify (or others) on the input string\n     * before running Autolinker.\n     */\n\n    this.sanitizeHtml = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @private\n     * @property {Autolinker.matcher.Matcher[]} matchers\n     *\n     * The {@link Autolinker.matcher.Matcher} instances for this Autolinker\n     * instance.\n     *\n     * This is lazily created in {@link #getMatchers}.\n     */\n\n    this.matchers = null;\n    /**\n     * @private\n     * @property {Autolinker.AnchorTagBuilder} tagBuilder\n     *\n     * The AnchorTagBuilder instance used to build match replacement anchor tags.\n     * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n     */\n\n    this.tagBuilder = null; // Note: when `this.something` is used in the rhs of these assignments,\n    //       it refers to the default values set above the constructor\n\n    this.urls = this.normalizeUrlsCfg(cfg.urls);\n    this.email = typeof cfg.email === 'boolean' ? cfg.email : this.email;\n    this.phone = typeof cfg.phone === 'boolean' ? cfg.phone : this.phone;\n    this.hashtag = cfg.hashtag || this.hashtag;\n    this.mention = cfg.mention || this.mention;\n    this.newWindow = typeof cfg.newWindow === 'boolean' ? cfg.newWindow : this.newWindow;\n    this.stripPrefix = this.normalizeStripPrefixCfg(cfg.stripPrefix);\n    this.stripTrailingSlash = typeof cfg.stripTrailingSlash === 'boolean' ? cfg.stripTrailingSlash : this.stripTrailingSlash;\n    this.decodePercentEncoding = typeof cfg.decodePercentEncoding === 'boolean' ? cfg.decodePercentEncoding : this.decodePercentEncoding;\n    this.sanitizeHtml = cfg.sanitizeHtml || false; // Validate the value of the `mention` cfg\n\n    var mention = this.mention;\n\n    if (mention !== false && ['twitter', 'instagram', 'soundcloud', 'tiktok'].indexOf(mention) === -1) {\n      throw new Error(\"invalid `mention` cfg '\".concat(mention, \"' - see docs\"));\n    } // Validate the value of the `hashtag` cfg\n\n\n    var hashtag = this.hashtag;\n\n    if (hashtag !== false && ['twitter', 'facebook', 'instagram', 'tiktok'].indexOf(hashtag) === -1) {\n      throw new Error(\"invalid `hashtag` cfg '\".concat(hashtag, \"' - see docs\"));\n    }\n\n    this.truncate = this.normalizeTruncateCfg(cfg.truncate);\n    this.className = cfg.className || this.className;\n    this.replaceFn = cfg.replaceFn || this.replaceFn;\n    this.context = cfg.context || this;\n  }\n  /**\n   * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n   * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n   * found within HTML tags.\n   *\n   * For instance, if given the text: `You should go to http://www.yahoo.com`,\n   * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n   *\n   * Example:\n   *\n   *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n   *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n   *\n   * @static\n   * @param {String} textOrHtml The HTML or text to find matches within (depending\n   *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @param {Object} [options] Any of the configuration options for the Autolinker\n   *   class, specified in an Object (map). See the class description for an\n   *   example call.\n   * @return {String} The HTML text, with matches automatically linked.\n   */\n\n\n  Autolinker.link = function (textOrHtml, options) {\n    var autolinker = new Autolinker(options);\n    return autolinker.link(textOrHtml);\n  };\n  /**\n   * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches (without making any replacements).\n   *\n   * Note that if parsing multiple pieces of text, it is slightly more efficient\n   * to create an Autolinker instance, and use the instance-level {@link #parse}\n   * method.\n   *\n   * Example:\n   *\n   *     var matches = Autolinker.parse( \"Hello google.com, I am asdf@asdf.com\", {\n   *         urls: true,\n   *         email: true\n   *     } );\n   *\n   *     console.log( matches.length );           // 2\n   *     console.log( matches[ 0 ].getType() );   // 'url'\n   *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n   *     console.log( matches[ 1 ].getType() );   // 'email'\n   *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n   *\n   * @static\n   * @param {String} textOrHtml The HTML or text to find matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @param {Object} [options] Any of the configuration options for the Autolinker\n   *   class, specified in an Object (map). See the class description for an\n   *   example call.\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `textOrHtml`.\n   */\n\n\n  Autolinker.parse = function (textOrHtml, options) {\n    var autolinker = new Autolinker(options);\n    return autolinker.parse(textOrHtml);\n  };\n  /**\n   * Normalizes the {@link #urls} config into an Object with 3 properties:\n   * `schemeMatches`, `wwwMatches`, and `tldMatches`, all Booleans.\n   *\n   * See {@link #urls} config for details.\n   *\n   * @private\n   * @param {Boolean/Object} urls\n   * @return {Object}\n   */\n\n\n  Autolinker.prototype.normalizeUrlsCfg = function (urls) {\n    if (urls == null) urls = true; // default to `true`\n\n    if (typeof urls === 'boolean') {\n      return {\n        schemeMatches: urls,\n        wwwMatches: urls,\n        tldMatches: urls\n      };\n    } else {\n      // object form\n      return {\n        schemeMatches: typeof urls.schemeMatches === 'boolean' ? urls.schemeMatches : true,\n        wwwMatches: typeof urls.wwwMatches === 'boolean' ? urls.wwwMatches : true,\n        tldMatches: typeof urls.tldMatches === 'boolean' ? urls.tldMatches : true\n      };\n    }\n  };\n  /**\n   * Normalizes the {@link #stripPrefix} config into an Object with 2\n   * properties: `scheme`, and `www` - both Booleans.\n   *\n   * See {@link #stripPrefix} config for details.\n   *\n   * @private\n   * @param {Boolean/Object} stripPrefix\n   * @return {Object}\n   */\n\n\n  Autolinker.prototype.normalizeStripPrefixCfg = function (stripPrefix) {\n    if (stripPrefix == null) stripPrefix = true; // default to `true`\n\n    if (typeof stripPrefix === 'boolean') {\n      return {\n        scheme: stripPrefix,\n        www: stripPrefix\n      };\n    } else {\n      // object form\n      return {\n        scheme: typeof stripPrefix.scheme === 'boolean' ? stripPrefix.scheme : true,\n        www: typeof stripPrefix.www === 'boolean' ? stripPrefix.www : true\n      };\n    }\n  };\n  /**\n   * Normalizes the {@link #truncate} config into an Object with 2 properties:\n   * `length` (Number), and `location` (String).\n   *\n   * See {@link #truncate} config for details.\n   *\n   * @private\n   * @param {Number/Object} truncate\n   * @return {Object}\n   */\n\n\n  Autolinker.prototype.normalizeTruncateCfg = function (truncate) {\n    if (typeof truncate === 'number') {\n      return {\n        length: truncate,\n        location: 'end'\n      };\n    } else {\n      // object, or undefined/null\n      return defaults(truncate || {}, {\n        length: Number.POSITIVE_INFINITY,\n        location: 'end'\n      });\n    }\n  };\n  /**\n   * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches (without making any replacements).\n   *\n   * This method is used by the {@link #link} method, but can also be used to\n   * simply do parsing of the input in order to discover what kinds of links\n   * there are and how many.\n   *\n   * Example usage:\n   *\n   *     var autolinker = new Autolinker( {\n   *         urls: true,\n   *         email: true\n   *     } );\n   *\n   *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n   *\n   *     console.log( matches.length );           // 2\n   *     console.log( matches[ 0 ].getType() );   // 'url'\n   *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n   *     console.log( matches[ 1 ].getType() );   // 'email'\n   *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n   *\n   * @param {String} textOrHtml The HTML or text to find matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled).\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `textOrHtml`.\n   */\n\n\n  Autolinker.prototype.parse = function (textOrHtml) {\n    var _this = this;\n\n    var skipTagNames = ['a', 'style', 'script'],\n        skipTagsStackCount = 0,\n        // used to only Autolink text outside of anchor/script/style tags. We don't want to autolink something that is already linked inside of an <a> tag, for instance\n    matches = []; // Find all matches within the `textOrHtml` (but not matches that are\n    // already nested within <a>, <style> and <script> tags)\n\n    parseHtml(textOrHtml, {\n      onOpenTag: function (tagName) {\n        if (skipTagNames.indexOf(tagName) >= 0) {\n          skipTagsStackCount++;\n        }\n      },\n      onText: function (text, offset) {\n        // Only process text nodes that are not within an <a>, <style> or <script> tag\n        if (skipTagsStackCount === 0) {\n          // \"Walk around\" common HTML entities. An '&nbsp;' (for example)\n          // could be at the end of a URL, but we don't want to \n          // include the trailing '&' in the URL. See issue #76\n          // TODO: Handle HTML entities separately in parseHtml() and\n          // don't emit them as \"text\" except for &amp; entities\n          var htmlCharacterEntitiesRegex = /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi;\n          var textSplit = splitAndCapture(text, htmlCharacterEntitiesRegex);\n          var currentOffset_1 = offset;\n          textSplit.forEach(function (splitText, i) {\n            // even number matches are text, odd numbers are html entities\n            if (i % 2 === 0) {\n              var textNodeMatches = _this.parseText(splitText, currentOffset_1);\n\n              matches.push.apply(matches, textNodeMatches);\n            }\n\n            currentOffset_1 += splitText.length;\n          });\n        }\n      },\n      onCloseTag: function (tagName) {\n        if (skipTagNames.indexOf(tagName) >= 0) {\n          skipTagsStackCount = Math.max(skipTagsStackCount - 1, 0); // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n        }\n      },\n      onComment: function (offset) {},\n      onDoctype: function (offset) {} // no need to process doctype nodes\n\n    }); // After we have found all matches, remove subsequent matches that\n    // overlap with a previous match. This can happen for instance with URLs,\n    // where the url 'google.com/#link' would match '#link' as a hashtag.\n\n    matches = this.compactMatches(matches); // And finally, remove matches for match types that have been turned\n    // off. We needed to have all match types turned on initially so that\n    // things like hashtags could be filtered out if they were really just\n    // part of a URL match (for instance, as a named anchor).\n\n    matches = this.removeUnwantedMatches(matches);\n    return matches;\n  };\n  /**\n   * After we have found all matches, we need to remove matches that overlap\n   * with a previous match. This can happen for instance with URLs, where the\n   * url 'google.com/#link' would match '#link' as a hashtag. Because the\n   * '#link' part is contained in a larger match that comes before the HashTag\n   * match, we'll remove the HashTag match.\n   *\n   * @private\n   * @param {Autolinker.match.Match[]} matches\n   * @return {Autolinker.match.Match[]}\n   */\n\n\n  Autolinker.prototype.compactMatches = function (matches) {\n    // First, the matches need to be sorted in order of offset\n    matches.sort(function (a, b) {\n      return a.getOffset() - b.getOffset();\n    });\n    var i = 0;\n\n    while (i < matches.length - 1) {\n      var match = matches[i],\n          offset = match.getOffset(),\n          matchedTextLength = match.getMatchedText().length,\n          endIdx = offset + matchedTextLength;\n\n      if (i + 1 < matches.length) {\n        // Remove subsequent matches that equal offset with current match\n        if (matches[i + 1].getOffset() === offset) {\n          var removeIdx = matches[i + 1].getMatchedText().length > matchedTextLength ? i : i + 1;\n          matches.splice(removeIdx, 1);\n          continue;\n        } // Remove subsequent matches that overlap with the current match\n\n\n        if (matches[i + 1].getOffset() < endIdx) {\n          matches.splice(i + 1, 1);\n          continue;\n        }\n      }\n\n      i++;\n    }\n\n    return matches;\n  };\n  /**\n   * Removes matches for matchers that were turned off in the options. For\n   * example, if {@link #hashtag hashtags} were not to be matched, we'll\n   * remove them from the `matches` array here.\n   *\n   * Note: we *must* use all Matchers on the input string, and then filter\n   * them out later. For example, if the options were `{ url: false, hashtag: true }`,\n   * we wouldn't want to match the text '#link' as a HashTag inside of the text\n   * 'google.com/#link'. The way the algorithm works is that we match the full\n   * URL first (which prevents the accidental HashTag match), and then we'll\n   * simply throw away the URL match.\n   *\n   * @private\n   * @param {Autolinker.match.Match[]} matches The array of matches to remove\n   *   the unwanted matches from. Note: this array is mutated for the\n   *   removals.\n   * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n   */\n\n\n  Autolinker.prototype.removeUnwantedMatches = function (matches) {\n    if (!this.hashtag) remove(matches, function (match) {\n      return match.getType() === 'hashtag';\n    });\n    if (!this.email) remove(matches, function (match) {\n      return match.getType() === 'email';\n    });\n    if (!this.phone) remove(matches, function (match) {\n      return match.getType() === 'phone';\n    });\n    if (!this.mention) remove(matches, function (match) {\n      return match.getType() === 'mention';\n    });\n\n    if (!this.urls.schemeMatches) {\n      remove(matches, function (m) {\n        return m.getType() === 'url' && m.getUrlMatchType() === 'scheme';\n      });\n    }\n\n    if (!this.urls.wwwMatches) {\n      remove(matches, function (m) {\n        return m.getType() === 'url' && m.getUrlMatchType() === 'www';\n      });\n    }\n\n    if (!this.urls.tldMatches) {\n      remove(matches, function (m) {\n        return m.getType() === 'url' && m.getUrlMatchType() === 'tld';\n      });\n    }\n\n    return matches;\n  };\n  /**\n   * Parses the input `text` looking for URLs, email addresses, phone\n   * numbers, username handles, and hashtags (depending on the configuration\n   * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n   * objects describing those matches.\n   *\n   * This method processes a **non-HTML string**, and is used to parse and\n   * match within the text nodes of an HTML string. This method is used\n   * internally by {@link #parse}.\n   *\n   * @private\n   * @param {String} text The text to find matches within (depending on if the\n   *   {@link #urls}, {@link #email}, {@link #phone},\n   *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n   * @param {Number} [offset=0] The offset of the text node within the\n   *   original string. This is used when parsing with the {@link #parse}\n   *   method to generate correct offsets within the {@link Autolinker.match.Match}\n   *   instances, but may be omitted if calling this method publicly.\n   * @return {Autolinker.match.Match[]} The array of Matches found in the\n   *   given input `text`.\n   */\n\n\n  Autolinker.prototype.parseText = function (text, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    offset = offset || 0;\n    var matchers = this.getMatchers(),\n        matches = [];\n\n    for (var i = 0, numMatchers = matchers.length; i < numMatchers; i++) {\n      var textMatches = matchers[i].parseMatches(text); // Correct the offset of each of the matches. They are originally\n      // the offset of the match within the provided text node, but we\n      // need to correct them to be relative to the original HTML input\n      // string (i.e. the one provided to #parse).\n\n      for (var j = 0, numTextMatches = textMatches.length; j < numTextMatches; j++) {\n        textMatches[j].setOffset(offset + textMatches[j].getOffset());\n      }\n\n      matches.push.apply(matches, textMatches);\n    }\n\n    return matches;\n  };\n  /**\n   * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n   * and Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\n   * URLs found within HTML tags.\n   *\n   * For instance, if given the text: `You should go to http://www.yahoo.com`,\n   * then the result will be `You should go to\n   * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n   *\n   * This method finds the text around any HTML elements in the input\n   * `textOrHtml`, which will be the text that is processed. Any original HTML\n   * elements will be left as-is, as well as the text that is already wrapped\n   * in anchor (&lt;a&gt;) tags.\n   *\n   * @param {String} textOrHtml The HTML or text to autolink matches within\n   *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n   * @return {String} The HTML, with matches automatically linked.\n   */\n\n\n  Autolinker.prototype.link = function (textOrHtml) {\n    if (!textOrHtml) {\n      return \"\";\n    } // handle `null` and `undefined` (for JavaScript users that don't have TypeScript support)\n\n    /* We would want to sanitize the start and end characters of a tag\n     * before processing the string in order to avoid an XSS scenario.\n     * This behaviour can be changed by toggling the sanitizeHtml option.\n     */\n\n\n    if (this.sanitizeHtml) {\n      textOrHtml = textOrHtml.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n\n    var matches = this.parse(textOrHtml),\n        newHtml = [],\n        lastIndex = 0;\n\n    for (var i = 0, len = matches.length; i < len; i++) {\n      var match = matches[i];\n      newHtml.push(textOrHtml.substring(lastIndex, match.getOffset()));\n      newHtml.push(this.createMatchReturnVal(match));\n      lastIndex = match.getOffset() + match.getMatchedText().length;\n    }\n\n    newHtml.push(textOrHtml.substring(lastIndex)); // handle the text after the last match\n\n    return newHtml.join('');\n  };\n  /**\n   * Creates the return string value for a given match in the input string.\n   *\n   * This method handles the {@link #replaceFn}, if one was provided.\n   *\n   * @private\n   * @param {Autolinker.match.Match} match The Match object that represents\n   *   the match.\n   * @return {String} The string that the `match` should be replaced with.\n   *   This is usually the anchor tag string, but may be the `matchStr` itself\n   *   if the match is not to be replaced.\n   */\n\n\n  Autolinker.prototype.createMatchReturnVal = function (match) {\n    // Handle a custom `replaceFn` being provided\n    var replaceFnResult;\n\n    if (this.replaceFn) {\n      replaceFnResult = this.replaceFn.call(this.context, match); // Autolinker instance is the context\n    }\n\n    if (typeof replaceFnResult === 'string') {\n      return replaceFnResult; // `replaceFn` returned a string, use that\n    } else if (replaceFnResult === false) {\n      return match.getMatchedText(); // no replacement for the match\n    } else if (replaceFnResult instanceof HtmlTag) {\n      return replaceFnResult.toAnchorString();\n    } else {\n      // replaceFnResult === true, or no/unknown return value from function\n      // Perform Autolinker's default anchor tag generation\n      var anchorTag = match.buildTag(); // returns an Autolinker.HtmlTag instance\n\n      return anchorTag.toAnchorString();\n    }\n  };\n  /**\n   * Lazily instantiates and returns the {@link Autolinker.matcher.Matcher}\n   * instances for this Autolinker instance.\n   *\n   * @private\n   * @return {Autolinker.matcher.Matcher[]}\n   */\n\n\n  Autolinker.prototype.getMatchers = function () {\n    if (!this.matchers) {\n      var tagBuilder = this.getTagBuilder();\n      var matchers = [new HashtagMatcher({\n        tagBuilder: tagBuilder,\n        serviceName: this.hashtag\n      }), new EmailMatcher({\n        tagBuilder: tagBuilder\n      }), new PhoneMatcher({\n        tagBuilder: tagBuilder\n      }), new MentionMatcher({\n        tagBuilder: tagBuilder,\n        serviceName: this.mention\n      }), new UrlMatcher({\n        tagBuilder: tagBuilder,\n        stripPrefix: this.stripPrefix,\n        stripTrailingSlash: this.stripTrailingSlash,\n        decodePercentEncoding: this.decodePercentEncoding\n      })];\n      return this.matchers = matchers;\n    } else {\n      return this.matchers;\n    }\n  };\n  /**\n   * Returns the {@link #tagBuilder} instance for this Autolinker instance,\n   * lazily instantiating it if it does not yet exist.\n   *\n   * @private\n   * @return {Autolinker.AnchorTagBuilder}\n   */\n\n\n  Autolinker.prototype.getTagBuilder = function () {\n    var tagBuilder = this.tagBuilder;\n\n    if (!tagBuilder) {\n      tagBuilder = this.tagBuilder = new AnchorTagBuilder({\n        newWindow: this.newWindow,\n        truncate: this.truncate,\n        className: this.className\n      });\n    }\n\n    return tagBuilder;\n  };\n  /**\n   * @static\n   * @property {String} version\n   *\n   * The Autolinker version number in the form major.minor.patch\n   *\n   * Ex: 0.25.1\n   */\n\n\n  Autolinker.version = '3.15.0';\n  /**\n   * For backwards compatibility with Autolinker 1.x, the AnchorTagBuilder\n   * class is provided as a static on the Autolinker class.\n   */\n\n  Autolinker.AnchorTagBuilder = AnchorTagBuilder;\n  /**\n   * For backwards compatibility with Autolinker 1.x, the HtmlTag class is\n   * provided as a static on the Autolinker class.\n   */\n\n  Autolinker.HtmlTag = HtmlTag;\n  /**\n   * For backwards compatibility with Autolinker 1.x, the Matcher classes are\n   * provided as statics on the Autolinker class.\n   */\n\n  Autolinker.matcher = {\n    Email: EmailMatcher,\n    Hashtag: HashtagMatcher,\n    Matcher: Matcher,\n    Mention: MentionMatcher,\n    Phone: PhoneMatcher,\n    Url: UrlMatcher\n  };\n  /**\n   * For backwards compatibility with Autolinker 1.x, the Match classes are\n   * provided as statics on the Autolinker class.\n   */\n\n  Autolinker.match = {\n    Email: EmailMatch,\n    Hashtag: HashtagMatch,\n    Match: Match,\n    Mention: MentionMatch,\n    Phone: PhoneMatch,\n    Url: UrlMatch\n  };\n  return Autolinker;\n}();\n\nexport default Autolinker;","map":{"version":3,"mappings":"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","names":["defaults","remove","splitAndCapture","AnchorTagBuilder","Match","EmailMatch","HashtagMatch","MentionMatch","PhoneMatch","UrlMatch","Matcher","HtmlTag","EmailMatcher","UrlMatcher","HashtagMatcher","PhoneMatcher","MentionMatcher","parseHtml","cfg","Autolinker","version","scheme","www","length","location","undefined","urls","normalizeUrlsCfg","email","phone","hashtag","mention","newWindow","stripPrefix","normalizeStripPrefixCfg","stripTrailingSlash","decodePercentEncoding","sanitizeHtml","indexOf","Error","truncate","normalizeTruncateCfg","className","replaceFn","context","textOrHtml","options","autolinker","link","parse","schemeMatches","wwwMatches","tldMatches","Number","POSITIVE_INFINITY","skipTagNames","skipTagsStackCount","matches","onOpenTag","tagName","onText","text","offset","htmlCharacterEntitiesRegex","textSplit","currentOffset_1","forEach","splitText","i","textNodeMatches","_this","parseText","push","apply","onCloseTag","Math","max","onComment","onDoctype","compactMatches","removeUnwantedMatches","sort","a","b","getOffset","match","matchedTextLength","getMatchedText","endIdx","removeIdx","splice","getType","m","getUrlMatchType","matchers","getMatchers","numMatchers","textMatches","parseMatches","j","numTextMatches","setOffset","replace","newHtml","lastIndex","len","substring","createMatchReturnVal","join","replaceFnResult","call","toAnchorString","anchorTag","buildTag","tagBuilder","getTagBuilder","serviceName","Email","Hashtag","Mention","Phone","Url"],"sources":["../src/autolinker.ts"],"sourcesContent":["import { defaults, remove, splitAndCapture } from \"./utils\";\nimport { AnchorTagBuilder } from \"./anchor-tag-builder\";\nimport { Match } from \"./match/match\";\nimport { EmailMatch } from \"./match/email-match\";\nimport { HashtagMatch } from \"./match/hashtag-match\";\nimport { MentionMatch } from \"./match/mention-match\";\nimport { PhoneMatch } from \"./match/phone-match\";\nimport { UrlMatch } from \"./match/url-match\";\nimport { Matcher } from \"./matcher/matcher\";\nimport { HtmlTag } from \"./html-tag\";\nimport { EmailMatcher } from \"./matcher/email-matcher\";\nimport { UrlMatcher } from \"./matcher/url-matcher\";\nimport { HashtagMatcher } from \"./matcher/hashtag-matcher\";\nimport { PhoneMatcher } from \"./matcher/phone-matcher\";\nimport { MentionMatcher } from \"./matcher/mention-matcher\";\nimport { parseHtml } from './htmlParser/parse-html';\n\n/**\n * @class Autolinker\n * @extends Object\n *\n * Utility class used to process a given string of text, and wrap the matches in\n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n *\n * Any of the configuration options may be provided in an Object provided\n * to the Autolinker constructor, which will configure how the {@link #link link()}\n * method will process the links.\n *\n * For example:\n *\n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *\n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * The {@link #static-link static link()} method may also be used to inline\n * options into a single call, which may be more convenient for one-off uses.\n * For example:\n *\n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n *\n *\n * ## Custom Replacements of Links\n *\n * If the configuration options do not provide enough flexibility, a {@link #replaceFn}\n * may be provided to fully customize the output of Autolinker. This function is\n * called once for each URL/Email/Phone#/Hashtag/Mention (Twitter, Instagram, Soundcloud)\n * match that is encountered.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, Phone #s, Hashtags, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = match.buildTag();  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *\n *                         return tag;\n *\n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *\n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *\n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *\n *                 case 'phone' :\n *                     var phoneNumber = match.getPhoneNumber();\n *                     console.log( phoneNumber );\n *\n *                     return '<a href=\"http://newplace.to.link.phone.numbers.to/\">' + phoneNumber + '</a>';\n *\n *                 case 'hashtag' :\n *                     var hashtag = match.getHashtag();\n *                     console.log( hashtag );\n *\n *                     return '<a href=\"http://newplace.to.link.hashtag.handles.to/\">' + hashtag + '</a>';\n *\n *                 case 'mention' :\n *                     var mention = match.getMention();\n *                     console.log( mention );\n *\n *                     return '<a href=\"http://newplace.to.link.mention.to/\">' + mention + '</a>';\n *             }\n *         }\n *     } );\n *\n *\n * The function may return the following values:\n *\n * - `true` (Boolean): Allow Autolinker to replace the match as it normally\n *   would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be\n *   used directly as the replacement HTML for the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify\n *   an HTML tag before writing out its HTML text.\n */\nexport default class Autolinker {  // NOTE: must be 'export default' here for UMD module\n\n\t/**\n\t * @static\n\t * @property {String} version\n\t * \n\t * The Autolinker version number in the form major.minor.patch\n\t *\n\t * Ex: 0.25.1\n\t */\n\tstatic readonly version = '3.15.0';\n\n\t/**\n\t * For backwards compatibility with Autolinker 1.x, the AnchorTagBuilder \n\t * class is provided as a static on the Autolinker class.\n\t */\n\tstatic readonly AnchorTagBuilder = AnchorTagBuilder;\n\n\t/**\n\t * For backwards compatibility with Autolinker 1.x, the HtmlTag class is\n\t * provided as a static on the Autolinker class.\n\t */\n\tstatic readonly HtmlTag = HtmlTag;\n\n\t/**\n\t * For backwards compatibility with Autolinker 1.x, the Matcher classes are \n\t * provided as statics on the Autolinker class.\n\t */\n\tstatic readonly matcher = {\n\t\tEmail: EmailMatcher,\n\t\tHashtag: HashtagMatcher,\n\t\tMatcher: Matcher,\n\t\tMention: MentionMatcher,\n\t\tPhone: PhoneMatcher,\n\t\tUrl: UrlMatcher\n\t};\n\n\t/**\n\t * For backwards compatibility with Autolinker 1.x, the Match classes are \n\t * provided as statics on the Autolinker class.\n\t */\n\tstatic readonly match = {\n\t\tEmail: EmailMatch,\n\t\tHashtag: HashtagMatch,\n\t\tMatch: Match,\n\t\tMention: MentionMatch,\n\t\tPhone: PhoneMatch,\n\t\tUrl: UrlMatch\n\t};\n\n\t/**\n\t * Automatically links URLs, Email addresses, Phone Numbers, Twitter handles,\n\t * Hashtags, and Mentions found in the given chunk of HTML. Does not link URLs\n\t * found within HTML tags.\n\t *\n\t * For instance, if given the text: `You should go to http://www.yahoo.com`,\n\t * then the result will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n\t *\n\t * Example:\n\t *\n\t *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n\t *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n\t *\n\t * @static\n\t * @param {String} textOrHtml The HTML or text to find matches within (depending\n\t *   on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #mention},\n\t *   {@link #hashtag}, and {@link #mention} options are enabled).\n\t * @param {Object} [options] Any of the configuration options for the Autolinker\n\t *   class, specified in an Object (map). See the class description for an\n\t *   example call.\n\t * @return {String} The HTML text, with matches automatically linked.\n\t */\n\tstatic link( textOrHtml: string, options?: AutolinkerConfig ) {\n\t\tconst autolinker = new Autolinker( options );\n\t\treturn autolinker.link( textOrHtml );\n\t}\n\n\t/**\n\t * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n\t * numbers, username handles, and hashtags (depending on the configuration\n\t * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n\t * objects describing those matches (without making any replacements).\n\t *\n\t * Note that if parsing multiple pieces of text, it is slightly more efficient\n\t * to create an Autolinker instance, and use the instance-level {@link #parse}\n\t * method.\n\t *\n\t * Example:\n\t *\n\t *     var matches = Autolinker.parse( \"Hello google.com, I am asdf@asdf.com\", {\n\t *         urls: true,\n\t *         email: true\n\t *     } );\n\t *\n\t *     console.log( matches.length );           // 2\n\t *     console.log( matches[ 0 ].getType() );   // 'url'\n\t *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n\t *     console.log( matches[ 1 ].getType() );   // 'email'\n\t *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n\t *\n\t * @static\n\t * @param {String} textOrHtml The HTML or text to find matches within\n\t *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n\t *   {@link #hashtag}, and {@link #mention} options are enabled).\n\t * @param {Object} [options] Any of the configuration options for the Autolinker\n\t *   class, specified in an Object (map). See the class description for an\n\t *   example call.\n\t * @return {Autolinker.match.Match[]} The array of Matches found in the\n\t *   given input `textOrHtml`.\n\t */\n\tstatic parse( textOrHtml: string, options: AutolinkerConfig ) {\n\t\tconst autolinker = new Autolinker( options );\n\t\treturn autolinker.parse( textOrHtml );\n\t}\n\n\n\t/**\n\t * The Autolinker version number exposed on the instance itself.\n\t *\n\t * Ex: 0.25.1\n\t */\n\treadonly version = Autolinker.version;\n\n\n\t/**\n\t * @cfg {Boolean/Object} [urls]\n\t *\n\t * `true` if URLs should be automatically linked, `false` if they should not\n\t * be. Defaults to `true`.\n\t *\n\t * Examples:\n\t *\n\t *     urls: true\n\t *\n\t *     // or\n\t *\n\t *     urls: {\n\t *         schemeMatches : true,\n\t *         wwwMatches    : true,\n\t *         tldMatches    : true\n\t *     }\n\t *\n\t * As shown above, this option also accepts an Object form with 3 properties\n\t * to allow for more customization of what exactly gets linked. All default\n\t * to `true`:\n\t *\n\t * @cfg {Boolean} [urls.schemeMatches] `true` to match URLs found prefixed\n\t *   with a scheme, i.e. `http://google.com`, or `other+scheme://google.com`,\n\t *   `false` to prevent these types of matches.\n\t * @cfg {Boolean} [urls.wwwMatches] `true` to match urls found prefixed with\n\t *   `'www.'`, i.e. `www.google.com`. `false` to prevent these types of\n\t *   matches. Note that if the URL had a prefixed scheme, and\n\t *   `schemeMatches` is true, it will still be linked.\n\t * @cfg {Boolean} [urls.tldMatches] `true` to match URLs with known top\n\t *   level domains (.com, .net, etc.) that are not prefixed with a scheme or\n\t *   `'www.'`. This option attempts to match anything that looks like a URL\n\t *   in the given text. Ex: `google.com`, `asdf.org/?page=1`, etc. `false`\n\t *   to prevent these types of matches.\n\t */\n\tprivate readonly urls: UrlsConfigObj = {};  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} [email=true]\n\t *\n\t * `true` if email addresses should be automatically linked, `false` if they\n\t * should not be.\n\t */\n\tprivate readonly email: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} [phone=true]\n\t *\n\t * `true` if Phone numbers (\"(555)555-5555\") should be automatically linked,\n\t * `false` if they should not be.\n\t */\n\tprivate readonly phone: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean/String} [hashtag=false]\n\t *\n\t * A string for the service name to have hashtags (ex: \"#myHashtag\")\n\t * auto-linked to. The currently-supported values are:\n\t *\n\t * - 'twitter'\n\t * - 'facebook'\n\t * - 'instagram'\n\t *\n\t * Pass `false` to skip auto-linking of hashtags.\n\t */\n\tprivate readonly hashtag: HashtagConfig = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String/Boolean} [mention=false]\n\t *\n\t * A string for the service name to have mentions (ex: \"@myuser\")\n\t * auto-linked to. The currently supported values are:\n\t *\n\t * - 'twitter'\n\t * - 'instagram'\n\t * - 'soundcloud'\n\t *\n\t * Defaults to `false` to skip auto-linking of mentions.\n\t */\n\tprivate readonly mention: MentionConfig = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} [newWindow=true]\n\t *\n\t * `true` if the links should open in a new window, `false` otherwise.\n\t */\n\tprivate readonly newWindow: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean/Object} [stripPrefix=true]\n\t *\n\t * `true` if 'http://' (or 'https://') and/or the 'www.' should be stripped\n\t * from the beginning of URL links' text, `false` otherwise. Defaults to\n\t * `true`.\n\t *\n\t * Examples:\n\t *\n\t *     stripPrefix: true\n\t *\n\t *     // or\n\t *\n\t *     stripPrefix: {\n\t *         scheme : true,\n\t *         www    : true\n\t *     }\n\t *\n\t * As shown above, this option also accepts an Object form with 2 properties\n\t * to allow for more customization of what exactly is prevented from being\n\t * displayed. Both default to `true`:\n\t *\n\t * @cfg {Boolean} [stripPrefix.scheme] `true` to prevent the scheme part of\n\t *   a URL match from being displayed to the user. Example:\n\t *   `'http://google.com'` will be displayed as `'google.com'`. `false` to\n\t *   not strip the scheme. NOTE: Only an `'http://'` or `'https://'` scheme\n\t *   will be removed, so as not to remove a potentially dangerous scheme\n\t *   (such as `'file://'` or `'javascript:'`)\n\t * @cfg {Boolean} [stripPrefix.www] www (Boolean): `true` to prevent the\n\t *   `'www.'` part of a URL match from being displayed to the user. Ex:\n\t *   `'www.google.com'` will be displayed as `'google.com'`. `false` to not\n\t *   strip the `'www'`.\n\t */\n\tprivate readonly stripPrefix: Required<StripPrefixConfigObj> = { scheme: true, www: true };  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} [stripTrailingSlash=true]\n\t *\n\t * `true` to remove the trailing slash from URL matches, `false` to keep\n\t *  the trailing slash.\n\t *\n\t *  Example when `true`: `http://google.com/` will be displayed as\n\t *  `http://google.com`.\n\t */\n\tprivate readonly stripTrailingSlash: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} [decodePercentEncoding=true]\n\t *\n\t * `true` to decode percent-encoded characters in URL matches, `false` to keep\n\t *  the percent-encoded characters.\n\t *\n\t *  Example when `true`: `https://en.wikipedia.org/wiki/San_Jos%C3%A9` will\n\t *  be displayed as `https://en.wikipedia.org/wiki/San_José`.\n\t */\n    private readonly decodePercentEncoding: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Number/Object} [truncate=0]\n\t *\n\t * ## Number Form\n\t *\n\t * A number for how many characters matched text should be truncated to\n\t * inside the text of a link. If the matched text is over this number of\n\t * characters, it will be truncated to this length by adding a two period\n\t * ellipsis ('..') to the end of the string.\n\t *\n\t * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file'\n\t * truncated to 25 characters might look something like this:\n\t * 'yahoo.com/some/long/pat..'\n\t *\n\t * Example Usage:\n\t *\n\t *     truncate: 25\n\t *\n\t *\n\t *  Defaults to `0` for \"no truncation.\"\n\t *\n\t *\n\t * ## Object Form\n\t *\n\t * An Object may also be provided with two properties: `length` (Number) and\n\t * `location` (String). `location` may be one of the following: 'end'\n\t * (default), 'middle', or 'smart'.\n\t *\n\t * Example Usage:\n\t *\n\t *     truncate: { length: 25, location: 'middle' }\n\t *\n\t * @cfg {Number} [truncate.length=0] How many characters to allow before\n\t *   truncation will occur. Defaults to `0` for \"no truncation.\"\n\t * @cfg {\"end\"/\"middle\"/\"smart\"} [truncate.location=\"end\"]\n\t *\n\t * - 'end' (default): will truncate up to the number of characters, and then\n\t *   add an ellipsis at the end. Ex: 'yahoo.com/some/long/pat..'\n\t * - 'middle': will truncate and add the ellipsis in the middle. Ex:\n\t *   'yahoo.com/s..th/to/a/file'\n\t * - 'smart': for URLs where the algorithm attempts to strip out unnecessary\n\t *   parts first (such as the 'www.', then URL scheme, hash, etc.),\n\t *   attempting to make the URL human-readable before looking for a good\n\t *   point to insert the ellipsis if it is still too long. Ex:\n\t *   'yahoo.com/some..to/a/file'. For more details, see\n\t *   {@link Autolinker.truncate.TruncateSmart}.\n\t */\n\tprivate readonly truncate: Required<TruncateConfigObj> = { length: 0, location : 'end' };  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} className\n\t *\n\t * A CSS class name to add to the generated links. This class will be added\n\t * to all links, as well as this class plus match suffixes for styling\n\t * url/email/phone/hashtag/mention links differently.\n\t *\n\t * For example, if this config is provided as \"myLink\", then:\n\t *\n\t * - URL links will have the CSS classes: \"myLink myLink-url\"\n\t * - Email links will have the CSS classes: \"myLink myLink-email\", and\n\t * - Phone links will have the CSS classes: \"myLink myLink-phone\"\n\t * - Hashtag links will have the CSS classes: \"myLink myLink-hashtag\"\n\t * - Mention links will have the CSS classes: \"myLink myLink-mention myLink-[type]\"\n\t *   where [type] is either \"instagram\", \"twitter\" or \"soundcloud\"\n\t */\n\tprivate readonly className: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Function} replaceFn\n\t *\n\t * A function to individually process each match found in the input string.\n\t *\n\t * See the class's description for usage.\n\t *\n\t * The `replaceFn` can be called with a different context object (`this`\n\t * reference) using the {@link #context} cfg.\n\t *\n\t * This function is called with the following parameter:\n\t *\n\t * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which\n\t *   can be used to retrieve information about the match that the `replaceFn`\n\t *   is currently processing. See {@link Autolinker.match.Match} subclasses\n\t *   for details.\n\t */\n\tprivate readonly replaceFn: ReplaceFn | null = null;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Object} context\n\t *\n\t * The context object (`this` reference) to call the `replaceFn` with.\n\t *\n\t * Defaults to this Autolinker instance.\n\t */\n\tprivate readonly context: any = undefined;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} [sanitizeHtml=false]\n\t * \n\t * `true` to HTML-encode the start and end brackets of existing HTML tags found \n  \t * in the input string. This will escape `<` and `>` characters to `&lt;` and \n\t * `&gt;`, respectively.\n\t * \n\t * Setting this to `true` will prevent XSS (Cross-site Scripting) attacks, \n\t * but will remove the significance of existing HTML tags in the input string. If \n\t * you would like to maintain the significance of existing HTML tags while also \n\t * making the output HTML string safe, leave this option as `false` and use a \n\t * tool like https://github.com/cure53/DOMPurify (or others) on the input string \n\t * before running Autolinker.\n\t */\n\tprivate readonly sanitizeHtml: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.matcher.Matcher[]} matchers\n\t *\n\t * The {@link Autolinker.matcher.Matcher} instances for this Autolinker\n\t * instance.\n\t *\n\t * This is lazily created in {@link #getMatchers}.\n\t */\n\tprivate matchers: Matcher[] | null = null;\n\n\t/**\n\t * @private\n\t * @property {Autolinker.AnchorTagBuilder} tagBuilder\n\t *\n\t * The AnchorTagBuilder instance used to build match replacement anchor tags.\n\t * Note: this is lazily instantiated in the {@link #getTagBuilder} method.\n\t */\n\tprivate tagBuilder: AnchorTagBuilder | null = null;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} [cfg] The configuration options for the Autolinker instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: AutolinkerConfig = {} ) {\n\t\t// Note: when `this.something` is used in the rhs of these assignments,\n\t\t//       it refers to the default values set above the constructor\n\t\tthis.urls = this.normalizeUrlsCfg( cfg.urls );\n\t\tthis.email = typeof cfg.email === 'boolean' ? cfg.email : this.email;\n\t\tthis.phone = typeof cfg.phone === 'boolean' ? cfg.phone : this.phone;\n\t\tthis.hashtag = cfg.hashtag || this.hashtag;\n\t\tthis.mention = cfg.mention || this.mention;\n\t\tthis.newWindow = typeof cfg.newWindow === 'boolean' ? cfg.newWindow : this.newWindow;\n\t\tthis.stripPrefix = this.normalizeStripPrefixCfg( cfg.stripPrefix );\n\t\tthis.stripTrailingSlash = typeof cfg.stripTrailingSlash === 'boolean' ? cfg.stripTrailingSlash : this.stripTrailingSlash;\n\t\tthis.decodePercentEncoding = typeof cfg.decodePercentEncoding === 'boolean' ? cfg.decodePercentEncoding : this.decodePercentEncoding;\n\t\tthis.sanitizeHtml = cfg.sanitizeHtml || false;\n\n\t\t// Validate the value of the `mention` cfg\n\t\tconst mention = this.mention;\n\t\tif( mention !== false && ['twitter', 'instagram', 'soundcloud', 'tiktok'].indexOf(mention) === -1 ) {\n\t\t\tthrow new Error( `invalid \\`mention\\` cfg '${mention}' - see docs` );\n\t\t}\n\n\t\t// Validate the value of the `hashtag` cfg\n\t\tconst hashtag = this.hashtag;\n\t\tif( hashtag !== false && ['twitter', 'facebook', 'instagram', 'tiktok'].indexOf(hashtag) === -1 ) {\n\t\t\tthrow new Error( `invalid \\`hashtag\\` cfg '${hashtag}' - see docs` );\n\t\t}\n\n\t\tthis.truncate = this.normalizeTruncateCfg( cfg.truncate );\n\t\tthis.className = cfg.className || this.className;\n\t\tthis.replaceFn = cfg.replaceFn || this.replaceFn;\n\t\tthis.context = cfg.context || this;\n\t}\n\n\n\t/**\n\t * Normalizes the {@link #urls} config into an Object with 3 properties:\n\t * `schemeMatches`, `wwwMatches`, and `tldMatches`, all Booleans.\n\t *\n\t * See {@link #urls} config for details.\n\t *\n\t * @private\n\t * @param {Boolean/Object} urls\n\t * @return {Object}\n\t */\n\tprivate normalizeUrlsCfg( \n\t\turls: UrlsConfig | undefined \n\t): Required<UrlsConfigObj> {\n\t\tif( urls == null ) urls = true;  // default to `true`\n\n\t\tif( typeof urls === 'boolean' ) {\n\t\t\treturn { schemeMatches: urls, wwwMatches: urls, tldMatches: urls };\n\n\t\t} else {  // object form\n\t\t\treturn {\n\t\t\t\tschemeMatches : typeof urls.schemeMatches === 'boolean' ? urls.schemeMatches : true,\n\t\t\t\twwwMatches    : typeof urls.wwwMatches === 'boolean'    ? urls.wwwMatches    : true,\n\t\t\t\ttldMatches    : typeof urls.tldMatches === 'boolean'    ? urls.tldMatches    : true\n\t\t\t};\n\t\t}\n\t}\n\n\n\t/**\n\t * Normalizes the {@link #stripPrefix} config into an Object with 2\n\t * properties: `scheme`, and `www` - both Booleans.\n\t *\n\t * See {@link #stripPrefix} config for details.\n\t *\n\t * @private\n\t * @param {Boolean/Object} stripPrefix\n\t * @return {Object}\n\t */\n\tprivate normalizeStripPrefixCfg( \n\t\tstripPrefix: StripPrefixConfig | undefined \n\t): Required<StripPrefixConfigObj> {\n\t\tif( stripPrefix == null ) stripPrefix = true;  // default to `true`\n\n\t\tif( typeof stripPrefix === 'boolean' ) {\n\t\t\treturn { scheme: stripPrefix, www: stripPrefix };\n\n\t\t} else {  // object form\n\t\t\treturn {\n\t\t\t\tscheme : typeof stripPrefix.scheme === 'boolean' ? stripPrefix.scheme : true,\n\t\t\t\twww    : typeof stripPrefix.www === 'boolean'    ? stripPrefix.www    : true\n\t\t\t};\n\t\t}\n\t}\n\n\n\t/**\n\t * Normalizes the {@link #truncate} config into an Object with 2 properties:\n\t * `length` (Number), and `location` (String).\n\t *\n\t * See {@link #truncate} config for details.\n\t *\n\t * @private\n\t * @param {Number/Object} truncate\n\t * @return {Object}\n\t */\n\tprivate normalizeTruncateCfg( \n\t\ttruncate: TruncateConfig | undefined \n\t): Required<TruncateConfigObj> {\n\t\tif( typeof truncate === 'number' ) {\n\t\t\treturn { length: truncate, location: 'end' };\n\n\t\t} else {  // object, or undefined/null\n\t\t\treturn defaults( truncate || {}, {\n\t\t\t\tlength   : Number.POSITIVE_INFINITY,\n\t\t\t\tlocation : 'end'\n\t\t\t} );\n\t\t}\n\t}\n\n\n\t/**\n\t * Parses the input `textOrHtml` looking for URLs, email addresses, phone\n\t * numbers, username handles, and hashtags (depending on the configuration\n\t * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n\t * objects describing those matches (without making any replacements).\n\t *\n\t * This method is used by the {@link #link} method, but can also be used to\n\t * simply do parsing of the input in order to discover what kinds of links\n\t * there are and how many.\n\t *\n\t * Example usage:\n\t *\n\t *     var autolinker = new Autolinker( {\n\t *         urls: true,\n\t *         email: true\n\t *     } );\n\t *\n\t *     var matches = autolinker.parse( \"Hello google.com, I am asdf@asdf.com\" );\n\t *\n\t *     console.log( matches.length );           // 2\n\t *     console.log( matches[ 0 ].getType() );   // 'url'\n\t *     console.log( matches[ 0 ].getUrl() );    // 'google.com'\n\t *     console.log( matches[ 1 ].getType() );   // 'email'\n\t *     console.log( matches[ 1 ].getEmail() );  // 'asdf@asdf.com'\n\t *\n\t * @param {String} textOrHtml The HTML or text to find matches within\n\t *   (depending on if the {@link #urls}, {@link #email}, {@link #phone},\n\t *   {@link #hashtag}, and {@link #mention} options are enabled).\n\t * @return {Autolinker.match.Match[]} The array of Matches found in the\n\t *   given input `textOrHtml`.\n\t */\n\tparse( textOrHtml: string ) {\n\t\tlet skipTagNames = [ 'a', 'style', 'script' ],\n\t\t    skipTagsStackCount = 0,  // used to only Autolink text outside of anchor/script/style tags. We don't want to autolink something that is already linked inside of an <a> tag, for instance\n\t\t\tmatches: Match[] = [];\n\t\t\t\n\t\t// Find all matches within the `textOrHtml` (but not matches that are\n\t\t// already nested within <a>, <style> and <script> tags)\n\t\tparseHtml( textOrHtml, {\n\t\t\tonOpenTag: ( tagName: string ) => {\n\t\t\t\tif( skipTagNames.indexOf( tagName ) >= 0 ) {\n\t\t\t\t\tskipTagsStackCount++;\n\t\t\t\t}\n\t\t\t},\n\t\t\tonText: ( text: string, offset: number ) => {\n\t\t\t\t// Only process text nodes that are not within an <a>, <style> or <script> tag\n\t\t\t\tif( skipTagsStackCount === 0 ) {\n\t\t\t\t\t// \"Walk around\" common HTML entities. An '&nbsp;' (for example)\n\t\t\t\t\t// could be at the end of a URL, but we don't want to \n\t\t\t\t\t// include the trailing '&' in the URL. See issue #76\n\t\t\t\t\t// TODO: Handle HTML entities separately in parseHtml() and\n\t\t\t\t\t// don't emit them as \"text\" except for &amp; entities\n\t\t\t\t\tconst htmlCharacterEntitiesRegex = /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi;\n\t\t\t\t\tconst textSplit = splitAndCapture( text, htmlCharacterEntitiesRegex );\n\n\t\t\t\t\tlet currentOffset = offset;\n\t\t\t\t\ttextSplit.forEach( ( splitText, i ) => {\n\t\t\t\t\t\t// even number matches are text, odd numbers are html entities\n\t\t\t\t\t\tif( i % 2 === 0 ) {\n\t\t\t\t\t\t\tlet textNodeMatches = this.parseText( splitText, currentOffset );\n\t\t\t\t\t\t\tmatches.push.apply( matches, textNodeMatches );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentOffset += splitText.length;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t},\n\t\t\tonCloseTag: ( tagName: string ) => {\n\t\t\t\tif( skipTagNames.indexOf( tagName ) >= 0 ) {\n\t\t\t\t\tskipTagsStackCount = Math.max( skipTagsStackCount - 1, 0 );  // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n\t\t\t\t}\n\t\t\t},\n\t\t\tonComment: ( offset: number ) => {},  // no need to process comment nodes\n\t\t\tonDoctype: ( offset: number ) => {},  // no need to process doctype nodes\n\t\t} );\n\n\n\t\t// After we have found all matches, remove subsequent matches that\n\t\t// overlap with a previous match. This can happen for instance with URLs,\n\t\t// where the url 'google.com/#link' would match '#link' as a hashtag.\n\t\tmatches = this.compactMatches( matches );\n\n\t\t// And finally, remove matches for match types that have been turned\n\t\t// off. We needed to have all match types turned on initially so that\n\t\t// things like hashtags could be filtered out if they were really just\n\t\t// part of a URL match (for instance, as a named anchor).\n\t\tmatches = this.removeUnwantedMatches( matches );\n\n\t\treturn matches;\n\t}\n\n\n\t/**\n\t * After we have found all matches, we need to remove matches that overlap \n\t * with a previous match. This can happen for instance with URLs, where the\n\t * url 'google.com/#link' would match '#link' as a hashtag. Because the \n\t * '#link' part is contained in a larger match that comes before the HashTag\n\t * match, we'll remove the HashTag match.\n\t *\n\t * @private\n\t * @param {Autolinker.match.Match[]} matches\n\t * @return {Autolinker.match.Match[]}\n\t */\n\tprivate compactMatches( matches: Match[] ) {\n\t\t// First, the matches need to be sorted in order of offset\n\t\tmatches.sort( function( a, b ) { return a.getOffset() - b.getOffset(); } );\n\t\tlet i = 0;\n\t\twhile(i < matches.length - 1) {\n\t\t\tlet match = matches[ i ],\n\t\t\t\t\toffset = match.getOffset(),\n\t\t\t\t\tmatchedTextLength = match.getMatchedText().length,\n\t\t\t    endIdx = offset + matchedTextLength;\n\n\t\t\tif( i + 1 < matches.length ) {\n\t\t\t\t// Remove subsequent matches that equal offset with current match\n\t\t\t\tif( matches[ i + 1 ].getOffset() === offset ) {\n\t\t\t\t\tlet removeIdx = matches[ i + 1 ].getMatchedText().length > matchedTextLength ? i : i + 1;\n\t\t\t\t\tmatches.splice( removeIdx, 1 );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Remove subsequent matches that overlap with the current match\n\t\t\t\tif( matches[ i + 1 ].getOffset() < endIdx ) {\n\t\t\t\t\tmatches.splice( i + 1, 1 );\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\n\t\treturn matches;\n\t}\n\n\n\t/**\n\t * Removes matches for matchers that were turned off in the options. For\n\t * example, if {@link #hashtag hashtags} were not to be matched, we'll\n\t * remove them from the `matches` array here.\n\t * \n\t * Note: we *must* use all Matchers on the input string, and then filter \n\t * them out later. For example, if the options were `{ url: false, hashtag: true }`,\n\t * we wouldn't want to match the text '#link' as a HashTag inside of the text \n\t * 'google.com/#link'. The way the algorithm works is that we match the full \n\t * URL first (which prevents the accidental HashTag match), and then we'll \n\t * simply throw away the URL match.\n\t *\n\t * @private\n\t * @param {Autolinker.match.Match[]} matches The array of matches to remove\n\t *   the unwanted matches from. Note: this array is mutated for the\n\t *   removals.\n\t * @return {Autolinker.match.Match[]} The mutated input `matches` array.\n\t */\n\tprivate removeUnwantedMatches( matches: Match[] ) {\n\t\tif( !this.hashtag ) remove( matches, ( match: Match ) => { return match.getType() === 'hashtag'; } );\n\t\tif( !this.email )   remove( matches, ( match: Match ) => { return match.getType() === 'email'; } );\n\t\tif( !this.phone )   remove( matches, ( match: Match ) => { return match.getType() === 'phone'; } );\n\t\tif( !this.mention ) remove( matches, ( match: Match ) => { return match.getType() === 'mention'; } );\n\t\tif( !this.urls.schemeMatches ) {\n\t\t\tremove( matches, ( m: Match ) => m.getType() === 'url' && ( m as UrlMatch ).getUrlMatchType() === 'scheme' );\n\t\t}\n\t\tif( !this.urls.wwwMatches ) {\n\t\t\tremove( matches, ( m: Match ) => m.getType() === 'url' && ( m as UrlMatch ).getUrlMatchType() === 'www' );\n\t\t}\n\t\tif( !this.urls.tldMatches ) {\n\t\t\tremove( matches, ( m: Match ) => m.getType() === 'url' && ( m as UrlMatch ).getUrlMatchType() === 'tld' );\n\t\t}\n\n\t\treturn matches;\n\t}\n\n\n\t/**\n\t * Parses the input `text` looking for URLs, email addresses, phone\n\t * numbers, username handles, and hashtags (depending on the configuration\n\t * of the Autolinker instance), and returns an array of {@link Autolinker.match.Match}\n\t * objects describing those matches.\n\t *\n\t * This method processes a **non-HTML string**, and is used to parse and\n\t * match within the text nodes of an HTML string. This method is used\n\t * internally by {@link #parse}.\n\t *\n\t * @private\n\t * @param {String} text The text to find matches within (depending on if the\n\t *   {@link #urls}, {@link #email}, {@link #phone},\n\t *   {@link #hashtag}, and {@link #mention} options are enabled). This must be a non-HTML string.\n\t * @param {Number} [offset=0] The offset of the text node within the\n\t *   original string. This is used when parsing with the {@link #parse}\n\t *   method to generate correct offsets within the {@link Autolinker.match.Match}\n\t *   instances, but may be omitted if calling this method publicly.\n\t * @return {Autolinker.match.Match[]} The array of Matches found in the\n\t *   given input `text`.\n\t */\n\tprivate parseText( text: string, offset = 0 ) {\n\t\toffset = offset || 0;\n\t\tlet matchers = this.getMatchers(),\n\t\t    matches: Match[] = [];\n\n\t\tfor( let i = 0, numMatchers = matchers.length; i < numMatchers; i++ ) {\n\t\t\tlet textMatches = matchers[ i ].parseMatches( text );\n\n\t\t\t// Correct the offset of each of the matches. They are originally\n\t\t\t// the offset of the match within the provided text node, but we\n\t\t\t// need to correct them to be relative to the original HTML input\n\t\t\t// string (i.e. the one provided to #parse).\n\t\t\tfor( let j = 0, numTextMatches = textMatches.length; j < numTextMatches; j++ ) {\n\t\t\t\ttextMatches[ j ].setOffset( offset + textMatches[ j ].getOffset() );\n\t\t\t}\n\n\t\t\tmatches.push.apply( matches, textMatches );\n\t\t}\n\t\treturn matches;\n\t}\n\n\n\t/**\n\t * Automatically links URLs, Email addresses, Phone numbers, Hashtags,\n\t * and Mentions (Twitter, Instagram, Soundcloud) found in the given chunk of HTML. Does not link\n\t * URLs found within HTML tags.\n\t *\n\t * For instance, if given the text: `You should go to http://www.yahoo.com`,\n\t * then the result will be `You should go to\n\t * &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n\t *\n\t * This method finds the text around any HTML elements in the input\n\t * `textOrHtml`, which will be the text that is processed. Any original HTML\n\t * elements will be left as-is, as well as the text that is already wrapped\n\t * in anchor (&lt;a&gt;) tags.\n\t *\n\t * @param {String} textOrHtml The HTML or text to autolink matches within\n\t *   (depending on if the {@link #urls}, {@link #email}, {@link #phone}, {@link #hashtag}, and {@link #mention} options are enabled).\n\t * @return {String} The HTML, with matches automatically linked.\n\t */\n\tlink( textOrHtml: string ) {\n\t\tif( !textOrHtml ) { return \"\"; }  // handle `null` and `undefined` (for JavaScript users that don't have TypeScript support)\n\t\t\n\t\t/* We would want to sanitize the start and end characters of a tag \n\t\t * before processing the string in order to avoid an XSS scenario.\n\t\t * This behaviour can be changed by toggling the sanitizeHtml option.\n\t\t */\n\t\tif( this.sanitizeHtml ) {\n\t\t\ttextOrHtml = textOrHtml\n\t\t\t\t.replace( /</g, '&lt;' )\n\t\t\t\t.replace( />/g, '&gt;' );\n\t\t}\n\n\t\tlet matches = this.parse( textOrHtml ),\n\t\t\tnewHtml: string[] = [],\n\t\t\tlastIndex = 0;\n\n\t\tfor( let i = 0, len = matches.length; i < len; i++ ) {\n\t\t\tlet match = matches[ i ];\n\n\t\t\tnewHtml.push( textOrHtml.substring( lastIndex, match.getOffset() ) );\n\t\t\tnewHtml.push( this.createMatchReturnVal( match ) );\n\n\t\t\tlastIndex = match.getOffset() + match.getMatchedText().length;\n\t\t}\n\t\tnewHtml.push( textOrHtml.substring( lastIndex ) );  // handle the text after the last match\n\n\t\treturn newHtml.join( '' );\n\t}\n\n\n\t/**\n\t * Creates the return string value for a given match in the input string.\n\t *\n\t * This method handles the {@link #replaceFn}, if one was provided.\n\t *\n\t * @private\n\t * @param {Autolinker.match.Match} match The Match object that represents\n\t *   the match.\n\t * @return {String} The string that the `match` should be replaced with.\n\t *   This is usually the anchor tag string, but may be the `matchStr` itself\n\t *   if the match is not to be replaced.\n\t */\n\tprivate createMatchReturnVal( match: Match ): string {\n\t\t// Handle a custom `replaceFn` being provided\n\t\tlet replaceFnResult: ReplaceFnReturn;\n\t\tif( this.replaceFn ) {\n\t\t\treplaceFnResult = this.replaceFn.call( this.context, match );  // Autolinker instance is the context\n\t\t}\n\n\t\tif( typeof replaceFnResult === 'string' ) {\n\t\t\treturn replaceFnResult;  // `replaceFn` returned a string, use that\n\n\t\t} else if( replaceFnResult === false ) {\n\t\t\treturn match.getMatchedText();  // no replacement for the match\n\n\t\t} else if( replaceFnResult instanceof HtmlTag ) {\n\t\t\treturn replaceFnResult.toAnchorString();\n\n\t\t} else {  // replaceFnResult === true, or no/unknown return value from function\n\t\t\t// Perform Autolinker's default anchor tag generation\n\t\t\tlet anchorTag = match.buildTag();  // returns an Autolinker.HtmlTag instance\n\n\t\t\treturn anchorTag.toAnchorString();\n\t\t}\n\t}\n\n\n\t/**\n\t * Lazily instantiates and returns the {@link Autolinker.matcher.Matcher}\n\t * instances for this Autolinker instance.\n\t *\n\t * @private\n\t * @return {Autolinker.matcher.Matcher[]}\n\t */\n\tprivate getMatchers() {\n\t\tif( !this.matchers ) {\n\t\t\tlet tagBuilder = this.getTagBuilder();\n\n\t\t\tlet matchers = [\n\t\t\t\tnew HashtagMatcher( { tagBuilder, serviceName: this.hashtag as HashtagServices } ),\n\t\t\t\tnew EmailMatcher( { tagBuilder } ),\n\t\t\t\tnew PhoneMatcher( { tagBuilder } ),\n\t\t\t\tnew MentionMatcher( { tagBuilder, serviceName: this.mention as MentionServices } ),\n\t\t\t\tnew UrlMatcher( { tagBuilder, stripPrefix: this.stripPrefix, stripTrailingSlash: this.stripTrailingSlash, decodePercentEncoding: this.decodePercentEncoding } )\n\t\t\t];\n\n\t\t\treturn ( this.matchers = matchers );\n\n\t\t} else {\n\t\t\treturn this.matchers;\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns the {@link #tagBuilder} instance for this Autolinker instance, \n\t * lazily instantiating it if it does not yet exist.\n\t * \n\t * @private\n\t * @return {Autolinker.AnchorTagBuilder}\n\t */\n\tprivate getTagBuilder() {\n\t\tlet tagBuilder = this.tagBuilder;\n\n\t\tif( !tagBuilder ) {\n\t\t\ttagBuilder = this.tagBuilder = new AnchorTagBuilder( {\n\t\t\t\tnewWindow   : this.newWindow,\n\t\t\t\ttruncate    : this.truncate,\n\t\t\t\tclassName   : this.className\n\t\t\t} );\n\t\t}\n\n\t\treturn tagBuilder;\n\t}\n\n}\n\nexport interface AutolinkerConfig {\n\turls?: UrlsConfig;\n\temail?: boolean;\n\tphone?: boolean;\n\thashtag?: HashtagConfig;\n\tmention?: MentionConfig;\n\tnewWindow?: boolean;\n\tstripPrefix?: StripPrefixConfig;\n\tstripTrailingSlash?: boolean;\n\ttruncate?: TruncateConfig;\n\tclassName?: string;\n\treplaceFn?: ReplaceFn | null;\n\tcontext?: any;\n\tsanitizeHtml?: boolean;\n\tdecodePercentEncoding?: boolean;\n}\n\nexport type UrlsConfig = boolean | UrlsConfigObj;\nexport interface UrlsConfigObj {\n\tschemeMatches?: boolean;\n\twwwMatches?: boolean;\n\ttldMatches?: boolean;\n}\n\nexport type UrlMatchTypeOptions = 'scheme' | 'www' | 'tld';\n\nexport type StripPrefixConfig = boolean | StripPrefixConfigObj;\nexport interface StripPrefixConfigObj {\n\tscheme? : boolean;\n\twww?    : boolean;\n}\n\nexport type TruncateConfig = number | TruncateConfigObj;\nexport interface TruncateConfigObj {\n\tlength?: number;\n\tlocation?: \"end\" | \"middle\" | \"smart\";\n}\n\nexport type HashtagConfig = false | HashtagServices;\nexport type HashtagServices = 'twitter' | 'facebook' | 'instagram' | 'tiktok';\n\nexport type MentionConfig = false | MentionServices;\nexport type MentionServices = 'twitter' | 'instagram' | 'soundcloud' | 'tiktok';\n\nexport type ReplaceFn = ( match: Match ) => ReplaceFnReturn;\nexport type ReplaceFnReturn = boolean | string | HtmlTag | null | undefined | void;"]},"metadata":{},"sourceType":"module"}