{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericCharsStr, alphaNumericAndMarksCharsStr, getDomainNameStr } from \"../regex-lib\";\nimport { tldRegex } from \"./tld-regex\";\nimport { UrlMatch } from \"../match/url-match\";\nimport { UrlMatchValidator } from \"./url-match-validator\"; // RegExp objects which are shared by all instances of UrlMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating UrlMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\n\nvar matcherRegex = function () {\n  var schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,\n      // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n  wwwRegex = /(?:www\\.)/,\n      // starting with 'www.'\n  // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n  // http://blog.codinghorror.com/the-problem-with-urls/\n  urlSuffixRegex = new RegExp('[/?#](?:[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}?!:,.;^\\u2713]*[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}\\u2713])?');\n  return new RegExp(['(?:', '(', schemeRegex.source, getDomainNameStr(2), ')', '|', '(', '(//)?', wwwRegex.source, getDomainNameStr(6), ')', '|', '(', '(//)?', getDomainNameStr(10) + '\\\\.', tldRegex.source, '(?![-' + alphaNumericCharsStr + '])', ')', ')', '(?::[0-9]+)?', '(?:' + urlSuffixRegex.source + ')?' // match for path, query string, and/or hash anchor - optional\n  ].join(\"\"), 'gi');\n}();\n\nvar wordCharRegExp = new RegExp('[' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Url\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find URL matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n */\n\nvar UrlMatcher =\n/** @class */\nfunction (_super) {\n  __extends(UrlMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n\n\n  function UrlMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n\n\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#stripTrailingSlash\n     */\n\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#decodePercentEncoding\n     */\n\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @protected\n     * @property {RegExp} matcherRegex\n     *\n     * The regular expression to match URLs with an optional scheme, port\n     * number, path, query string, and hash anchor.\n     *\n     * Example matches:\n     *\n     *     http://google.com\n     *     www.google.com\n     *     google.com/path/to/file?q1=1&q2=2#myAnchor\n     *\n     *\n     * This regular expression will have the following capturing groups:\n     *\n     * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n     *     This is used to match scheme URLs with just a single word, such as\n     *     'http://localhost', where we won't double check that the domain name\n     *     has at least one dot ('.') in it.\n     * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n     *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n     *     'http://', 'ftp:', etc.)\n     * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n     *     URL. Will be an empty string if it is not a protocol-relative match.\n     *     We need to know the character before the '//' in order to determine\n     *     if it is a valid match or the // was in a string we don't want to\n     *     auto-link.\n     * 4.  Group that matches a known TLD (top level domain), when a scheme\n     *     or 'www.'-prefixed domain is not matched.\n     * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n     *     URL. Will be an empty string if it is not a protocol-relative match.\n     *     See #3 for more info.\n     */\n\n    _this.matcherRegex = matcherRegex;\n    /**\n     * A regular expression to use to check the character before a protocol-relative\n     * URL match. We don't want to match a protocol-relative URL if it is part\n     * of another word.\n     *\n     * For example, we want to match something like \"Go to: //google.com\",\n     * but we don't want to match something like \"abc//google.com\"\n     *\n     * This regular expression is used to test the character before the '//'.\n     *\n     * @protected\n     * @type {RegExp} wordCharRegExp\n     */\n\n    _this.wordCharRegExp = wordCharRegExp;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  UrlMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n        stripPrefix = this.stripPrefix,\n        stripTrailingSlash = this.stripTrailingSlash,\n        decodePercentEncoding = this.decodePercentEncoding,\n        tagBuilder = this.tagBuilder,\n        matches = [],\n        match;\n\n    var _loop_1 = function () {\n      var matchStr = match[0],\n          schemeUrlMatch = match[1],\n          wwwUrlMatch = match[4],\n          wwwProtocolRelativeMatch = match[5],\n          //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n      tldProtocolRelativeMatch = match[9],\n          offset = match.index,\n          protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n          prevChar = text.charAt(offset - 1);\n\n      if (!UrlMatchValidator.isValid(matchStr, schemeUrlMatch)) {\n        return \"continue\";\n      } // If the match is preceded by an '@' character, then it is either\n      // an email address or a username. Skip these types of matches.\n\n\n      if (offset > 0 && prevChar === '@') {\n        return \"continue\";\n      } // If it's a protocol-relative '//' match, but the character before the '//'\n      // was a word character (i.e. a letter/number), then we found the '//' in the\n      // middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n      // match.\n\n\n      if (offset > 0 && protocolRelativeMatch && this_1.wordCharRegExp.test(prevChar)) {\n        return \"continue\";\n      } // If the URL ends with a question mark, don't include the question\n      // mark as part of the URL. We'll assume the question mark was the\n      // end of a sentence, such as: \"Going to google.com?\"\n\n\n      if (/\\?$/.test(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1);\n      } // Handle a closing parenthesis or square bracket at the end of the \n      // match, and exclude it if there is not a matching open parenthesis \n      // or square bracket in the match itself.\n\n\n      if (this_1.matchHasUnbalancedClosingParen(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n      } else {\n        // Handle an invalid character after the TLD\n        var pos = this_1.matchHasInvalidCharAfterTld(matchStr, schemeUrlMatch);\n\n        if (pos > -1) {\n          matchStr = matchStr.substr(0, pos); // remove the trailing invalid chars\n        }\n      } // The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n      // However, in cases where a URL is missing whitespace before an obvious link,\n      // (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n      // at the http:// part. We will check if the match contains a common scheme and then \n      // shift the match to start from there. \t\t\n\n\n      var foundCommonScheme = ['http://', 'https://'].find(function (commonScheme) {\n        return !!schemeUrlMatch && schemeUrlMatch.indexOf(commonScheme) !== -1;\n      });\n\n      if (foundCommonScheme) {\n        // If we found an overmatched URL, we want to find the index\n        // of where the match should start and shift the match to\n        // start from the beginning of the common scheme\n        var indexOfSchemeStart = matchStr.indexOf(foundCommonScheme);\n        matchStr = matchStr.substr(indexOfSchemeStart);\n        schemeUrlMatch = schemeUrlMatch.substr(indexOfSchemeStart);\n        offset = offset + indexOfSchemeStart;\n      }\n\n      var urlMatchType = schemeUrlMatch ? 'scheme' : wwwUrlMatch ? 'www' : 'tld',\n          protocolUrlMatch = !!schemeUrlMatch;\n      matches.push(new UrlMatch({\n        tagBuilder: tagBuilder,\n        matchedText: matchStr,\n        offset: offset,\n        urlMatchType: urlMatchType,\n        url: matchStr,\n        protocolUrlMatch: protocolUrlMatch,\n        protocolRelativeMatch: !!protocolRelativeMatch,\n        stripPrefix: stripPrefix,\n        stripTrailingSlash: stripTrailingSlash,\n        decodePercentEncoding: decodePercentEncoding\n      }));\n    };\n\n    var this_1 = this;\n\n    while ((match = matcherRegex.exec(text)) !== null) {\n      _loop_1();\n    }\n\n    return matches;\n  };\n  /**\n   * Determines if a match found has an unmatched closing parenthesis,\n   * square bracket or curly bracket. If so, the symbol will be removed\n   * from the match itself, and appended after the generated anchor tag.\n   *\n   * A match may have an extra closing parenthesis at the end of the match\n   * because the regular expression must include parenthesis for URLs such as\n   * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n   *\n   * However, an extra parenthesis *will* be included when the URL itself is\n   * wrapped in parenthesis, such as in the case of:\n   *     \"(wikipedia.com/something_(disambiguation))\"\n   * In this case, the last closing parenthesis should *not* be part of the\n   * URL itself, and this method will return `true`.\n   *\n   * For square brackets in URLs such as in PHP arrays, the same behavior as\n   * parenthesis discussed above should happen:\n   *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n   * The closing square bracket should not be part of the URL itself, and this\n   * method will return `true`.\n   *\n   * @protected\n   * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n   * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\n   *   square bracket at the end of the `matchStr`, `false` otherwise.\n   */\n\n\n  UrlMatcher.prototype.matchHasUnbalancedClosingParen = function (matchStr) {\n    var endChar = matchStr.charAt(matchStr.length - 1);\n    var startChar;\n\n    if (endChar === ')') {\n      startChar = '(';\n    } else if (endChar === ']') {\n      startChar = '[';\n    } else if (endChar === '}') {\n      startChar = '{';\n    } else {\n      return false; // not a close parenthesis or square bracket\n    } // Find if there are the same number of open braces as close braces in\n    // the URL string, minus the last character (which we have already \n    // determined to be either ')', ']' or '}'\n\n\n    var numOpenBraces = 0;\n\n    for (var i = 0, len = matchStr.length - 1; i < len; i++) {\n      var char = matchStr.charAt(i);\n\n      if (char === startChar) {\n        numOpenBraces++;\n      } else if (char === endChar) {\n        numOpenBraces = Math.max(numOpenBraces - 1, 0);\n      }\n    } // If the number of open braces matches the number of close braces in\n    // the URL minus the last character, then the match has *unbalanced*\n    // braces because of the last character. Example of unbalanced braces\n    // from the regex match:\n    //     \"http://example.com?a[]=1]\"\n\n\n    if (numOpenBraces === 0) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Determine if there's an invalid character after the TLD in a URL. Valid\n   * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n   * check.\n   *\n   * @protected\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\n   *   empty string if the match is not a URL match.\n   * @param {String} schemeUrlMatch The match URL string for a scheme\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\n   *   'http://localhost', where we won't double check that the domain name\n   *   has at least one '.' in it.\n   * @return {Number} the position where the invalid character was found. If\n   *   no such character was found, returns -1\n   */\n\n\n  UrlMatcher.prototype.matchHasInvalidCharAfterTld = function (urlMatch, schemeUrlMatch) {\n    if (!urlMatch) {\n      return -1;\n    }\n\n    var offset = 0;\n\n    if (schemeUrlMatch) {\n      offset = urlMatch.indexOf(':');\n      urlMatch = urlMatch.slice(offset);\n    }\n\n    var re = new RegExp(\"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\");\n    var res = re.exec(urlMatch);\n\n    if (res === null) {\n      return -1;\n    }\n\n    offset += res[1].length;\n    urlMatch = urlMatch.slice(res[1].length);\n\n    if (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n      return offset;\n    }\n\n    return -1;\n  };\n\n  return UrlMatcher;\n}(Matcher);\n\nexport { UrlMatcher };","map":{"version":3,"mappings":"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","names":["Matcher","alphaNumericCharsStr","alphaNumericAndMarksCharsStr","getDomainNameStr","tldRegex","UrlMatch","UrlMatchValidator","matcherRegex","schemeRegex","wwwRegex","urlSuffixRegex","RegExp","source","join","wordCharRegExp","__extends","cfg","_super","_this","scheme","www","stripPrefix","stripTrailingSlash","decodePercentEncoding","UrlMatcher","text","tagBuilder","matches","match","matchStr","schemeUrlMatch","wwwUrlMatch","wwwProtocolRelativeMatch","tldProtocolRelativeMatch","offset","index","protocolRelativeMatch","prevChar","charAt","isValid","this_1","test","substr","length","matchHasUnbalancedClosingParen","pos","matchHasInvalidCharAfterTld","foundCommonScheme","find","commonScheme","indexOf","indexOfSchemeStart","urlMatchType","protocolUrlMatch","push","matchedText","url","exec","endChar","startChar","numOpenBraces","i","len","char","Math","max","urlMatch","slice","re","res"],"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/node_modules/autolinker/dist/es2015/src/matcher/url-matcher.ts"],"sourcesContent":["import { Matcher, MatcherConfig } from \"./matcher\";\nimport { alphaNumericCharsStr, alphaNumericAndMarksCharsStr, getDomainNameStr } from \"../regex-lib\";\nimport { StripPrefixConfigObj, UrlMatchTypeOptions } from \"../autolinker\";\nimport { tldRegex } from \"./tld-regex\";\nimport { UrlMatch } from \"../match/url-match\";\nimport { UrlMatchValidator } from \"./url-match-validator\";\nimport { Match } from \"../match/match\";\n\n// RegExp objects which are shared by all instances of UrlMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating UrlMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nconst matcherRegex = (function() {\n\tlet schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,  // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n\t\twwwRegex = /(?:www\\.)/,  // starting with 'www.'\n\n\t\t// Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n\t\t// http://blog.codinghorror.com/the-problem-with-urls/\n\t\turlSuffixRegex = new RegExp( '[/?#](?:[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}?!:,.;^\\u2713]*[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}\\u2713])?' );\n\n\treturn new RegExp( [\n\t\t'(?:', // parens to cover match for scheme (optional), and domain\n\t\t\t'(',  // *** Capturing group $1, for a scheme-prefixed url (ex: http://google.com)\n\t\t\t\tschemeRegex.source,\n\t\t\t\tgetDomainNameStr( 2 ),\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t'(',  // *** Capturing group $4 for a 'www.' prefixed url (ex: www.google.com)\n\t\t\t\t'(//)?',  // *** Capturing group $5 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character (handled later)\n\t\t\t\twwwRegex.source,\n\t\t\t\tgetDomainNameStr(6),\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t'(',  // *** Capturing group $8, for known a TLD url (ex: google.com)\n\t\t\t\t'(//)?',  // *** Capturing group $9 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character (handled later)\n\t\t\t\tgetDomainNameStr(10) + '\\\\.',\n\t\t\t\ttldRegex.source,\n\t\t\t\t'(?![-' + alphaNumericCharsStr + '])', // TLD not followed by a letter, behaves like unicode-aware \\b\n\t\t\t')',\n\t\t')',\n\n\t\t'(?::[0-9]+)?', // port\n\n\t\t'(?:' + urlSuffixRegex.source + ')?'  // match for path, query string, and/or hash anchor - optional\n\t].join( \"\" ), 'gi' );\n} )();\n\nconst wordCharRegExp = new RegExp( '[' + alphaNumericAndMarksCharsStr + ']' );\n\n/**\n * @class Autolinker.matcher.Url\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find URL matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n */\nexport class UrlMatcher extends Matcher {\n\n\t/**\n\t * @cfg {Object} stripPrefix (required)\n\t *\n\t * The Object form of {@link Autolinker#cfg-stripPrefix}.\n\t */\n\tprotected stripPrefix: Required<StripPrefixConfigObj> = { scheme: true, www: true };  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} stripTrailingSlash (required)\n\t * @inheritdoc Autolinker#stripTrailingSlash\n\t */\n\tprotected stripTrailingSlash: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} decodePercentEncoding (required)\n\t * @inheritdoc Autolinker#decodePercentEncoding\n\t */\n\tprotected decodePercentEncoding: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t *\n\t * The regular expression to match URLs with an optional scheme, port\n\t * number, path, query string, and hash anchor.\n\t *\n\t * Example matches:\n\t *\n\t *     http://google.com\n\t *     www.google.com\n\t *     google.com/path/to/file?q1=1&q2=2#myAnchor\n\t *\n\t *\n\t * This regular expression will have the following capturing groups:\n\t *\n\t * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n\t *     This is used to match scheme URLs with just a single word, such as\n\t *     'http://localhost', where we won't double check that the domain name\n\t *     has at least one dot ('.') in it.\n\t * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n\t *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n\t *     'http://', 'ftp:', etc.)\n\t * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n\t *     URL. Will be an empty string if it is not a protocol-relative match.\n\t *     We need to know the character before the '//' in order to determine\n\t *     if it is a valid match or the // was in a string we don't want to\n\t *     auto-link.\n\t * 4.  Group that matches a known TLD (top level domain), when a scheme\n\t *     or 'www.'-prefixed domain is not matched.\n\t * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n\t *     URL. Will be an empty string if it is not a protocol-relative match.\n\t *     See #3 for more info.\n\t */\n\tprotected matcherRegex = matcherRegex;\n\n\t/**\n\t * A regular expression to use to check the character before a protocol-relative\n\t * URL match. We don't want to match a protocol-relative URL if it is part\n\t * of another word.\n\t *\n\t * For example, we want to match something like \"Go to: //google.com\",\n\t * but we don't want to match something like \"abc//google.com\"\n\t *\n\t * This regular expression is used to test the character before the '//'.\n\t *\n\t * @protected\n\t * @type {RegExp} wordCharRegExp\n\t */\n\tprotected wordCharRegExp = wordCharRegExp;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: UrlMatcherConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.stripPrefix = cfg.stripPrefix;\n\t\tthis.stripTrailingSlash = cfg.stripTrailingSlash;\n\t\tthis.decodePercentEncoding = cfg.decodePercentEncoding;\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t    stripPrefix = this.stripPrefix,\n\t\t    stripTrailingSlash = this.stripTrailingSlash,\n\t\t    decodePercentEncoding = this.decodePercentEncoding,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet matchStr = match[ 0 ],\n\t\t\t    schemeUrlMatch = match[ 1 ],\n\t\t\t    wwwUrlMatch = match[ 4 ],\n\t\t\t    wwwProtocolRelativeMatch = match[ 5 ],\n\t\t\t    //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n\t\t\t    tldProtocolRelativeMatch = match[ 9 ],\n\t\t\t    offset = match.index,\n\t\t\t    protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n\t\t\t\tprevChar = text.charAt( offset - 1 );\n\n\t\t\tif( !UrlMatchValidator.isValid( matchStr, schemeUrlMatch ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the match is preceded by an '@' character, then it is either\n\t\t\t// an email address or a username. Skip these types of matches.\n\t\t\tif( offset > 0 && prevChar === '@' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If it's a protocol-relative '//' match, but the character before the '//'\n\t\t\t// was a word character (i.e. a letter/number), then we found the '//' in the\n\t\t\t// middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n\t\t\t// match.\n\t\t\tif( offset > 0 && protocolRelativeMatch && this.wordCharRegExp.test( prevChar ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the URL ends with a question mark, don't include the question\n\t\t\t// mark as part of the URL. We'll assume the question mark was the\n\t\t\t// end of a sentence, such as: \"Going to google.com?\"\n\t\t\tif( /\\?$/.test( matchStr ) ) {\n\t\t\t\tmatchStr = matchStr.substr( 0, matchStr.length-1 );\n\t\t\t}\n\n\t\t\t// Handle a closing parenthesis or square bracket at the end of the \n\t\t\t// match, and exclude it if there is not a matching open parenthesis \n\t\t\t// or square bracket in the match itself.\n\t\t\tif( this.matchHasUnbalancedClosingParen( matchStr ) ) {\n\t\t\t\tmatchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing \")\"\n\t\t\t} else {\n\t\t\t\t// Handle an invalid character after the TLD\n\t\t\t\tlet pos = this.matchHasInvalidCharAfterTld( matchStr, schemeUrlMatch );\n\t\t\t\tif( pos > -1 ) {\n\t\t\t\t\tmatchStr = matchStr.substr( 0, pos ); // remove the trailing invalid chars\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n\t\t\t// However, in cases where a URL is missing whitespace before an obvious link,\n\t\t\t// (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n\t\t\t// at the http:// part. We will check if the match contains a common scheme and then \n\t\t\t// shift the match to start from there. \t\t\n\t\t\tconst foundCommonScheme = [ 'http://', 'https://' ].find(\n\t\t\t\t(commonScheme) => !!schemeUrlMatch && schemeUrlMatch.indexOf( commonScheme ) !== -1\n\t\t\t);\n\t\t\tif ( foundCommonScheme  ) {\n\t\t\t\t// If we found an overmatched URL, we want to find the index\n\t\t\t\t// of where the match should start and shift the match to\n\t\t\t\t// start from the beginning of the common scheme\n\t\t\t\tconst indexOfSchemeStart = matchStr.indexOf( foundCommonScheme );\n\n\t\t\t\tmatchStr = matchStr.substr( indexOfSchemeStart );\n\t\t\t\tschemeUrlMatch = schemeUrlMatch.substr( indexOfSchemeStart );\n\t\t\t\toffset = offset + indexOfSchemeStart;\n\t\t\t}\n\n\t\t\tlet urlMatchType: UrlMatchTypeOptions = schemeUrlMatch ? 'scheme' : ( wwwUrlMatch ? 'www' : 'tld' ),\n\t\t\t    protocolUrlMatch = !!schemeUrlMatch;\n\n\t\t\tmatches.push( new UrlMatch( {\n\t\t\t\ttagBuilder            : tagBuilder,\n\t\t\t\tmatchedText           : matchStr,\n\t\t\t\toffset                : offset,\n\t\t\t\turlMatchType          : urlMatchType,\n\t\t\t\turl                   : matchStr,\n\t\t\t\tprotocolUrlMatch      : protocolUrlMatch,\n\t\t\t\tprotocolRelativeMatch : !!protocolRelativeMatch,\n\t\t\t\tstripPrefix           : stripPrefix,\n\t\t\t\tstripTrailingSlash    : stripTrailingSlash,\n\t\t\t\tdecodePercentEncoding : decodePercentEncoding,\n\t\t\t} ) );\n\t\t}\n\n\t\treturn matches;\n\t}\n\n\n\t/**\n\t * Determines if a match found has an unmatched closing parenthesis,\n\t * square bracket or curly bracket. If so, the symbol will be removed\n\t * from the match itself, and appended after the generated anchor tag.\n\t *\n\t * A match may have an extra closing parenthesis at the end of the match\n\t * because the regular expression must include parenthesis for URLs such as\n\t * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n\t *\n\t * However, an extra parenthesis *will* be included when the URL itself is\n\t * wrapped in parenthesis, such as in the case of: \n\t *     \"(wikipedia.com/something_(disambiguation))\"\n\t * In this case, the last closing parenthesis should *not* be part of the\n\t * URL itself, and this method will return `true`. \n\t * \n\t * For square brackets in URLs such as in PHP arrays, the same behavior as \n\t * parenthesis discussed above should happen:\n\t *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n\t * The closing square bracket should not be part of the URL itself, and this\n\t * method will return `true`.\n\t *\n\t * @protected\n\t * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n\t * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\n\t *   square bracket at the end of the `matchStr`, `false` otherwise.\n\t */\n\tprotected matchHasUnbalancedClosingParen( matchStr: string ): boolean {\n\t\tlet endChar = matchStr.charAt( matchStr.length - 1 );\n\t\tlet startChar: string;\n\n\t\tif( endChar === ')' ) {\n\t\t\tstartChar = '(';\n\t\t} else if( endChar === ']' ) {\n\t\t\tstartChar = '[';\n\t\t} else if ( endChar === '}' ) {\n\t\t\tstartChar = '{';\n\t\t} else {\n\t\t\treturn false;  // not a close parenthesis or square bracket\n\t\t}\n\n\t\t// Find if there are the same number of open braces as close braces in\n\t\t// the URL string, minus the last character (which we have already \n\t\t// determined to be either ')', ']' or '}'\n\t\tlet numOpenBraces = 0;\n\t\tfor( let i = 0, len = matchStr.length - 1; i < len; i++ ) {\n\t\t\tconst char = matchStr.charAt( i );\n\n\t\t\tif( char === startChar ) {\n\t\t\t\tnumOpenBraces++;\n\t\t\t} else if( char === endChar ) {\n\t\t\t\tnumOpenBraces = Math.max( numOpenBraces - 1, 0 );\n\t\t\t}\n\t\t}\n\n\t\t// If the number of open braces matches the number of close braces in\n\t\t// the URL minus the last character, then the match has *unbalanced*\n\t\t// braces because of the last character. Example of unbalanced braces\n\t\t// from the regex match:\n\t\t//     \"http://example.com?a[]=1]\"\n\t\tif( numOpenBraces === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * Determine if there's an invalid character after the TLD in a URL. Valid\n\t * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n\t * check.\n\t *\n\t * @protected\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\n\t *   empty string if the match is not a URL match.\n\t * @param {String} schemeUrlMatch The match URL string for a scheme\n\t *   match. Ex: 'http://yahoo.com'. This is used to match something like\n\t *   'http://localhost', where we won't double check that the domain name\n\t *   has at least one '.' in it.\n\t * @return {Number} the position where the invalid character was found. If\n\t *   no such character was found, returns -1\n\t */\n\tprotected matchHasInvalidCharAfterTld( urlMatch: string, schemeUrlMatch: string ) {\n\t\tif( !urlMatch ) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet offset = 0;\n\t\tif ( schemeUrlMatch ) {\n\t\t\toffset = urlMatch.indexOf(':');\n\t\t\turlMatch = urlMatch.slice(offset);\n\t\t}\n\n\t\tlet re = new RegExp( \"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\" );\n\t\tlet res = re.exec( urlMatch );\n\t\tif ( res === null ) {\n\t\t\treturn -1;\n\t\t}\n\n\t\toffset += res[1].length;\n\t\turlMatch = urlMatch.slice(res[1].length);\n\t\tif (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n\t\t\treturn offset;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n}\n\nexport interface UrlMatcherConfig extends MatcherConfig {\n\tstripPrefix: Required<StripPrefixConfigObj>;\n\tstripTrailingSlash: boolean;\n\tdecodePercentEncoding: boolean;\n}"]},"metadata":{},"sourceType":"module"}