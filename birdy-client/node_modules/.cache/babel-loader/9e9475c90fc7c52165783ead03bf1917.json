{"ast":null,"code":"/*!\n * React Native Autolink\n *\n * Copyright 2016-2021 Josh Swan\n * Released under the MIT license\n * https://github.com/joshswan/react-native-autolink/blob/master/LICENSE\n */\nimport React, { createElement, useCallback, useRef } from 'react';\nimport { Autolinker, AnchorTagBuilder } from 'autolinker/dist/es2015';\nimport { Alert, Linking, StyleSheet, Text } from 'react-native';\nimport { truncate } from './truncate';\nimport { CustomMatch } from './CustomMatch';\nimport * as urls from './urls';\n\nconst makeTokenGenerator = uid => {\n  let counter = 0;\n  return [// eslint-disable-next-line no-plusplus\n  () => `@__ELEMENT-${uid}-${counter++}__@`, new RegExp(`(@__ELEMENT-${uid}-\\\\d+__@)`, 'g')];\n};\n\nconst styles = StyleSheet.create({\n  link: {\n    color: '#0E7AFE'\n  }\n});\nconst tagBuilder = new AnchorTagBuilder();\nexport const Autolink = React.memo(_ref => {\n  let {\n    as,\n    component,\n    email = true,\n    hashtag = false,\n    linkProps = {},\n    linkStyle,\n    matchers = [],\n    mention = false,\n    onPress: onPressProp,\n    onLongPress: onLongPressProp,\n    phone = false,\n    renderLink: renderLinkProp,\n    renderText,\n    showAlert = false,\n    stripPrefix = true,\n    stripTrailingSlash = true,\n    text,\n    textProps = {},\n    truncate: truncateProp = 0,\n    truncateChars = '..',\n    truncateLocation = 'smart',\n    url = true,\n    useNativeSchemes = false,\n    ...props\n  } = _ref;\n  const getUrl = useCallback(match => {\n    switch (match.getType()) {\n      case 'email':\n        return urls.getEmailUrl(match);\n\n      case 'hashtag':\n        return urls.getHashtagUrl(match, hashtag, useNativeSchemes);\n\n      case 'mention':\n        return urls.getMentionUrl(match, mention, useNativeSchemes);\n\n      case 'phone':\n        return urls.getPhoneUrl(match, phone);\n\n      default:\n        return match.getAnchorHref();\n    }\n  }, [hashtag, mention, phone, useNativeSchemes]);\n  const onPress = useCallback((match, alertShown) => {\n    var _a, _b; // Bypass default press handling if matcher has custom onPress\n\n\n    if (match instanceof CustomMatch && match.getMatcher().onPress) {\n      (_b = (_a = match.getMatcher()).onPress) === null || _b === void 0 ? void 0 : _b.call(_a, match);\n      return;\n    } // Check if alert needs to be shown\n\n\n    if (showAlert && !alertShown) {\n      Alert.alert('Leaving App', 'Do you want to continue?', [{\n        text: 'Cancel',\n        style: 'cancel'\n      }, {\n        text: 'OK',\n        onPress: () => onPress(match, true)\n      }]);\n      return;\n    }\n\n    const linkUrl = getUrl(match);\n\n    if (onPressProp) {\n      onPressProp(linkUrl, match);\n    } else {\n      Linking.openURL(linkUrl);\n    }\n  }, [getUrl, onPressProp, showAlert]);\n  const onLongPress = useCallback(match => {\n    var _a, _b; // Bypass default press handling if matcher has custom onLongPress\n\n\n    if (match instanceof CustomMatch && match.getMatcher().onLongPress) {\n      (_b = (_a = match.getMatcher()).onLongPress) === null || _b === void 0 ? void 0 : _b.call(_a, match);\n      return;\n    }\n\n    if (onLongPressProp) {\n      const linkUrl = getUrl(match);\n      onLongPressProp(linkUrl, match);\n    }\n  }, [getUrl, onLongPressProp]);\n  const renderLink = useCallback((linkText, match, index) => {\n    const truncated = truncateProp ? truncate(linkText, truncateProp, truncateChars, truncateLocation) : linkText;\n    return React.createElement(Text, Object.assign({\n      style: match instanceof CustomMatch && match.getMatcher().style || linkStyle || styles.link,\n      onPress: () => onPress(match),\n      onLongPress: () => onLongPress(match)\n    }, linkProps, {\n      key: index\n    }), truncated);\n  }, [linkProps, linkStyle, truncateProp, truncateChars, truncateLocation, onPress, onLongPress]); // Creates a token with a random UID that should not be guessable or\n  // conflict with other parts of the string.\n\n  const uid = useRef(Math.floor(Math.random() * 0x10000000000).toString(16));\n  const [generateToken, tokenRegexp] = makeTokenGenerator(uid.current);\n  const matches = {};\n  let linkedText;\n\n  try {\n    linkedText = Autolinker.link(text || '', {\n      email,\n      hashtag,\n      mention,\n      phone: !!phone,\n      urls: url,\n      stripPrefix,\n      stripTrailingSlash,\n      replaceFn: match => {\n        const token = generateToken();\n        matches[token] = match;\n        return token;\n      }\n    }); // User-specified custom matchers\n\n    matchers.forEach(matcher => {\n      linkedText = linkedText.replace(matcher.pattern, function () {\n        const token = generateToken();\n\n        for (var _len = arguments.length, replacerArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n          replacerArgs[_key] = arguments[_key];\n        }\n\n        const matchedText = replacerArgs[0];\n        matches[token] = new CustomMatch({\n          matcher,\n          matchedText,\n          offset: replacerArgs[replacerArgs.length - 2],\n          replacerArgs,\n          tagBuilder\n        });\n        return token;\n      });\n    });\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('RN Autolink error:', e);\n    return null;\n  }\n\n  const nodes = linkedText.split(tokenRegexp).filter(part => !!part).map((part, index) => {\n    const match = matches[part]; // Check if rendering link or text node\n\n    if (match === null || match === void 0 ? void 0 : match.getType()) {\n      return (renderLinkProp || renderLink)(match.getAnchorText(), match, index);\n    }\n\n    return renderText ? renderText(part, index) : // eslint-disable-next-line react/jsx-props-no-spreading, react/no-array-index-key\n    React.createElement(Text, Object.assign({}, textProps, {\n      key: index\n    }), part);\n  });\n  return createElement(as || component || Text, props, ...nodes);\n});","map":{"version":3,"sources":["/home/yannis/Documents/Project/Birdy/birdy-client/node_modules/react-native-autolink/dist/Autolink.js"],"names":["React","createElement","useCallback","useRef","Autolinker","AnchorTagBuilder","Alert","Linking","StyleSheet","Text","truncate","CustomMatch","urls","makeTokenGenerator","uid","counter","RegExp","styles","create","link","color","tagBuilder","Autolink","memo","as","component","email","hashtag","linkProps","linkStyle","matchers","mention","onPress","onPressProp","onLongPress","onLongPressProp","phone","renderLink","renderLinkProp","renderText","showAlert","stripPrefix","stripTrailingSlash","text","textProps","truncateProp","truncateChars","truncateLocation","url","useNativeSchemes","props","getUrl","match","getType","getEmailUrl","getHashtagUrl","getMentionUrl","getPhoneUrl","getAnchorHref","alertShown","_a","_b","getMatcher","call","alert","style","linkUrl","openURL","linkText","index","truncated","Object","assign","key","Math","floor","random","toString","generateToken","tokenRegexp","current","matches","linkedText","replaceFn","token","forEach","matcher","replace","pattern","replacerArgs","matchedText","offset","length","e","console","warn","nodes","split","filter","part","map","getAnchorText"],"mappings":"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","sourcesContent":["/*!\n * React Native Autolink\n *\n * Copyright 2016-2021 Josh Swan\n * Released under the MIT license\n * https://github.com/joshswan/react-native-autolink/blob/master/LICENSE\n */\nimport React, { createElement, useCallback, useRef } from 'react';\nimport { Autolinker, AnchorTagBuilder, } from 'autolinker/dist/es2015';\nimport { Alert, Linking, StyleSheet, Text } from 'react-native';\nimport { truncate } from './truncate';\nimport { CustomMatch } from './CustomMatch';\nimport * as urls from './urls';\nconst makeTokenGenerator = (uid) => {\n    let counter = 0;\n    return [\n        // eslint-disable-next-line no-plusplus\n        () => `@__ELEMENT-${uid}-${counter++}__@`,\n        new RegExp(`(@__ELEMENT-${uid}-\\\\d+__@)`, 'g'),\n    ];\n};\nconst styles = StyleSheet.create({\n    link: {\n        color: '#0E7AFE',\n    },\n});\nconst tagBuilder = new AnchorTagBuilder();\nexport const Autolink = React.memo(({ as, component, email = true, hashtag = false, linkProps = {}, linkStyle, matchers = [], mention = false, onPress: onPressProp, onLongPress: onLongPressProp, phone = false, renderLink: renderLinkProp, renderText, showAlert = false, stripPrefix = true, stripTrailingSlash = true, text, textProps = {}, truncate: truncateProp = 0, truncateChars = '..', truncateLocation = 'smart', url = true, useNativeSchemes = false, ...props }) => {\n    const getUrl = useCallback((match) => {\n        switch (match.getType()) {\n            case 'email':\n                return urls.getEmailUrl(match);\n            case 'hashtag':\n                return urls.getHashtagUrl(match, hashtag, useNativeSchemes);\n            case 'mention':\n                return urls.getMentionUrl(match, mention, useNativeSchemes);\n            case 'phone':\n                return urls.getPhoneUrl(match, phone);\n            default:\n                return match.getAnchorHref();\n        }\n    }, [hashtag, mention, phone, useNativeSchemes]);\n    const onPress = useCallback((match, alertShown) => {\n        var _a, _b;\n        // Bypass default press handling if matcher has custom onPress\n        if (match instanceof CustomMatch && match.getMatcher().onPress) {\n            (_b = (_a = match.getMatcher()).onPress) === null || _b === void 0 ? void 0 : _b.call(_a, match);\n            return;\n        }\n        // Check if alert needs to be shown\n        if (showAlert && !alertShown) {\n            Alert.alert('Leaving App', 'Do you want to continue?', [\n                { text: 'Cancel', style: 'cancel' },\n                { text: 'OK', onPress: () => onPress(match, true) },\n            ]);\n            return;\n        }\n        const linkUrl = getUrl(match);\n        if (onPressProp) {\n            onPressProp(linkUrl, match);\n        }\n        else {\n            Linking.openURL(linkUrl);\n        }\n    }, [getUrl, onPressProp, showAlert]);\n    const onLongPress = useCallback((match) => {\n        var _a, _b;\n        // Bypass default press handling if matcher has custom onLongPress\n        if (match instanceof CustomMatch && match.getMatcher().onLongPress) {\n            (_b = (_a = match.getMatcher()).onLongPress) === null || _b === void 0 ? void 0 : _b.call(_a, match);\n            return;\n        }\n        if (onLongPressProp) {\n            const linkUrl = getUrl(match);\n            onLongPressProp(linkUrl, match);\n        }\n    }, [getUrl, onLongPressProp]);\n    const renderLink = useCallback((linkText, match, index) => {\n        const truncated = truncateProp\n            ? truncate(linkText, truncateProp, truncateChars, truncateLocation)\n            : linkText;\n        return (React.createElement(Text, Object.assign({ style: (match instanceof CustomMatch && match.getMatcher().style) || linkStyle || styles.link, onPress: () => onPress(match), onLongPress: () => onLongPress(match) }, linkProps, { key: index }), truncated));\n    }, [linkProps, linkStyle, truncateProp, truncateChars, truncateLocation, onPress, onLongPress]);\n    // Creates a token with a random UID that should not be guessable or\n    // conflict with other parts of the string.\n    const uid = useRef(Math.floor(Math.random() * 0x10000000000).toString(16));\n    const [generateToken, tokenRegexp] = makeTokenGenerator(uid.current);\n    const matches = {};\n    let linkedText;\n    try {\n        linkedText = Autolinker.link(text || '', {\n            email,\n            hashtag,\n            mention,\n            phone: !!phone,\n            urls: url,\n            stripPrefix,\n            stripTrailingSlash,\n            replaceFn: (match) => {\n                const token = generateToken();\n                matches[token] = match;\n                return token;\n            },\n        });\n        // User-specified custom matchers\n        matchers.forEach((matcher) => {\n            linkedText = linkedText.replace(matcher.pattern, (...replacerArgs) => {\n                const token = generateToken();\n                const matchedText = replacerArgs[0];\n                matches[token] = new CustomMatch({\n                    matcher,\n                    matchedText,\n                    offset: replacerArgs[replacerArgs.length - 2],\n                    replacerArgs,\n                    tagBuilder,\n                });\n                return token;\n            });\n        });\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('RN Autolink error:', e);\n        return null;\n    }\n    const nodes = linkedText\n        .split(tokenRegexp)\n        .filter((part) => !!part)\n        .map((part, index) => {\n        const match = matches[part];\n        // Check if rendering link or text node\n        if (match === null || match === void 0 ? void 0 : match.getType()) {\n            return (renderLinkProp || renderLink)(match.getAnchorText(), match, index);\n        }\n        return renderText ? (renderText(part, index)) : (\n        // eslint-disable-next-line react/jsx-props-no-spreading, react/no-array-index-key\n        React.createElement(Text, Object.assign({}, textProps, { key: index }), part));\n    });\n    return createElement(as || component || Text, props, ...nodes);\n});\n"]},"metadata":{},"sourceType":"module"}