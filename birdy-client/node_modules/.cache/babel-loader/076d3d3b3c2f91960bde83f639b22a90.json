{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from \"./match\";\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\n\nvar UrlMatch =\n/** @class */\nfunction (_super) {\n  __extends(UrlMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\n\n  function UrlMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} url (required)\n     *\n     * The url that was matched.\n     */\n\n\n    _this.url = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n     *\n     * The type of URL match that this class represents. This helps to determine\n     * if the match was made in the original text with a prefixed scheme (ex:\n     * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n     * was matched by a known top-level domain (ex: 'google.com').\n     */\n\n    _this.urlMatchType = 'scheme'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} protocolUrlMatch (required)\n     *\n     * `true` if the URL is a match which already has a protocol (i.e.\n     * 'http://'), `false` if the match was from a 'www' or known TLD match.\n     */\n\n    _this.protocolUrlMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} protocolRelativeMatch (required)\n     *\n     * `true` if the URL is a protocol-relative match. A protocol-relative match\n     * is a URL that starts with '//', and will be either http:// or https://\n     * based on the protocol that the site is loaded under.\n     */\n\n    _this.protocolRelativeMatch = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} stripPrefix (required)\n     *\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\n     */\n\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} stripTrailingSlash (required)\n     * @inheritdoc Autolinker#cfg-stripTrailingSlash\n     */\n\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Boolean} decodePercentEncoding (required)\n     * @inheritdoc Autolinker#cfg-decodePercentEncoding\n     */\n\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @private\n     * @property {RegExp} schemePrefixRegex\n     *\n     * A regular expression used to remove the 'http://' or 'https://' from\n     * URLs.\n     */\n\n    _this.schemePrefixRegex = /^(https?:\\/\\/)?/i;\n    /**\n     * @private\n     * @property {RegExp} wwwPrefixRegex\n     *\n     * A regular expression used to remove the 'www.' from URLs.\n     */\n\n    _this.wwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n    /**\n     * @private\n     * @property {RegExp} protocolRelativeRegex\n     *\n     * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n     * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n     */\n\n    _this.protocolRelativeRegex = /^\\/\\//;\n    /**\n     * @private\n     * @property {Boolean} protocolPrepended\n     *\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n\n    _this.protocolPrepended = false;\n    _this.urlMatchType = cfg.urlMatchType;\n    _this.url = cfg.url;\n    _this.protocolUrlMatch = cfg.protocolUrlMatch;\n    _this.protocolRelativeMatch = cfg.protocolRelativeMatch;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of UrlMatch, returns 'url'.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getType = function () {\n    return 'url';\n  };\n  /**\n   * Returns a string name for the type of URL match that this class\n   * represents.\n   *\n   * This helps to determine if the match was made in the original text with a\n   * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n   * 'www.google.com'), or was matched by a known top-level domain (ex:\n   * 'google.com').\n   *\n   * @return {\"scheme\"/\"www\"/\"tld\"}\n   */\n\n\n  UrlMatch.prototype.getUrlMatchType = function () {\n    return this.urlMatchType;\n  };\n  /**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getUrl = function () {\n    var url = this.url; // if the url string doesn't begin with a protocol, assume 'http://'\n\n    if (!this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended) {\n      url = this.url = 'http://' + url;\n      this.protocolPrepended = true;\n    }\n\n    return url;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getAnchorHref = function () {\n    var url = this.getUrl();\n    return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  UrlMatch.prototype.getAnchorText = function () {\n    var anchorText = this.getMatchedText();\n\n    if (this.protocolRelativeMatch) {\n      // Strip off any protocol-relative '//' from the anchor text\n      anchorText = this.stripProtocolRelativePrefix(anchorText);\n    }\n\n    if (this.stripPrefix.scheme) {\n      anchorText = this.stripSchemePrefix(anchorText);\n    }\n\n    if (this.stripPrefix.www) {\n      anchorText = this.stripWwwPrefix(anchorText);\n    }\n\n    if (this.stripTrailingSlash) {\n      anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n    }\n\n    if (this.decodePercentEncoding) {\n      anchorText = this.removePercentEncoding(anchorText);\n    }\n\n    return anchorText;\n  }; // ---------------------------------------\n  // Utility Functionality\n\n  /**\n   * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n   * `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the url scheme.\n   * @return {String} The `url`, with the scheme stripped.\n   */\n\n\n  UrlMatch.prototype.stripSchemePrefix = function (url) {\n    return url.replace(this.schemePrefixRegex, '');\n  };\n  /**\n   * Strips the 'www' prefix from the given `url`.\n   *\n   * @private\n   * @param {String} url The text of the anchor that is being generated, for\n   *   which to strip off the 'www' if it exists.\n   * @return {String} The `url`, with the 'www' stripped.\n   */\n\n\n  UrlMatch.prototype.stripWwwPrefix = function (url) {\n    return url.replace(this.wwwPrefixRegex, '$1'); // leave any scheme ($1), it one exists\n  };\n  /**\n   * Strips any protocol-relative '//' from the anchor text.\n   *\n   * @private\n   * @param {String} text The text of the anchor that is being generated, for which to strip off the\n   *   protocol-relative prefix (such as stripping off \"//\")\n   * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n   */\n\n\n  UrlMatch.prototype.stripProtocolRelativePrefix = function (text) {\n    return text.replace(this.protocolRelativeRegex, '');\n  };\n  /**\n   * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n   *   slash ('/') that may exist.\n   * @return {String} The `anchorText`, with the trailing slash removed.\n   */\n\n\n  UrlMatch.prototype.removeTrailingSlash = function (anchorText) {\n    if (anchorText.charAt(anchorText.length - 1) === '/') {\n      anchorText = anchorText.slice(0, -1);\n    }\n\n    return anchorText;\n  };\n  /**\n   * Decodes percent-encoded characters from the given `anchorText`, in\n   * preparation for the text to be displayed.\n   *\n   * @private\n   * @param {String} anchorText The text of the anchor that is being\n   *   generated, for which to decode any percent-encoded characters.\n   * @return {String} The `anchorText`, with the percent-encoded characters\n   *   decoded.\n   */\n\n\n  UrlMatch.prototype.removePercentEncoding = function (anchorText) {\n    // First, convert a few of the known % encodings to the corresponding\n    // HTML entities that could accidentally be interpretted as special\n    // HTML characters\n    var preProcessedEntityAnchorText = anchorText.replace(/%22/gi, '&quot;') // \" char\n    .replace(/%26/gi, '&amp;') // & char\n    .replace(/%27/gi, '&#39;') // ' char\n    .replace(/%3C/gi, '&lt;') // < char\n    .replace(/%3E/gi, '&gt;'); // > char\n\n    try {\n      // Now attempt to decode the rest of the anchor text\n      return decodeURIComponent(preProcessedEntityAnchorText);\n    } catch (e) {\n      // Invalid % escape sequence in the anchor text\n      return preProcessedEntityAnchorText;\n    }\n  };\n\n  return UrlMatch;\n}(Match);\n\nexport { UrlMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,QAAmC,SAAnC;AAGA;;;;;;;;;AAQA;AAAA;AAAA;AAA8BC;AA2F7B;;;;;;;AAKA,oBAAaC,GAAb,EAAgC;AAAhC,gBACCC,kBAAOD,GAAP,KAAY,IADb;AA9FA;;;;;;;AAKQE,gBAAc,EAAd,CAyFwB,CAzFL;;AAE3B;;;;;;;;;AAQiBA,yBAAoC,QAApC,CA+Ee,CA/EgC;;AAEhE;;;;;;;AAMiBA,6BAA4B,KAA5B,CAuEe,CAvEqB;;AAErD;;;;;;;;AAOiBA,kCAAiC,KAAjC,CA8De,CA9D0B;;AAE1D;;;;;;AAKiBA,wBAA8C;AAAEC,YAAM,EAAE,IAAV;AAAgBC,SAAG,EAAE;AAArB,KAA9C,CAuDe,CAvD6D;;AAE7F;;;;;AAIiBF,+BAA8B,IAA9B,CAiDe,CAjDsB;;AAEtD;;;;;AAIiBA,kCAAiC,IAAjC,CA2Ce,CA3CyB;;AAEzD;;;;;;;;AAOAA,8BAAoB,kBAApB;AAEA;;;;;;;AAMAA,2BAAiB,0BAAjB;AAEA;;;;;;;;AAOAA,kCAAwB,OAAxB;AAEA;;;;;;;;AAOAA,8BAAoB,KAApB;AAWCA,SAAI,CAACG,YAAL,GAAoBL,GAAG,CAACK,YAAxB;AACAH,SAAI,CAACI,GAAL,GAAWN,GAAG,CAACM,GAAf;AACAJ,SAAI,CAACK,gBAAL,GAAwBP,GAAG,CAACO,gBAA5B;AACAL,SAAI,CAACM,qBAAL,GAA6BR,GAAG,CAACQ,qBAAjC;AACAN,SAAI,CAACO,WAAL,GAAmBT,GAAG,CAACS,WAAvB;AACAP,SAAI,CAACQ,kBAAL,GAA0BV,GAAG,CAACU,kBAA9B;AACAR,SAAI,CAACS,qBAAL,GAA6BX,GAAG,CAACW,qBAAjC;;AACA;AAGD;;;;;;;;AAMAC;AACC,WAAO,KAAP;AACA,GAFD;AAKA;;;;;;;;;;;;;AAWAA;AACC,WAAO,KAAKP,YAAZ;AACA,GAFD;AAKA;;;;;;;;AAMAO;AACC,QAAIN,GAAG,GAAG,KAAKA,GAAf,CADD,CAGC;;AACA,QAAI,CAAC,KAAKE,qBAAN,IAA+B,CAAC,KAAKD,gBAArC,IAAyD,CAAC,KAAKM,iBAAnE,EAAuF;AACtFP,SAAG,GAAG,KAAKA,GAAL,GAAW,YAAYA,GAA7B;AAEA,WAAKO,iBAAL,GAAyB,IAAzB;AACA;;AAED,WAAOP,GAAP;AACA,GAXD;AAcA;;;;;;;AAKAM;AACC,QAAIN,GAAG,GAAG,KAAKQ,MAAL,EAAV;AAEA,WAAOR,GAAG,CAACS,OAAJ,CAAa,QAAb,EAAuB,GAAvB,CAAP,CAHD,CAGuC;AACtC,GAJD;AAOA;;;;;;;AAKAH;AACC,QAAII,UAAU,GAAG,KAAKC,cAAL,EAAjB;;AAEA,QAAI,KAAKT,qBAAT,EAAiC;AAChC;AACAQ,gBAAU,GAAG,KAAKE,2BAAL,CAAkCF,UAAlC,CAAb;AACA;;AACD,QAAI,KAAKP,WAAL,CAAiBN,MAArB,EAA8B;AAC7Ba,gBAAU,GAAG,KAAKG,iBAAL,CAAwBH,UAAxB,CAAb;AACA;;AACD,QAAI,KAAKP,WAAL,CAAiBL,GAArB,EAA2B;AAC1BY,gBAAU,GAAG,KAAKI,cAAL,CAAqBJ,UAArB,CAAb;AACA;;AACD,QAAI,KAAKN,kBAAT,EAA8B;AAC7BM,gBAAU,GAAG,KAAKK,mBAAL,CAA0BL,UAA1B,CAAb,CAD6B,CACyB;AACtD;;AACD,QAAI,KAAKL,qBAAT,EAAiC;AAChCK,gBAAU,GAAG,KAAKM,qBAAL,CAA4BN,UAA5B,CAAb;AACA;;AAED,WAAOA,UAAP;AACA,GArBD,CA7KD,CAqMC;AAEA;;AAEA;;;;;;;;;;;AASQJ,yCAAR,UAA2BN,GAA3B,EAAsC;AACrC,WAAOA,GAAG,CAACS,OAAJ,CAAa,KAAKQ,iBAAlB,EAAqC,EAArC,CAAP;AACA,GAFO;AAKR;;;;;;;;;;AAQQX,sCAAR,UAAwBN,GAAxB,EAAmC;AAClC,WAAOA,GAAG,CAACS,OAAJ,CAAa,KAAKS,cAAlB,EAAkC,IAAlC,CAAP,CADkC,CACgB;AAClD,GAFO;AAKR;;;;;;;;;;AAQQZ,mDAAR,UAAqCa,IAArC,EAAiD;AAChD,WAAOA,IAAI,CAACV,OAAL,CAAc,KAAKW,qBAAnB,EAA0C,EAA1C,CAAP;AACA,GAFO;AAKR;;;;;;;;;;AAQQd,2CAAR,UAA6BI,UAA7B,EAA+C;AAC9C,QAAIA,UAAU,CAACW,MAAX,CAAmBX,UAAU,CAACY,MAAX,GAAoB,CAAvC,MAA+C,GAAnD,EAAyD;AACxDZ,gBAAU,GAAGA,UAAU,CAACa,KAAX,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAb;AACA;;AACD,WAAOb,UAAP;AACA,GALO;AAOR;;;;;;;;;;;;AAUQJ,6CAAR,UAA+BI,UAA/B,EAAiD;AAChD;AACA;AACA;AACA,QAAMc,4BAA4B,GAAGd,UAAU,CAC7CD,OADmC,CAC1B,OAD0B,EACjB,QADiB,EACN;AADM,KAEnCA,OAFmC,CAE1B,OAF0B,EAEjB,OAFiB,EAEN;AAFM,KAGnCA,OAHmC,CAG1B,OAH0B,EAGjB,OAHiB,EAGN;AAHM,KAInCA,OAJmC,CAI1B,OAJ0B,EAIjB,MAJiB,EAIN;AAJM,KAKnCA,OALmC,CAK1B,OAL0B,EAKjB,MALiB,CAArC,CAJgD,CASjB;;AAE/B,QAAI;AACH;AACA,aAAOgB,kBAAkB,CAAED,4BAAF,CAAzB;AACA,KAHD,CAGE,OAAOE,CAAP,EAAW;AAAG;AACf,aAAOF,4BAAP;AACA;AACD,GAjBO;;AAmBT;AAAC,CA7RD,CAA8BhC,KAA9B","names":["Match","__extends","cfg","_super","_this","scheme","www","urlMatchType","url","protocolUrlMatch","protocolRelativeMatch","stripPrefix","stripTrailingSlash","decodePercentEncoding","UrlMatch","protocolPrepended","getUrl","replace","anchorText","getMatchedText","stripProtocolRelativePrefix","stripSchemePrefix","stripWwwPrefix","removeTrailingSlash","removePercentEncoding","schemePrefixRegex","wwwPrefixRegex","text","protocolRelativeRegex","charAt","length","slice","preProcessedEntityAnchorText","decodeURIComponent","e"],"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/node_modules/autolinker/dist/es2015/src/match/url-match.ts"],"sourcesContent":["import { Match, MatchConfig } from \"./match\";\nimport { StripPrefixConfigObj, UrlMatchTypeOptions } from \"../autolinker\";\n\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n *\n * Represents a Url match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nexport class UrlMatch extends Match {\n\n\t/**\n\t * @cfg {String} url (required)\n\t *\n\t * The url that was matched.\n\t */\n\tprivate url: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {\"scheme\"/\"www\"/\"tld\"} urlMatchType (required)\n\t *\n\t * The type of URL match that this class represents. This helps to determine\n\t * if the match was made in the original text with a prefixed scheme (ex:\n\t * 'http://www.google.com'), a prefixed 'www' (ex: 'www.google.com'), or\n\t * was matched by a known top-level domain (ex: 'google.com').\n\t */\n\tprivate readonly urlMatchType: UrlMatchTypeOptions = 'scheme';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} protocolUrlMatch (required)\n\t *\n\t * `true` if the URL is a match which already has a protocol (i.e.\n\t * 'http://'), `false` if the match was from a 'www' or known TLD match.\n\t */\n\tprivate readonly protocolUrlMatch: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} protocolRelativeMatch (required)\n\t *\n\t * `true` if the URL is a protocol-relative match. A protocol-relative match\n\t * is a URL that starts with '//', and will be either http:// or https://\n\t * based on the protocol that the site is loaded under.\n\t */\n\tprivate readonly protocolRelativeMatch: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Object} stripPrefix (required)\n\t *\n\t * The Object form of {@link Autolinker#cfg-stripPrefix}.\n\t */\n\tprivate readonly stripPrefix: Required<StripPrefixConfigObj> = { scheme: true, www: true };  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} stripTrailingSlash (required)\n\t * @inheritdoc Autolinker#cfg-stripTrailingSlash\n\t */\n\tprivate readonly stripTrailingSlash: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} decodePercentEncoding (required)\n\t * @inheritdoc Autolinker#cfg-decodePercentEncoding\n\t */\n\tprivate readonly decodePercentEncoding: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @private\n\t * @property {RegExp} schemePrefixRegex\n\t *\n\t * A regular expression used to remove the 'http://' or 'https://' from\n\t * URLs.\n\t */\n\tschemePrefixRegex = /^(https?:\\/\\/)?/i;\n\n\t/**\n\t * @private\n\t * @property {RegExp} wwwPrefixRegex\n\t *\n\t * A regular expression used to remove the 'www.' from URLs.\n\t */\n\twwwPrefixRegex = /^(https?:\\/\\/)?(www\\.)?/i;\n\n\t/**\n\t * @private\n\t * @property {RegExp} protocolRelativeRegex\n\t *\n\t * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n\t * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t */\n\tprotocolRelativeRegex = /^\\/\\//;\n\n\t/**\n\t * @private\n\t * @property {Boolean} protocolPrepended\n\t *\n\t * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n\t * {@link #url} did not have a protocol)\n\t */\n\tprotocolPrepended = false;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: UrlMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.urlMatchType = cfg.urlMatchType;\n\t\tthis.url = cfg.url;\n\t\tthis.protocolUrlMatch = cfg.protocolUrlMatch;\n\t\tthis.protocolRelativeMatch = cfg.protocolRelativeMatch;\n\t\tthis.stripPrefix = cfg.stripPrefix;\n\t\tthis.stripTrailingSlash = cfg.stripTrailingSlash;\n\t\tthis.decodePercentEncoding = cfg.decodePercentEncoding;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of UrlMatch, returns 'url'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'url';\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of URL match that this class\n\t * represents.\n\t *\n\t * This helps to determine if the match was made in the original text with a\n\t * prefixed scheme (ex: 'http://www.google.com'), a prefixed 'www' (ex:\n\t * 'www.google.com'), or was matched by a known top-level domain (ex:\n\t * 'google.com').\n\t *\n\t * @return {\"scheme\"/\"www\"/\"tld\"}\n\t */\n\tgetUrlMatchType() {\n\t\treturn this.urlMatchType;\n\t}\n\n\n\t/**\n\t * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n\t * match was missing a protocol.\n\t *\n\t * @return {String}\n\t */\n\tgetUrl() {\n\t\tlet url = this.url;\n\n\t\t// if the url string doesn't begin with a protocol, assume 'http://'\n\t\tif( !this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended ) {\n\t\t\turl = this.url = 'http://' + url;\n\n\t\t\tthis.protocolPrepended = true;\n\t\t}\n\n\t\treturn url;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\tlet url = this.getUrl();\n\n\t\treturn url.replace( /&amp;/g, '&' );  // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\tlet anchorText = this.getMatchedText();\n\n\t\tif( this.protocolRelativeMatch ) {\n\t\t\t// Strip off any protocol-relative '//' from the anchor text\n\t\t\tanchorText = this.stripProtocolRelativePrefix( anchorText );\n\t\t}\n\t\tif( this.stripPrefix.scheme ) {\n\t\t\tanchorText = this.stripSchemePrefix( anchorText );\n\t\t}\n\t\tif( this.stripPrefix.www ) {\n\t\t\tanchorText = this.stripWwwPrefix( anchorText );\n\t\t}\n\t\tif( this.stripTrailingSlash ) {\n\t\t\tanchorText = this.removeTrailingSlash( anchorText );  // remove trailing slash, if there is one\n\t\t}\n\t\tif( this.decodePercentEncoding ) {\n\t\t\tanchorText = this.removePercentEncoding( anchorText );\n\t\t}\n\n\t\treturn anchorText;\n\t}\n\n\n\t// ---------------------------------------\n\n\t// Utility Functionality\n\n\t/**\n\t * Strips the scheme prefix (such as \"http://\" or \"https://\") from the given\n\t * `url`.\n\t *\n\t * @private\n\t * @param {String} url The text of the anchor that is being generated, for\n\t *   which to strip off the url scheme.\n\t * @return {String} The `url`, with the scheme stripped.\n\t */\n\tprivate stripSchemePrefix( url: string ) {\n\t\treturn url.replace( this.schemePrefixRegex, '' );\n\t}\n\n\n\t/**\n\t * Strips the 'www' prefix from the given `url`.\n\t *\n\t * @private\n\t * @param {String} url The text of the anchor that is being generated, for\n\t *   which to strip off the 'www' if it exists.\n\t * @return {String} The `url`, with the 'www' stripped.\n\t */\n\tprivate stripWwwPrefix( url: string ) {\n\t\treturn url.replace( this.wwwPrefixRegex, '$1' );  // leave any scheme ($1), it one exists\n\t}\n\n\n\t/**\n\t * Strips any protocol-relative '//' from the anchor text.\n\t *\n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   protocol-relative prefix (such as stripping off \"//\")\n\t * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n\t */\n\tprivate stripProtocolRelativePrefix( text: string ) {\n\t\treturn text.replace( this.protocolRelativeRegex, '' );\n\t}\n\n\n\t/**\n\t * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n\t *\n\t * @private\n\t * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n\t *   slash ('/') that may exist.\n\t * @return {String} The `anchorText`, with the trailing slash removed.\n\t */\n\tprivate removeTrailingSlash( anchorText: string ) {\n\t\tif( anchorText.charAt( anchorText.length - 1 ) === '/' ) {\n\t\t\tanchorText = anchorText.slice( 0, -1 );\n\t\t}\n\t\treturn anchorText;\n\t}\n\n\t/**\n\t * Decodes percent-encoded characters from the given `anchorText`, in \n\t * preparation for the text to be displayed.\n\t *\n\t * @private\n\t * @param {String} anchorText The text of the anchor that is being \n\t *   generated, for which to decode any percent-encoded characters.\n\t * @return {String} The `anchorText`, with the percent-encoded characters \n\t *   decoded.\n\t */\n\tprivate removePercentEncoding( anchorText: string ) {\n\t\t// First, convert a few of the known % encodings to the corresponding\n\t\t// HTML entities that could accidentally be interpretted as special\n\t\t// HTML characters\n\t\tconst preProcessedEntityAnchorText = anchorText\n\t\t\t.replace( /%22/gi, '&quot;' ) // \" char\n\t\t\t.replace( /%26/gi, '&amp;' )  // & char\n\t\t\t.replace( /%27/gi, '&#39;')   // ' char\n\t\t\t.replace( /%3C/gi, '&lt;' )   // < char\n\t\t\t.replace( /%3E/gi, '&gt;' );  // > char\n\n\t\ttry {\n\t\t\t// Now attempt to decode the rest of the anchor text\n\t\t\treturn decodeURIComponent( preProcessedEntityAnchorText );\n\t\t} catch( e ) {  // Invalid % escape sequence in the anchor text\n\t\t\treturn preProcessedEntityAnchorText;\n\t\t}\n\t}\n\n}\n\n\nexport interface UrlMatchConfig extends MatchConfig {\n\turl: string;\n\turlMatchType: UrlMatchTypeOptions;\n\tprotocolUrlMatch: boolean;\n\tprotocolRelativeMatch: boolean;\n\tstripPrefix: Required<StripPrefixConfigObj>;\n\tstripTrailingSlash: boolean;\n\tdecodePercentEncoding: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}