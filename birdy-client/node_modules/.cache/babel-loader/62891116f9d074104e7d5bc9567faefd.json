{"ast":null,"code":"/*!\n * React Native Autolink\n *\n * Copyright 2016-2021 Josh Swan\n * Released under the MIT license\n * https://github.com/joshswan/react-native-autolink/blob/master/LICENSE\n */\nexport const IntlPhoneMatcher = {\n  pattern: /\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14}/g,\n  type: 'phone-intl',\n  getLinkUrl: _ref => {\n    let [number] = _ref;\n    return `tel:${number}`;\n  }\n}; // NOTE: These patterns don't support extensions (i.e. \"x\" or \"ext\")\n\nconst patternsByCountry = {\n  // France\n  FR: /(\\+33|0|0033)[1-9]\\d{8}/g,\n  // Poland\n  PL: /(?:(?:(?:\\+|00)?48)|(?:\\(\\+?48\\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-8]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\\d{7}/g,\n  // United Kingdom\n  UK: /(?:(?:\\(?(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?(?:\\(?0\\)?[\\s-]?)?)|(?:\\(?0))(?:(?:\\d{5}\\)?[\\s-]?\\d{4,5})|(?:\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3}))|(?:\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4})|(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}))/g,\n  // United States\n  US: /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})/g\n};\nexport const PhoneMatchersByCountry = Object.entries(patternsByCountry).reduce((matchers, _ref2) => {\n  let [countryCode, pattern] = _ref2;\n  return { ...matchers,\n    [countryCode]: {\n      pattern,\n      type: `phone-${countryCode}`,\n      getLinkUrl: _ref3 => {\n        let [number] = _ref3;\n        return `tel:${number.replace(/[^\\d+]/g, '')}`;\n      }\n    }\n  };\n}, {});","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/node_modules/react-native-autolink/dist/matchers/phone.js"],"names":["IntlPhoneMatcher","pattern","type","getLinkUrl","number","patternsByCountry","FR","PL","UK","US","PhoneMatchersByCountry","Object","entries","reduce","matchers","countryCode","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,gBAAgB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,4JADmB;AAE5BC,EAAAA,IAAI,EAAE,YAFsB;AAG5BC,EAAAA,UAAU,EAAE;AAAA,QAAC,CAACC,MAAD,CAAD;AAAA,WAAe,OAAMA,MAAO,EAA5B;AAAA;AAHgB,CAAzB,C,CAKP;;AACA,MAAMC,iBAAiB,GAAG;AACtB;AACAC,EAAAA,EAAE,EAAE,0BAFkB;AAGtB;AACAC,EAAAA,EAAE,EAAE,+GAJkB;AAKtB;AACAC,EAAAA,EAAE,EAAE,kOANkB;AAOtB;AACAC,EAAAA,EAAE,EAAE;AARkB,CAA1B;AAUA,OAAO,MAAMC,sBAAsB,GAAGC,MAAM,CAACC,OAAP,CAAeP,iBAAf,EAAkCQ,MAAlC,CAAyC,CAACC,QAAD;AAAA,MAAW,CAACC,WAAD,EAAcd,OAAd,CAAX;AAAA,SAAuC,EAClH,GAAGa,QAD+G;AAElH,KAACC,WAAD,GAAe;AACXd,MAAAA,OADW;AAEXC,MAAAA,IAAI,EAAG,SAAQa,WAAY,EAFhB;AAGXZ,MAAAA,UAAU,EAAE;AAAA,YAAC,CAACC,MAAD,CAAD;AAAA,eAAe,OAAMA,MAAM,CAACY,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAA8B,EAAnD;AAAA;AAHD;AAFmG,GAAvC;AAAA,CAAzC,EAOlC,EAPkC,CAA/B","sourcesContent":["/*!\n * React Native Autolink\n *\n * Copyright 2016-2021 Josh Swan\n * Released under the MIT license\n * https://github.com/joshswan/react-native-autolink/blob/master/LICENSE\n */\nexport const IntlPhoneMatcher = {\n    pattern: /\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14}/g,\n    type: 'phone-intl',\n    getLinkUrl: ([number]) => `tel:${number}`,\n};\n// NOTE: These patterns don't support extensions (i.e. \"x\" or \"ext\")\nconst patternsByCountry = {\n    // France\n    FR: /(\\+33|0|0033)[1-9]\\d{8}/g,\n    // Poland\n    PL: /(?:(?:(?:\\+|00)?48)|(?:\\(\\+?48\\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-8]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\\d{7}/g,\n    // United Kingdom\n    UK: /(?:(?:\\(?(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?(?:\\(?0\\)?[\\s-]?)?)|(?:\\(?0))(?:(?:\\d{5}\\)?[\\s-]?\\d{4,5})|(?:\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3}))|(?:\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4})|(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}))/g,\n    // United States\n    US: /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})/g,\n};\nexport const PhoneMatchersByCountry = Object.entries(patternsByCountry).reduce((matchers, [countryCode, pattern]) => ({\n    ...matchers,\n    [countryCode]: {\n        pattern,\n        type: `phone-${countryCode}`,\n        getLinkUrl: ([number]) => `tel:${number.replace(/[^\\d+]/g, '')}`,\n    },\n}), {});\n"]},"metadata":{},"sourceType":"module"}