{"ast":null,"code":"var _jsxFileName = \"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/NewTweet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"../../stylesheets/components/tweet.css\";\nimport \"../../stylesheets/components/newTweet.css\";\nimport \"../../stylesheets/form.css\";\nimport DEFAULT_PP from \"../../images/icons/outline_account_circle_white_36dp_2x.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewTweet(props) {\n  _s();\n\n  const initTweetContent = {\n    content: \"\",\n    image: \"\",\n    imageDom: \"\",\n    gifDom: \"\"\n  };\n  const [tweetContent, setTweetContent] = useState(initTweetContent);\n  const [error, setError] = useState(true);\n\n  const handlePostTweet = async event => {\n    //console.log(\"handlePostTweet\");\n    event.preventDefault(); //console.log(tweetContent);\n\n    if (!error) {\n      //on recupere l'id de l'auteur\n      let userId = '';\n      await axios.get(`/api/user/getUserId/${props.user['username']}`).then(res => {\n        userId = res.data;\n      });\n      const formData = {\n        author: `${userId}`,\n        content: tweetContent['content'],\n        image: tweetContent['image']\n      };\n      let newTweetId = ''; //on recupere l'id du tweet\n\n      await axios.post(\"/apiTweet/tweet/newTweet\", formData).then(res => {\n        newTweetId = res.data.id;\n      }); //await props.user.createTweet(tweetContent.content, tweetContent.image);\n      //console.log('newTweetId: ', newTweetId);\n\n      clearNewTweet();\n      await props.onPost(event, newTweetId);\n    }\n  };\n\n  function resetError() {\n    setError(prev => {\n      if (tweetContent.content !== \"\" || tweetContent.image !== \"\") {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  function removeError() {\n    setError(false);\n  }\n\n  function handleChange(event) {\n    setTweetContent(prev => {\n      //console.log(\"[\",event.target.name,\",\",event.target.value,\"]\");\n      return { ...prev,\n        [event.target.name]: event.target.value\n      };\n    }); //console.log(\"onChange: error?\", error);\n\n    resetError();\n  }\n\n  ;\n\n  function onImageChange(event) {\n    if (event.target.files && event.target.files[0]) {\n      const img = event.target.files[0]; //console.log(img);\n      //console.log(URL.createObjectURL(img));\n\n      setTweetContent(prev => {\n        return { ...prev,\n          image: URL.createObjectURL(img)\n        };\n      });\n    } //console.log(\"onImage: error?\", error);\n\n\n    removeError();\n  }\n\n  function clearNewTweet() {\n    setTweetContent(prev => {\n      return initTweetContent;\n    });\n    setError(prev => true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"new-tweet\",\n    className: \"tweet new-tweet\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side-tweet\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: props.user['profilePicture'] !== \"\" ? props.user['profilePicture'] : DEFAULT_PP,\n        alt: \"profile picture\",\n        height: \"70\",\n        width: \"70\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-tweet-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"tweet-header\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"color-light-pink bold huge-font\",\n          children: props.user['username']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tweet-content\",\n          children: [tweetContent.image !== \"\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"tweet-image\",\n            src: tweetContent.image,\n            width: \"250px\",\n            alt: \"not found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 53\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"new-tweet-text\",\n            placeholder: \"What's happening ?\",\n            required: true,\n            maxLength: \"140\",\n            rows: \"2\",\n            name: \"content\",\n            onChange: handleChange,\n            value: tweetContent.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n          className: \"tweet-footer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-tweet-icons\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"small-font new-tweet-button pointer\",\n              htmlFor: \"imageFile\",\n              children: \"Img\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              name: \"imageDom\",\n              id: \"imageFile\",\n              className: \"display-none\",\n              accept: \"image/png\",\n              onChange: event => {\n                handleChange(event);\n                onImageChange(event);\n              },\n              value: tweetContent.imageDom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"small-font new-tweet-button pointer\",\n              htmlFor: \"gifFile\",\n              children: \"Gif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              name: \"gifDom\",\n              id: \"gifFile\",\n              className: \"display-none\",\n              accept: \"image/gif\",\n              onChange: event => {\n                handleChange(event);\n                onImageChange(event);\n              },\n              value: tweetContent.gifDom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"small-font new-tweet-button pointer\",\n            onClick: event => handlePostTweet(event),\n            type: \"button\",\n            value: \"Tweet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NewTweet, \"1EMz2DA04ASFHWcyMmFctPnOSBk=\");\n\n_c = NewTweet;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTweet\");","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/NewTweet.js"],"names":["React","useState","axios","DEFAULT_PP","NewTweet","props","initTweetContent","content","image","imageDom","gifDom","tweetContent","setTweetContent","error","setError","handlePostTweet","event","preventDefault","userId","get","user","then","res","data","formData","author","newTweetId","post","id","clearNewTweet","onPost","resetError","prev","removeError","handleChange","target","name","value","onImageChange","files","img","URL","createObjectURL"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nimport \"../../stylesheets/components/tweet.css\";\nimport \"../../stylesheets/components/newTweet.css\";\nimport \"../../stylesheets/form.css\";\n\nimport DEFAULT_PP from \"../../images/icons/outline_account_circle_white_36dp_2x.png\";\n\nexport default function NewTweet(props){\n\n    const initTweetContent = {content:\"\", image:\"\", imageDom:\"\", gifDom:\"\"}\n    const [tweetContent, setTweetContent] = useState(initTweetContent);\n\n    const [error, setError] = useState(true);\n\n    const handlePostTweet = async (event) => {\n        //console.log(\"handlePostTweet\");\n        event.preventDefault();\n        //console.log(tweetContent);\n        if(!error){\n            //on recupere l'id de l'auteur\n            let userId = '';\n            await axios\n                .get(`/api/user/getUserId/${props.user['username']}`)\n                .then( (res) => { userId = res.data; });\n\n            const formData = {\n                author: `${userId}`,\n                content: tweetContent['content'],\n                image: tweetContent['image']\n            }\n\n            let newTweetId = '';\n            //on recupere l'id du tweet\n            await axios\n                .post(\"/apiTweet/tweet/newTweet\", formData)\n                .then( (res) => { newTweetId = res.data.id; });\n\n            //await props.user.createTweet(tweetContent.content, tweetContent.image);\n            //console.log('newTweetId: ', newTweetId);\n            clearNewTweet();\n            await props.onPost(event, newTweetId);\n        }\n    }\n\n    function resetError(){\n        setError(prev => {\n            if(tweetContent.content!==\"\" || tweetContent.image!==\"\"){\n                return false;\n            }\n            return true;\n        });\n    }\n\n    function removeError(){\n        setError(false);\n    }\n\n    function handleChange(event){\n        setTweetContent( prev => {\n            //console.log(\"[\",event.target.name,\",\",event.target.value,\"]\");\n            return {\n                ...prev,\n                [event.target.name]: event.target.value\n            };\n        });\n        //console.log(\"onChange: error?\", error);\n        resetError();\n    };\n\n    function onImageChange(event){\n        if(event.target.files && event.target.files[0]){\n            const img = event.target.files[0];\n            //console.log(img);\n            //console.log(URL.createObjectURL(img));\n            setTweetContent( prev => {\n                return {\n                    ...prev,\n                    image: URL.createObjectURL(img)\n                };\n            });\n        }\n        //console.log(\"onImage: error?\", error);\n        removeError();\n    }\n\n    function clearNewTweet(){\n        setTweetContent(prev => {return initTweetContent;});\n        setError(prev => true);\n    }\n\n    return(\n        <div id=\"new-tweet\" className=\"tweet new-tweet\">\n            <div className=\"left-side-tweet\">\n            <img src={props.user['profilePicture']!==\"\" ? props.user['profilePicture'] : DEFAULT_PP}\n                    alt=\"profile picture\"\n                    height=\"70\" width=\"70\"\n                />\n            </div>\n            <div className=\"new-tweet-container\">\n                <header className=\"tweet-header\">\n                    <span className=\"color-light-pink bold huge-font\">\n                        {props.user['username']}\n                    </span>\n                </header>\n                <form>\n                    <div className=\"tweet-content\">\n                        {tweetContent.image!==\"\" && <img className=\"tweet-image\" src={tweetContent.image} width={\"250px\"} alt=\"not found\"/>}\n                        <textarea className=\"new-tweet-text\" \n                            placeholder=\"What's happening ?\" required \n                            maxLength=\"140\" rows=\"2\"\n                            name=\"content\"\n                            onChange={handleChange}\n                            value={tweetContent.content}\n                        />\n                    </div>\n                    <footer className=\"tweet-footer\">\n                        <div className=\"new-tweet-icons\">\n                            <label className=\"small-font new-tweet-button pointer\" htmlFor=\"imageFile\">Img</label>\n                            <input \n                                type=\"file\" name=\"imageDom\" id=\"imageFile\" \n                                className=\"display-none\" \n                                accept=\"image/png\"\n                                onChange={(event) => {handleChange(event); onImageChange(event);}}\n                                value={tweetContent.imageDom}\n                            />\n                            <label className=\"small-font new-tweet-button pointer\" htmlFor=\"gifFile\">Gif</label>\n                            <input \n                                type=\"file\" name=\"gifDom\" id=\"gifFile\" \n                                className=\"display-none\" \n                                accept=\"image/gif\"\n                                onChange={(event) => {handleChange(event); onImageChange(event);}}\n                                value={tweetContent.gifDom}\n                            />\n                        </div>\n                        <input className=\"small-font new-tweet-button pointer\" onClick={ (event) => handlePostTweet(event) } type=\"button\" value=\"Tweet\"/>\n                    </footer>\n                </form>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}