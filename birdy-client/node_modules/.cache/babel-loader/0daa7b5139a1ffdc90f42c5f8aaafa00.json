{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { letterRe, digitRe, whitespaceRe, quoteRe, controlCharsRe } from '../regex-lib';\nimport { throwUnhandledCaseError } from '../utils'; // For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n\n/**\n * Parses an HTML string, calling the callbacks to notify of tags and text.\n *\n * ## History\n *\n * This file previously used a regular expression to find html tags in the input\n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\n * with certain input text, causing Autolinker to either hang or just take a\n * really long time to parse the string.\n *\n * The current code is intended to be a O(n) algorithm that walks through\n * the string in one pass, and tries to be as cheap as possible. We don't need\n * to implement the full HTML spec, but rather simply determine where the string\n * looks like an HTML tag, and where it looks like text (so that we can autolink\n * that).\n *\n * This state machine parser is intended just to be a simple but performant\n * parser of HTML for the subset of requirements we have. We simply need to:\n *\n * 1. Determine where HTML tags are\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n *    <script>, and <style> tags, so as not to link any text within them)\n *\n * We don't need to:\n *\n * 1. Create a parse tree\n * 2. Auto-close tags with invalid markup\n * 3. etc.\n *\n * The other intention behind this is that we didn't want to add external\n * dependencies on the Autolinker utility which would increase its size. For\n * instance, adding htmlparser2 adds 125kb to the minified output file,\n * increasing its final size from 47kb to 172kb (at the time of writing). It\n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n * as an HTML tag.\n *\n * Reference for HTML spec:\n *\n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n *\n * @param {String} html The HTML to parse\n * @param {Object} callbacks\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\n *   tag is parsed. Called with the tagName as its argument.\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n * @param {Function} callbacks.onText Callback function to call when text (i.e\n *   not an HTML tag) is parsed. Called with the text (string) as its first\n *   argument, and offset (number) into the string as its second.\n */\n\nexport function parseHtml(html, _a) {\n  var onOpenTag = _a.onOpenTag,\n      onCloseTag = _a.onCloseTag,\n      onText = _a.onText,\n      onComment = _a.onComment,\n      onDoctype = _a.onDoctype;\n  var noCurrentTag = new CurrentTag();\n  var charIdx = 0,\n      len = html.length,\n      state = 0\n  /* Data */\n  ,\n      currentDataIdx = 0,\n      // where the current data start index is\n  currentTag = noCurrentTag; // describes the current tag that is being read\n  // For debugging: search for other \"For debugging\" lines\n  // const table = new CliTable( {\n  // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n  // } );\n\n  while (charIdx < len) {\n    var char = html.charAt(charIdx); // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push( \n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n    // );\n\n    switch (state) {\n      case 0\n      /* Data */\n      :\n        stateData(char);\n        break;\n\n      case 1\n      /* TagOpen */\n      :\n        stateTagOpen(char);\n        break;\n\n      case 2\n      /* EndTagOpen */\n      :\n        stateEndTagOpen(char);\n        break;\n\n      case 3\n      /* TagName */\n      :\n        stateTagName(char);\n        break;\n\n      case 4\n      /* BeforeAttributeName */\n      :\n        stateBeforeAttributeName(char);\n        break;\n\n      case 5\n      /* AttributeName */\n      :\n        stateAttributeName(char);\n        break;\n\n      case 6\n      /* AfterAttributeName */\n      :\n        stateAfterAttributeName(char);\n        break;\n\n      case 7\n      /* BeforeAttributeValue */\n      :\n        stateBeforeAttributeValue(char);\n        break;\n\n      case 8\n      /* AttributeValueDoubleQuoted */\n      :\n        stateAttributeValueDoubleQuoted(char);\n        break;\n\n      case 9\n      /* AttributeValueSingleQuoted */\n      :\n        stateAttributeValueSingleQuoted(char);\n        break;\n\n      case 10\n      /* AttributeValueUnquoted */\n      :\n        stateAttributeValueUnquoted(char);\n        break;\n\n      case 11\n      /* AfterAttributeValueQuoted */\n      :\n        stateAfterAttributeValueQuoted(char);\n        break;\n\n      case 12\n      /* SelfClosingStartTag */\n      :\n        stateSelfClosingStartTag(char);\n        break;\n\n      case 13\n      /* MarkupDeclarationOpenState */\n      :\n        stateMarkupDeclarationOpen(char);\n        break;\n\n      case 14\n      /* CommentStart */\n      :\n        stateCommentStart(char);\n        break;\n\n      case 15\n      /* CommentStartDash */\n      :\n        stateCommentStartDash(char);\n        break;\n\n      case 16\n      /* Comment */\n      :\n        stateComment(char);\n        break;\n\n      case 17\n      /* CommentEndDash */\n      :\n        stateCommentEndDash(char);\n        break;\n\n      case 18\n      /* CommentEnd */\n      :\n        stateCommentEnd(char);\n        break;\n\n      case 19\n      /* CommentEndBang */\n      :\n        stateCommentEndBang(char);\n        break;\n\n      case 20\n      /* Doctype */\n      :\n        stateDoctype(char);\n        break;\n\n      default:\n        throwUnhandledCaseError(state);\n    } // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push( \n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n    // );\n\n\n    charIdx++;\n  }\n\n  if (currentDataIdx < charIdx) {\n    emitText();\n  } // For debugging: search for other \"For debugging\" lines\n  // console.log( '\\n' + table.toString() );\n  // Called when non-tags are being read (i.e. the text around HTML â€ ags)\n  // https://www.w3.org/TR/html51/syntax.html#data-state\n\n\n  function stateData(char) {\n    if (char === '<') {\n      startNewTag();\n    }\n  } // Called after a '<' is read from the Data state\n  // https://www.w3.org/TR/html51/syntax.html#tag-open-state\n\n\n  function stateTagOpen(char) {\n    if (char === '!') {\n      state = 13\n      /* MarkupDeclarationOpenState */\n      ;\n    } else if (char === '/') {\n      state = 2\n      /* EndTagOpen */\n      ;\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isClosing: true\n      }));\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (letterRe.test(char)) {\n      // tag name start (and no '/' read)\n      state = 3\n      /* TagName */\n      ;\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isOpening: true\n      }));\n    } else {\n      // Any other \n      state = 0\n      /* Data */\n      ;\n      currentTag = noCurrentTag;\n    }\n  } // After a '<x', '</x' sequence is read (where 'x' is a letter character), \n  // this is to continue reading the tag name\n  // https://www.w3.org/TR/html51/syntax.html#tag-name-state\n\n\n  function stateTagName(char) {\n    if (whitespaceRe.test(char)) {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === '/') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '>') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        name: captureTagName()\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (!letterRe.test(char) && !digitRe.test(char) && char !== ':') {\n      // Anything else that does not form an html tag. Note: the colon \n      // character is accepted for XML namespaced tags\n      resetToDataState();\n    } else {// continue reading tag name\n    }\n  } // Called after the '/' is read from a '</' sequence\n  // https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n\n\n  function stateEndTagOpen(char) {\n    if (char === '>') {\n      // parse error. Encountered \"</>\". Skip it without treating as a tag\n      resetToDataState();\n    } else if (letterRe.test(char)) {\n      state = 3\n      /* TagName */\n      ;\n    } else {\n      // some other non-tag-like character, don't treat this as a tag\n      resetToDataState();\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n\n\n  function stateBeforeAttributeName(char) {\n    if (whitespaceRe.test(char)) {// stay in BeforeAttributeName state - continue reading chars\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === \"=\" || quoteRe.test(char) || controlCharsRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other char, start of a new attribute name\n      state = 5\n      /* AttributeName */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n\n\n  function stateAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      state = 6\n      /* AfterAttributeName */\n      ;\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '=') {\n      state = 7\n      /* BeforeAttributeValue */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {// anything else: continue reading attribute name\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n\n\n  function stateAfterAttributeName(char) {\n    if (whitespaceRe.test(char)) {// ignore the character - continue reading\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '=') {\n      state = 7\n      /* BeforeAttributeValue */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other character, start a new attribute in the current tag\n      state = 5\n      /* AttributeName */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n\n\n  function stateBeforeAttributeValue(char) {\n    if (whitespaceRe.test(char)) {// ignore the character - continue reading\n    } else if (char === \"\\\"\") {\n      state = 8\n      /* AttributeValueDoubleQuoted */\n      ;\n    } else if (char === \"'\") {\n      state = 9\n      /* AttributeValueSingleQuoted */\n      ;\n    } else if (/[>=`]/.test(char)) {\n      // Invalid chars after an '=' for an attribute value, don't count \n      // the current tag as an HTML tag\n      resetToDataState();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, consider it an unquoted attribute value\n      state = 10\n      /* AttributeValueUnquoted */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n\n\n  function stateAttributeValueDoubleQuoted(char) {\n    if (char === \"\\\"\") {\n      // end the current double-quoted attribute\n      state = 11\n      /* AfterAttributeValueQuoted */\n      ;\n    } else {// consume the character as part of the double-quoted attribute value\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n\n\n  function stateAttributeValueSingleQuoted(char) {\n    if (char === \"'\") {\n      // end the current single-quoted attribute\n      state = 11\n      /* AfterAttributeValueQuoted */\n      ;\n    } else {// consume the character as part of the double-quoted attribute value\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n\n\n  function stateAttributeValueUnquoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {// Any other character, treat it as part of the attribute value\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n\n\n  function stateAfterAttributeValueQuoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    } else if (char === '/') {\n      state = 12\n      /* SelfClosingStartTag */\n      ;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, \"parse error\". Spec says to switch to the\n      // BeforeAttributeState and re-consume the character, as it may be\n      // the start of a new attribute name\n      state = 4\n      /* BeforeAttributeName */\n      ;\n      reconsumeCurrentCharacter();\n    }\n  } // A '/' has just been read in the current tag (presumably for '/>'), and \n  // this handles the next character\n  // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n\n\n  function stateSelfClosingStartTag(char) {\n    if (char === '>') {\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        isClosing: true\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else {\n      state = 4\n      /* BeforeAttributeName */\n      ;\n    }\n  } // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n  // (HTML Comments or !DOCTYPE)\n\n\n  function stateMarkupDeclarationOpen(char) {\n    if (html.substr(charIdx, 2) === '--') {\n      // html comment\n      charIdx += 2; // \"consume\" characters\n\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        type: 'comment'\n      }));\n      state = 14\n      /* CommentStart */\n      ;\n    } else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n      charIdx += 7; // \"consume\" characters\n\n      currentTag = new CurrentTag(__assign(__assign({}, currentTag), {\n        type: 'doctype'\n      }));\n      state = 20\n      /* Doctype */\n      ;\n    } else {\n      // At this point, the spec specifies that the state machine should\n      // enter the \"bogus comment\" state, in which case any character(s) \n      // after the '<!' that were read should become an HTML comment up\n      // until the first '>' that is read (or EOF). Instead, we'll assume\n      // that a user just typed '<!' as part of text data\n      resetToDataState();\n    }\n  } // Handles after the sequence '<!--' has been read\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n\n\n  function stateCommentStart(char) {\n    if (char === '-') {\n      // We've read the sequence '<!---' at this point (3 dashes)\n      state = 15\n      /* CommentStartDash */\n      ;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence \n      // '<!-->'\n      resetToDataState();\n    } else {\n      // Any other char, take it as part of the comment\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // We've read the sequence '<!---' at this point (3 dashes)\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n\n\n  function stateCommentStartDash(char) {\n    if (char === '-') {\n      // We've read '<!----' (4 dashes) at this point\n      state = 18\n      /* CommentEnd */\n      ;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence \n      // '<!--->'\n      resetToDataState();\n    } else {\n      // Anything else, take it as a valid comment\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // Currently reading the comment's text (data)\n  // https://www.w3.org/TR/html51/syntax.html#comment-state\n\n\n  function stateComment(char) {\n    if (char === '-') {\n      state = 17\n      /* CommentEndDash */\n      ;\n    } else {// Any other character, stay in the Comment state\n    }\n  } // When we we've read the first dash inside a comment, it may signal the\n  // end of the comment if we read another dash\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n\n\n  function stateCommentEndDash(char) {\n    if (char === '-') {\n      state = 18\n      /* CommentEnd */\n      ;\n    } else {\n      // Wasn't a dash, must still be part of the comment\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // After we've read two dashes inside a comment, it may signal the end of \n  // the comment if we then read a '>' char\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n\n\n  function stateCommentEnd(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '!') {\n      state = 19\n      /* CommentEndBang */\n      ;\n    } else if (char === '-') {// A 3rd '-' has been read: stay in the CommentEnd state\n    } else {\n      // Anything else, switch back to the comment state since we didn't\n      // read the full \"end comment\" sequence (i.e. '-->')\n      state = 16\n      /* Comment */\n      ;\n    }\n  } // We've read the sequence '--!' inside of a comment\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n\n\n  function stateCommentEndBang(char) {\n    if (char === '-') {\n      // We read the sequence '--!-' inside of a comment. The last dash\n      // could signify that the comment is going to close\n      state = 17\n      /* CommentEndDash */\n      ;\n    } else if (char === '>') {\n      // End of comment with the sequence '--!>'\n      emitTagAndPreviousTextNode();\n    } else {\n      // The '--!' was not followed by a '>', continue reading the \n      // comment's text\n      state = 16\n      /* Comment */\n      ;\n    }\n  }\n  /**\n   * For DOCTYPES in particular, we don't care about the attributes. Just\n   * advance to the '>' character and emit the tag, unless we find a '<'\n   * character in which case we'll start a new tag.\n   *\n   * Example doctype tag:\n   *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n   *\n   * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n   */\n\n\n  function stateDoctype(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      startNewTag();\n    } else {// stay in the Doctype state\n    }\n  }\n  /**\n   * Resets the state back to the Data state, and removes the current tag.\n   *\n   * We'll generally run this function whenever a \"parse error\" is\n   * encountered, where the current tag that is being read no longer looks\n   * like a real HTML tag.\n   */\n\n\n  function resetToDataState() {\n    state = 0\n    /* Data */\n    ;\n    currentTag = noCurrentTag;\n  }\n  /**\n   * Starts a new HTML tag at the current index, ignoring any previous HTML\n   * tag that was being read.\n   *\n   * We'll generally run this function whenever we read a new '<' character,\n   * including when we read a '<' character inside of an HTML tag that we were\n   * previously reading.\n   */\n\n\n  function startNewTag() {\n    state = 1\n    /* TagOpen */\n    ;\n    currentTag = new CurrentTag({\n      idx: charIdx\n    });\n  }\n  /**\n   * Once we've decided to emit an open tag, that means we can also emit the\n   * text node before it.\n   */\n\n\n  function emitTagAndPreviousTextNode() {\n    var textBeforeTag = html.slice(currentDataIdx, currentTag.idx);\n\n    if (textBeforeTag) {\n      // the html tag was the first element in the html string, or two \n      // tags next to each other, in which case we should not emit a text \n      // node\n      onText(textBeforeTag, currentDataIdx);\n    }\n\n    if (currentTag.type === 'comment') {\n      onComment(currentTag.idx);\n    } else if (currentTag.type === 'doctype') {\n      onDoctype(currentTag.idx);\n    } else {\n      if (currentTag.isOpening) {\n        onOpenTag(currentTag.name, currentTag.idx);\n      }\n\n      if (currentTag.isClosing) {\n        // note: self-closing tags will emit both opening and closing\n        onCloseTag(currentTag.name, currentTag.idx);\n      }\n    } // Since we just emitted a tag, reset to the data state for the next char\n\n\n    resetToDataState();\n    currentDataIdx = charIdx + 1;\n  }\n\n  function emitText() {\n    var text = html.slice(currentDataIdx, charIdx);\n    onText(text, currentDataIdx);\n    currentDataIdx = charIdx + 1;\n  }\n  /**\n   * Captures the tag name from the start of the tag to the current character\n   * index, and converts it to lower case\n   */\n\n\n  function captureTagName() {\n    var startIdx = currentTag.idx + (currentTag.isClosing ? 2 : 1);\n    return html.slice(startIdx, charIdx).toLowerCase();\n  }\n  /**\n   * Causes the main loop to re-consume the current character, such as after\n   * encountering a \"parse error\" that changed state and needs to reconsume\n   * the same character in that new state.\n   */\n\n\n  function reconsumeCurrentCharacter() {\n    charIdx--;\n  }\n}\n\nvar CurrentTag =\n/** @class */\nfunction () {\n  function CurrentTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n    this.type = cfg.type || 'tag';\n    this.name = cfg.name || '';\n    this.isOpening = !!cfg.isOpening;\n    this.isClosing = !!cfg.isClosing;\n  }\n\n  return CurrentTag;\n}();","map":{"version":3,"mappings":"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","names":["letterRe","digitRe","whitespaceRe","quoteRe","controlCharsRe","throwUnhandledCaseError","parseHtml","html","_a","onOpenTag","onCloseTag","onText","onComment","onDoctype","noCurrentTag","CurrentTag","charIdx","len","length","state","currentDataIdx","currentTag","char","charAt","stateData","stateTagOpen","stateEndTagOpen","stateTagName","stateBeforeAttributeName","stateAttributeName","stateAfterAttributeName","stateBeforeAttributeValue","stateAttributeValueDoubleQuoted","stateAttributeValueSingleQuoted","stateAttributeValueUnquoted","stateAfterAttributeValueQuoted","stateSelfClosingStartTag","stateMarkupDeclarationOpen","stateCommentStart","stateCommentStartDash","stateComment","stateCommentEndDash","stateCommentEnd","stateCommentEndBang","stateDoctype","emitText","startNewTag","__assign","isClosing","test","isOpening","name","captureTagName","emitTagAndPreviousTextNode","resetToDataState","reconsumeCurrentCharacter","substr","type","toUpperCase","idx","textBeforeTag","slice","text","startIdx","toLowerCase","cfg","undefined"],"sources":["/home/yannis/Documents/Project/Birdy/birdy-client/node_modules/autolinker/dist/es2015/src/htmlParser/parse-html.ts"],"sourcesContent":["import { State } from './state';\nimport { letterRe, digitRe, whitespaceRe, quoteRe, controlCharsRe } from '../regex-lib';\nimport { throwUnhandledCaseError } from '../utils';\n\n// For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n\n/**\n * Parses an HTML string, calling the callbacks to notify of tags and text.\n *\n * ## History\n * \n * This file previously used a regular expression to find html tags in the input \n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues \n * with certain input text, causing Autolinker to either hang or just take a \n * really long time to parse the string.\n *\n * The current code is intended to be a O(n) algorithm that walks through\n * the string in one pass, and tries to be as cheap as possible. We don't need\n * to implement the full HTML spec, but rather simply determine where the string\n * looks like an HTML tag, and where it looks like text (so that we can autolink\n * that).\n * \n * This state machine parser is intended just to be a simple but performant\n * parser of HTML for the subset of requirements we have. We simply need to:\n *\n * 1. Determine where HTML tags are\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n *    <script>, and <style> tags, so as not to link any text within them)\n *\n * We don't need to:\n *\n * 1. Create a parse tree\n * 2. Auto-close tags with invalid markup\n * 3. etc.\n * \n * The other intention behind this is that we didn't want to add external \n * dependencies on the Autolinker utility which would increase its size. For \n * instance, adding htmlparser2 adds 125kb to the minified output file,\n * increasing its final size from 47kb to 172kb (at the time of writing). It \n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n * as an HTML tag.\n * \n * Reference for HTML spec: \n * \n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n *\n * @param {String} html The HTML to parse\n * @param {Object} callbacks\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\n *   tag is parsed. Called with the tagName as its argument.\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n * @param {Function} callbacks.onText Callback function to call when text (i.e\n *   not an HTML tag) is parsed. Called with the text (string) as its first \n *   argument, and offset (number) into the string as its second.\n */\nexport function parseHtml( html: string, { onOpenTag, onCloseTag, onText, onComment, onDoctype }: {\n\tonOpenTag: ( tagName: string, offset: number ) => void;\n\tonCloseTag: ( tagName: string, offset: number ) => void;\n\tonText: ( text: string, offset: number ) => void;\n\tonComment: ( offset: number ) => void;\n\tonDoctype: ( offset: number ) => void;\n} ) {\n\tconst noCurrentTag = new CurrentTag();\n\n\tlet charIdx = 0,\n\t\tlen = html.length,\n\t\tstate = State.Data as State,\n\n\t\tcurrentDataIdx = 0,  // where the current data start index is\n\t\tcurrentTag = noCurrentTag;  // describes the current tag that is being read\n\n\t// For debugging: search for other \"For debugging\" lines\n\t// const table = new CliTable( {\n\t// \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n\t// } );\n\n\twhile( charIdx < len ) {\n\t\tvar char = html.charAt( charIdx );\n\n\t\t// For debugging: search for other \"For debugging\" lines\n\t\t// ALSO: Temporarily remove the 'const' keyword on the State enum\n\t\t// table.push( \n\t\t// \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n\t\t// );\n\t\t\n\t\tswitch( state ) {\n\t\t\tcase State.Data: stateData( char ); break;\n\t\t\tcase State.TagOpen: stateTagOpen( char ); break;\n\t\t\tcase State.EndTagOpen: stateEndTagOpen( char ); break;\n\t\t\tcase State.TagName: stateTagName( char ); break;\n\t\t\tcase State.BeforeAttributeName: stateBeforeAttributeName( char ); break;\n\t\t\tcase State.AttributeName: stateAttributeName( char ); break;\n\t\t\tcase State.AfterAttributeName: stateAfterAttributeName( char ); break;\n\t\t\tcase State.BeforeAttributeValue: stateBeforeAttributeValue( char ); break;\n\t\t\tcase State.AttributeValueDoubleQuoted: stateAttributeValueDoubleQuoted( char ); break;\n\t\t\tcase State.AttributeValueSingleQuoted: stateAttributeValueSingleQuoted( char ); break;\n\t\t\tcase State.AttributeValueUnquoted: stateAttributeValueUnquoted( char ); break;\n\t\t\tcase State.AfterAttributeValueQuoted: stateAfterAttributeValueQuoted( char ); break;\n\t\t\tcase State.SelfClosingStartTag: stateSelfClosingStartTag( char ); break;\n\t\t\tcase State.MarkupDeclarationOpenState: stateMarkupDeclarationOpen( char ); break;\n\t\t\tcase State.CommentStart: stateCommentStart( char ); break;\n\t\t\tcase State.CommentStartDash: stateCommentStartDash( char ); break;\n\t\t\tcase State.Comment: stateComment( char ); break;\n\t\t\tcase State.CommentEndDash: stateCommentEndDash( char ); break;\n\t\t\tcase State.CommentEnd: stateCommentEnd( char ); break;\n\t\t\tcase State.CommentEndBang: stateCommentEndBang( char ); break;\n\t\t\tcase State.Doctype: stateDoctype( char ); break;\n\n\t\t\tdefault: \n\t\t\t\tthrowUnhandledCaseError( state );\n\t\t}\n\n\t\t// For debugging: search for other \"For debugging\" lines\n\t\t// ALSO: Temporarily remove the 'const' keyword on the State enum\n\t\t// table.push( \n\t\t// \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n\t\t// );\n\n\t\tcharIdx++;\n\t}\n\n\tif( currentDataIdx < charIdx ) {\n\t\temitText();\n\t}\n\n\t// For debugging: search for other \"For debugging\" lines\n\t// console.log( '\\n' + table.toString() );\n\n\n\n\t// Called when non-tags are being read (i.e. the text around HTML â€ ags)\n\t// https://www.w3.org/TR/html51/syntax.html#data-state\n\tfunction stateData( char: string ) {\n\t\tif( char === '<' ) {\n\t\t\tstartNewTag();\n\t\t}\n\t}\n\n\t// Called after a '<' is read from the Data state\n\t// https://www.w3.org/TR/html51/syntax.html#tag-open-state\n\tfunction stateTagOpen( char: string ) {\n\t\tif( char === '!' ) {\n\t\t\tstate = State.MarkupDeclarationOpenState;\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.EndTagOpen;\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, isClosing: true } );\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( letterRe.test( char ) ) {\n\t\t\t// tag name start (and no '/' read)\n\t\t\tstate = State.TagName;\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, isOpening: true } );\n\n\t\t} else {\n\t\t\t// Any other \n\t\t\tstate = State.Data;\n\t\t\tcurrentTag = noCurrentTag;\n\t\t}\n\t}\n\n\t// After a '<x', '</x' sequence is read (where 'x' is a letter character), \n\t// this is to continue reading the tag name\n\t// https://www.w3.org/TR/html51/syntax.html#tag-name-state\n\tfunction stateTagName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, name: captureTagName() } );\n\t\t\tstate = State.BeforeAttributeName;\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( char === '/' ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, name: captureTagName() } );\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '>' ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, name: captureTagName() } );\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\n\t\t} else if( !letterRe.test( char ) && !digitRe.test( char ) && char !== ':' ) {\n\t\t\t// Anything else that does not form an html tag. Note: the colon \n\t\t\t// character is accepted for XML namespaced tags\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// continue reading tag name\n\t\t}\n\t}\n\n\t// Called after the '/' is read from a '</' sequence\n\t// https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n\tfunction stateEndTagOpen( char: string ) {\n\t\tif( char === '>' ) {  // parse error. Encountered \"</>\". Skip it without treating as a tag\n\t\t\tresetToDataState();\n\t\t} else if( letterRe.test( char ) ) {\n\t\t\tstate = State.TagName;\n\t\t} else {\n\t\t\t// some other non-tag-like character, don't treat this as a tag\n\t\t\tresetToDataState();\n\t\t}\n\t}\n\t\n\n\t// https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n\tfunction stateBeforeAttributeName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\t// stay in BeforeAttributeName state - continue reading chars\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( char === `=` || quoteRe.test( char ) || controlCharsRe.test( char ) ) {\n\t\t\t// \"Parse error\" characters that, according to the spec, should be\n\t\t\t// appended to the attribute name, but we'll treat these characters\n\t\t\t// as not forming a real HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Any other char, start of a new attribute name\n\t\t\tstate = State.AttributeName;\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n\tfunction stateAttributeName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tstate = State.AfterAttributeName;\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '=' ) {\n\t\t\tstate = State.BeforeAttributeValue;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( quoteRe.test( char ) ) {\n\t\t\t// \"Parse error\" characters that, according to the spec, should be\n\t\t\t// appended to the attribute name, but we'll treat these characters\n\t\t\t// as not forming a real HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// anything else: continue reading attribute name\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n\tfunction stateAfterAttributeName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\t// ignore the character - continue reading\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '=' ) {\n\t\t\tstate = State.BeforeAttributeValue;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( quoteRe.test( char ) ) {\n\t\t\t// \"Parse error\" characters that, according to the spec, should be\n\t\t\t// appended to the attribute name, but we'll treat these characters\n\t\t\t// as not forming a real HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Any other character, start a new attribute in the current tag\n\t\t\tstate = State.AttributeName;\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n\tfunction stateBeforeAttributeValue( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\t// ignore the character - continue reading\n\n\t\t} else if( char === `\"` ) {\n\t\t\tstate = State.AttributeValueDoubleQuoted;\n\n\t\t} else if( char === `'` ) {\n\t\t\tstate = State.AttributeValueSingleQuoted;\n\n\t\t} else if( /[>=`]/.test( char ) ) {\n\t\t\t// Invalid chars after an '=' for an attribute value, don't count \n\t\t\t// the current tag as an HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// Any other character, consider it an unquoted attribute value\n\t\t\tstate = State.AttributeValueUnquoted;\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n\tfunction stateAttributeValueDoubleQuoted( char: string ) {\n\t\tif( char === `\"` ) {  // end the current double-quoted attribute\n\t\t\tstate = State.AfterAttributeValueQuoted;\n\n\t\t} else {\n\t\t\t// consume the character as part of the double-quoted attribute value\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n\tfunction stateAttributeValueSingleQuoted( char: string ) {\n\t\tif( char === `'` ) {  // end the current single-quoted attribute\n\t\t\tstate = State.AfterAttributeValueQuoted;\n\n\t\t} else {\n\t\t\t// consume the character as part of the double-quoted attribute value\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n\tfunction stateAttributeValueUnquoted( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tstate = State.BeforeAttributeName;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// Any other character, treat it as part of the attribute value\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n\tfunction stateAfterAttributeValueQuoted( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tstate = State.BeforeAttributeName;\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// Any other character, \"parse error\". Spec says to switch to the\n\t\t\t// BeforeAttributeState and re-consume the character, as it may be\n\t\t\t// the start of a new attribute name\n\t\t\tstate = State.BeforeAttributeName;\n\t\t\treconsumeCurrentCharacter();\n\t\t}\n\t}\n\n\n\t// A '/' has just been read in the current tag (presumably for '/>'), and \n\t// this handles the next character\n\t// https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n\tfunction stateSelfClosingStartTag( char: string ) {\n\t\tif( char === '>' ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, isClosing: true } );\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\t\t\t\n\t\t} else {\n\t\t\tstate = State.BeforeAttributeName;\n\t\t}\n\t}\n\n\t// https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n\t// (HTML Comments or !DOCTYPE)\n\tfunction stateMarkupDeclarationOpen( char: string ) {\n\t\tif( html.substr( charIdx, 2 ) === '--' ) {  // html comment\n\t\t\tcharIdx += 2;  // \"consume\" characters\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, type: 'comment' } );\n\t\t\tstate = State.CommentStart;\n\n\t\t} else if( html.substr( charIdx, 7 ).toUpperCase() === 'DOCTYPE' ) {\n\t\t\tcharIdx += 7;  // \"consume\" characters\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, type: 'doctype' } );\n\t\t\tstate = State.Doctype;\n\n\t\t} else {\n\t\t\t// At this point, the spec specifies that the state machine should\n\t\t\t// enter the \"bogus comment\" state, in which case any character(s) \n\t\t\t// after the '<!' that were read should become an HTML comment up\n\t\t\t// until the first '>' that is read (or EOF). Instead, we'll assume\n\t\t\t// that a user just typed '<!' as part of text data\n\t\t\tresetToDataState();\n\t\t}\n\t}\n\n\n\t// Handles after the sequence '<!--' has been read\n\t// https://www.w3.org/TR/html51/syntax.html#comment-start-state\n\tfunction stateCommentStart( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\t// We've read the sequence '<!---' at this point (3 dashes)\n\t\t\tstate = State.CommentStartDash;\n\n\t\t} else if( char === '>' ) {\n\t\t\t// At this point, we'll assume the comment wasn't a real comment\n\t\t\t// so we'll just emit it as data. We basically read the sequence \n\t\t\t// '<!-->'\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Any other char, take it as part of the comment\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\n\t// We've read the sequence '<!---' at this point (3 dashes)\n\t// https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n\tfunction stateCommentStartDash( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\t// We've read '<!----' (4 dashes) at this point\n\t\t\tstate = State.CommentEnd;\n\t\t\n\t\t} else if( char === '>' ) {\n\t\t\t// At this point, we'll assume the comment wasn't a real comment\n\t\t\t// so we'll just emit it as data. We basically read the sequence \n\t\t\t// '<!--->'\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Anything else, take it as a valid comment\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\t// Currently reading the comment's text (data)\n\t// https://www.w3.org/TR/html51/syntax.html#comment-state\n\tfunction stateComment( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\tstate = State.CommentEndDash;\n\t\t} else {\n\t\t\t// Any other character, stay in the Comment state\n\t\t}\n\t}\n\n\t// When we we've read the first dash inside a comment, it may signal the\n\t// end of the comment if we read another dash\n\t// https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n\tfunction stateCommentEndDash( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\tstate = State.CommentEnd;\n\t\t} else {\n\t\t\t// Wasn't a dash, must still be part of the comment\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\n\t// After we've read two dashes inside a comment, it may signal the end of \n\t// the comment if we then read a '>' char\n\t// https://www.w3.org/TR/html51/syntax.html#comment-end-state\n\tfunction stateCommentEnd( char: string ) {\n\t\tif( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '!' ) {\n\t\t\tstate = State.CommentEndBang;\n\n\t\t} else if( char === '-' ) {\n\t\t\t// A 3rd '-' has been read: stay in the CommentEnd state\n\n\t\t} else {\n\t\t\t// Anything else, switch back to the comment state since we didn't\n\t\t\t// read the full \"end comment\" sequence (i.e. '-->')\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\t// We've read the sequence '--!' inside of a comment\n\t// https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n\tfunction stateCommentEndBang( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\t// We read the sequence '--!-' inside of a comment. The last dash\n\t\t\t// could signify that the comment is going to close\n\t\t\tstate = State.CommentEndDash;\n\n\t\t} else if( char === '>' ) {\n\t\t\t// End of comment with the sequence '--!>'\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else {\n\t\t\t// The '--!' was not followed by a '>', continue reading the \n\t\t\t// comment's text\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\n\t/**\n\t * For DOCTYPES in particular, we don't care about the attributes. Just \n\t * advance to the '>' character and emit the tag, unless we find a '<' \n\t * character in which case we'll start a new tag.\n\t * \n\t * Example doctype tag:\n\t *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> \n\t * \n\t * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n\t */\n\tfunction stateDoctype( char: string ) {\n\t\tif( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// stay in the Doctype state\n\t\t}\n\t}\n\n\n\t/**\n\t * Resets the state back to the Data state, and removes the current tag.\n\t * \n\t * We'll generally run this function whenever a \"parse error\" is \n\t * encountered, where the current tag that is being read no longer looks \n\t * like a real HTML tag.\n\t */\n\tfunction resetToDataState() {\n\t\tstate = State.Data;\n\t\tcurrentTag = noCurrentTag;\n\t}\n\n\n\t/**\n\t * Starts a new HTML tag at the current index, ignoring any previous HTML\n\t * tag that was being read.\n\t * \n\t * We'll generally run this function whenever we read a new '<' character,\n\t * including when we read a '<' character inside of an HTML tag that we were\n\t * previously reading.\n\t */\n\tfunction startNewTag() {\n\t\tstate = State.TagOpen;\n\t\tcurrentTag = new CurrentTag( { idx: charIdx } );\n\t}\n\n\t/**\n\t * Once we've decided to emit an open tag, that means we can also emit the\n\t * text node before it.\n\t */\n\tfunction emitTagAndPreviousTextNode() {\n\t\tconst textBeforeTag = html.slice( currentDataIdx, currentTag.idx );\n\t\tif( textBeforeTag ) {\n\t\t\t// the html tag was the first element in the html string, or two \n\t\t\t// tags next to each other, in which case we should not emit a text \n\t\t\t// node\n\t\t\tonText( textBeforeTag, currentDataIdx );\n\t\t}\n\n\t\tif( currentTag.type === 'comment' ) {\n\t\t\tonComment( currentTag.idx );\n\n\t\t} else if( currentTag.type === 'doctype' ) {\n\t\t\tonDoctype( currentTag.idx );\n\n\t\t} else {\n\t\t\tif( currentTag.isOpening ) {\n\t\t\t\tonOpenTag( currentTag.name, currentTag.idx );\n\t\t\t}\n\t\t\tif( currentTag.isClosing ) {  // note: self-closing tags will emit both opening and closing\n\t\t\t\tonCloseTag( currentTag.name, currentTag.idx );\n\t\t\t}\n\t\t}\n\n\t\t// Since we just emitted a tag, reset to the data state for the next char\n\t\tresetToDataState();\n\t\tcurrentDataIdx = charIdx + 1;\n\t}\n\n\n\tfunction emitText() {\n\t\tconst text = html.slice( currentDataIdx, charIdx );\n\t\tonText( text, currentDataIdx );\n\n\t\tcurrentDataIdx = charIdx + 1;\n\t}\n\n\t/**\n\t * Captures the tag name from the start of the tag to the current character \n\t * index, and converts it to lower case\n\t */\n\tfunction captureTagName() {\n\t\tconst startIdx = currentTag.idx + ( currentTag.isClosing ? 2 : 1 );\n\t\treturn html.slice( startIdx, charIdx ).toLowerCase();\n\t}\n\n\n\t/**\n\t * Causes the main loop to re-consume the current character, such as after\n\t * encountering a \"parse error\" that changed state and needs to reconsume\n\t * the same character in that new state.\n\t */\n\tfunction reconsumeCurrentCharacter() {\n\t\tcharIdx--;\n\t}\n}\n\n\nclass CurrentTag {\n\treadonly idx: number;  // the index of the '<' in the html string\n\treadonly type: 'tag' | 'comment' | 'doctype';\n\treadonly name: string;\n\treadonly isOpening: boolean;  // true if it's an opening tag, OR a self-closing open tag\n\treadonly isClosing: boolean;  // true if it's a closing tag, OR a self-closing open tag\n\n\tconstructor( cfg: Partial<CurrentTag> = {} ) {\n\t\tthis.idx = cfg.idx !== undefined ? cfg.idx : -1;\n\t\tthis.type = cfg.type || 'tag';\n\t\tthis.name = cfg.name || '';\n\t\tthis.isOpening = !!cfg.isOpening;\n\t\tthis.isClosing = !!cfg.isClosing;\n\t}\n}"]},"metadata":{},"sourceType":"module"}