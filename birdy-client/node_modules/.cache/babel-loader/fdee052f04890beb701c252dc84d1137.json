{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Match } from \"./match\";\n/**\n * @class Autolinker.match.Mention\n * @extends Autolinker.match.Match\n *\n * Represents a Mention match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\n\nvar MentionMatch =\n/** @class */\nfunction (_super) {\n  __extends(MentionMatch, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match\n   *   instance, specified in an Object (map).\n   */\n\n\n  function MentionMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point mention matches to. See {@link Autolinker#mention}\n     * for available values.\n     */\n\n\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} mention (required)\n     *\n     * The Mention that was matched, without the '@' character.\n     */\n\n    _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    _this.mention = cfg.mention;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * Returns a string name for the type of match that this class represents.\n   * For the case of MentionMatch, returns 'mention'.\n   *\n   * @return {String}\n   */\n\n\n  MentionMatch.prototype.getType = function () {\n    return 'mention';\n  };\n  /**\n   * Returns the mention, without the '@' character.\n   *\n   * @return {String}\n   */\n\n\n  MentionMatch.prototype.getMention = function () {\n    return this.mention;\n  };\n  /**\n   * Returns the configured {@link #serviceName} to point the mention to.\n   * Ex: 'instagram', 'twitter', 'soundcloud'.\n   *\n   * @return {String}\n   */\n\n\n  MentionMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\n   * Returns the anchor href that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  MentionMatch.prototype.getAnchorHref = function () {\n    switch (this.serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/' + this.mention;\n\n      case 'instagram':\n        return 'https://instagram.com/' + this.mention;\n\n      case 'soundcloud':\n        return 'https://soundcloud.com/' + this.mention;\n\n      case 'tiktok':\n        return 'https://www.tiktok.com/@' + this.mention;\n\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n    }\n  };\n  /**\n   * Returns the anchor text that should be generated for the match.\n   *\n   * @return {String}\n   */\n\n\n  MentionMatch.prototype.getAnchorText = function () {\n    return '@' + this.mention;\n  };\n  /**\n   * Returns the CSS class suffixes that should be used on a tag built with\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n   * details.\n   *\n   * @return {String[]}\n   */\n\n\n  MentionMatch.prototype.getCssClassSuffixes = function () {\n    var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n        serviceName = this.getServiceName();\n\n    if (serviceName) {\n      cssClassSuffixes.push(serviceName);\n    }\n\n    return cssClassSuffixes;\n  };\n\n  return MentionMatch;\n}(Match);\n\nexport { MentionMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,QAAmC,SAAnC;AAGA;;;;;;;;;AAQA;AAAA;AAAA;AAAkCC;AAkBjC;;;;;;;AAKA,wBAAaC,GAAb,EAAoC;AAApC,gBACCC,kBAAOD,GAAP,KAAY,IADb;AArBA;;;;;;;;AAMiBE,wBAA+B,SAA/B,CAemB,CAfwB;;AAE5D;;;;;;AAKiBA,oBAAkB,EAAlB,CAQmB,CARI;;AAWvCA,SAAI,CAACC,OAAL,GAAeH,GAAG,CAACG,OAAnB;AACAD,SAAI,CAACE,WAAL,GAAmBJ,GAAG,CAACI,WAAvB;;AACA;AAGD;;;;;;;;AAMAC;AACC,WAAO,SAAP;AACA,GAFD;AAKA;;;;;;;AAKAA;AACC,WAAO,KAAKF,OAAZ;AACA,GAFD;AAKA;;;;;;;;AAMAE;AACC,WAAO,KAAKD,WAAZ;AACA,GAFD;AAKA;;;;;;;AAKAC;AACC,YAAQ,KAAKD,WAAb;AACC,WAAK,SAAL;AACC,eAAO,yBAAyB,KAAKD,OAArC;;AACD,WAAK,WAAL;AACC,eAAO,2BAA2B,KAAKA,OAAvC;;AACD,WAAK,YAAL;AACC,eAAO,4BAA4B,KAAKA,OAAxC;;AACD,WAAK,QAAL;AACC,eAAO,6BAA6B,KAAKA,OAAzC;;AAED;AAAW;AACV,cAAM,IAAIG,KAAJ,CAAW,+CAA+C,KAAKF,WAA/D,CAAN;AAXF;AAaA,GAdD;AAiBA;;;;;;;AAKAC;AACC,WAAO,MAAM,KAAKF,OAAlB;AACA,GAFD;AAKA;;;;;;;;;AAOAE;AACC,QAAIE,gBAAgB,GAAGN,iBAAMO,mBAAN,CAAyBC,IAAzB,CAAyB,IAAzB,CAAvB;AAAA,QACIL,WAAW,GAAG,KAAKM,cAAL,EADlB;;AAGA,QAAIN,WAAJ,EAAkB;AACjBG,sBAAgB,CAACI,IAAjB,CAAuBP,WAAvB;AACA;;AACD,WAAOG,gBAAP;AACA,GARD;;AAUD;AAAC,CAhHD,CAAkCT,KAAlC","names":["Match","__extends","cfg","_super","_this","mention","serviceName","MentionMatch","Error","cssClassSuffixes","getCssClassSuffixes","call","getServiceName","push"],"sources":["../src/match/mention-match.ts"],"sourcesContent":["import { Match, MatchConfig } from \"./match\";\nimport { MentionServices } from \"../autolinker\";\n\n/**\n * @class Autolinker.match.Mention\n * @extends Autolinker.match.Match\n *\n * Represents a Mention match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nexport class MentionMatch extends Match {\n\n\t/**\n\t * @cfg {String} serviceName\n\t *\n\t * The service to point mention matches to. See {@link Autolinker#mention}\n\t * for available values.\n\t */\n\tprivate readonly serviceName: MentionServices = 'twitter';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} mention (required)\n\t *\n\t * The Mention that was matched, without the '@' character.\n\t */\n\tprivate readonly mention: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: MentionMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.mention = cfg.mention;\n\t\tthis.serviceName = cfg.serviceName;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of MentionMatch, returns 'mention'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'mention';\n\t}\n\n\n\t/**\n\t * Returns the mention, without the '@' character.\n\t *\n\t * @return {String}\n\t */\n\tgetMention() {\n\t\treturn this.mention;\n\t}\n\n\n\t/**\n\t * Returns the configured {@link #serviceName} to point the mention to.\n\t * Ex: 'instagram', 'twitter', 'soundcloud'.\n\t *\n\t * @return {String}\n\t */\n\tgetServiceName() {\n\t\treturn this.serviceName;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\tswitch( this.serviceName ) {\n\t\t\tcase 'twitter' :\n\t\t\t\treturn 'https://twitter.com/' + this.mention;\n\t\t\tcase 'instagram' :\n\t\t\t\treturn 'https://instagram.com/' + this.mention;\n\t\t\tcase 'soundcloud' :\n\t\t\t\treturn 'https://soundcloud.com/' + this.mention;\n\t\t\tcase 'tiktok' :\n\t\t\t\treturn 'https://www.tiktok.com/@' + this.mention;\n\n\t\t\tdefault :  // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n\t\t\t\tthrow new Error( 'Unknown service name to point mention to: ' + this.serviceName );\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\treturn '@' + this.mention;\n\t}\n\n\n\t/**\n\t * Returns the CSS class suffixes that should be used on a tag built with\n\t * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n\t * details.\n\t *\n\t * @return {String[]}\n\t */\n\tgetCssClassSuffixes() {\n\t\tlet cssClassSuffixes = super.getCssClassSuffixes(),\n\t\t    serviceName = this.getServiceName();\n\n\t\tif( serviceName ) {\n\t\t\tcssClassSuffixes.push( serviceName );\n\t\t}\n\t\treturn cssClassSuffixes;\n\t}\n\n}\n\nexport interface MentionMatchConfig extends MatchConfig {\n\tserviceName: MentionServices;\n\tmention: string;\n}"]},"metadata":{},"sourceType":"module"}