{"ast":null,"code":"var _jsxFileName = \"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\nimport \"../../stylesheets/components/timeline.css\"; //props an array of tweets to render\n//default: boolean\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timeline(props) {\n  _s();\n\n  const [tweetList, setTweetList] = useState([]);\n  const [tweets, setTweets] = useState([]); //console.log('props.tweets: ', props.tweets);\n  //console.log('tweetList: ', tweetList);\n\n  useEffect(() => {\n    let listTmp = props.tweets.map(item => {\n      return [item, false]; //[value, deleted?]\n    });\n\n    function handleHideTweet(event, id) {\n      //console.log(\"handleHideTweet\");\n      setTweetList(prev => {\n        //console.log(\"setTweetList\");\n        const tweetListTmp = prev.map(item => {\n          if (item[0]['index'] === id) {\n            //console.log(\"hidden\");\n            return [item[0], !item[1]];\n          } else {\n            //console.log(id);\n            return item;\n          }\n        });\n        setTweets(genTweetsToRender(tweetListTmp));\n        return tweetListTmp;\n      });\n    }\n\n    function genTweetsToRender(listToMap) {\n      //console.log('list to map: ', listToMap);\n      const listResult = listToMap.map(item => {\n        const tweetId = item[0]['index'];\n\n        if (!item[1]) {\n          return /*#__PURE__*/_jsxDEV(Tweet, {\n            id: tweetId,\n            tweet: item[0],\n            default: props.default,\n            user: props.user,\n            deleted: false,\n            onDelete: handleHideTweet\n          }, tweetId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(TweetDeleted, {\n            id: tweetId,\n            deleted: true,\n            onDelete: handleHideTweet\n          }, tweetId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this);\n        }\n      }); //console.log('listResult: ', listResult);\n\n      return listResult;\n    }\n\n    setTweetList(listTmp);\n    setTweets(genTweetsToRender(listTmp));\n  }, [props.tweets, props.default, props.user]);\n\n  function genTweetsToRender(listToMap) {\n    //console.log('list to map: ', listToMap);\n    const listResult = listToMap.map(item => {\n      const tweetId = item[0]['index'];\n\n      if (!item[1]) {\n        return /*#__PURE__*/_jsxDEV(Tweet, {\n          id: tweetId,\n          tweet: item[0],\n          default: props.default,\n          user: props.user,\n          deleted: false,\n          onDelete: handleHideTweet\n        }, tweetId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(TweetDeleted, {\n          id: tweetId,\n          deleted: true,\n          onDelete: handleHideTweet\n        }, tweetId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this);\n      }\n    }); //console.log('listResult: ', listResult);\n\n    return listResult;\n  }\n\n  function handleHideTweet(event, id) {\n    //console.log(\"handleHideTweet\");\n    setTweetList(prev => {\n      //console.log(\"setTweetList\");\n      const tweetListTmp = prev.map(item => {\n        if (item[0]['index'] === id) {\n          //console.log(\"hidden\");\n          return [item[0], !item[1]];\n        } else {\n          //console.log(id);\n          return item;\n        }\n      });\n      setTweets(genTweetsToRender(tweetListTmp));\n      return tweetListTmp;\n    });\n  }\n\n  async function handleRenderNewTweet(event, newTweetId) {\n    await axios.get(`/apiTweet/tweet/${newTweetId}`).then(res => {\n      console.log('res.data: ', res.data); //console.log(\"handleRenderNewTweet\");\n\n      setTweetList(prev => {\n        //console.log(\"setter\");\n        prev.unshift([res.data, false]);\n        const tweetListTmp = [...prev];\n        setTweets(genTweetsToRender(tweetListTmp));\n        return tweetListTmp;\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline column\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"timeline-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: props.scroll,\n        className: \"timeline-home\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), props.default || /*#__PURE__*/_jsxDEV(NewTweet, {\n      onPost: handleRenderNewTweet,\n      user: props.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"timeline-main\",\n      className: \"timeline-main\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timeline-tweets\",\n        children: tweets === [] ? \"\" : tweets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timeline, \"v1WQPC+XjM8ABGncI1TYwkasJjg=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js"],"names":["React","useState","useEffect","axios","Tweet","NewTweet","TweetDeleted","Timeline","props","tweetList","setTweetList","tweets","setTweets","listTmp","map","item","handleHideTweet","event","id","prev","tweetListTmp","genTweetsToRender","listToMap","listResult","tweetId","default","user","handleRenderNewTweet","newTweetId","get","then","res","console","log","data","unshift","scroll"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\";\n\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\n\nimport \"../../stylesheets/components/timeline.css\";\n\n//props an array of tweets to render\n//default: boolean\nexport default function Timeline(props){\n    const [tweetList, setTweetList] = useState([]);\n    const [tweets, setTweets] = useState([]);\n\n    //console.log('props.tweets: ', props.tweets);\n    //console.log('tweetList: ', tweetList);\n\n    useEffect( () => {\n        let listTmp = props.tweets.map( item => {\n           return [item, false]; //[value, deleted?]\n        })\n\n        function handleHideTweet(event, id){\n            //console.log(\"handleHideTweet\");\n            setTweetList( prev => {\n                //console.log(\"setTweetList\");\n                const tweetListTmp = ( prev.map(item => {\n                    if(item[0]['index']===id)\n                    {\n                        //console.log(\"hidden\");\n                        return [item[0], !item[1]];\n                    }\n                    else\n                    {\n                        //console.log(id);\n                        return item;\n                    }\n                }));\n                setTweets(genTweetsToRender(tweetListTmp));\n                return tweetListTmp;\n            });\n        }\n\n        function genTweetsToRender(listToMap){\n            //console.log('list to map: ', listToMap);\n            const listResult = \n                listToMap.map((item) => {\n                    const tweetId = item[0]['index']; \n                    if (!item[1])\n                    {\n                        return(\n                            <Tweet \n                                key={tweetId}\n                                id={tweetId}\n                                tweet={item[0]}\n                                default={props.default}\n                                user={props.user}\n                                deleted={false}\n                                onDelete={handleHideTweet}\n                            />\n                        );\n                    }\n                    else\n                    {\n                        return(\n                            <TweetDeleted \n                                key={tweetId} \n                                id={tweetId} \n                                deleted={true} \n                                onDelete={handleHideTweet}\n                            />\n                        );\n                    }\n                });\n            //console.log('listResult: ', listResult);\n            return listResult;\n        }\n\n        setTweetList(listTmp);\n        setTweets(genTweetsToRender(listTmp));\n\n    }, [props.tweets, props.default, props.user]);\n\n    function genTweetsToRender(listToMap){\n        //console.log('list to map: ', listToMap);\n        const listResult = \n            listToMap.map((item) => {\n                const tweetId = item[0]['index']; \n                if (!item[1])\n                {\n                    return(\n                        <Tweet \n                            key={tweetId}\n                            id={tweetId}\n                            tweet={item[0]}\n                            default={props.default}\n                            user={props.user}\n                            deleted={false}\n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n                else\n                {\n                    return(\n                        <TweetDeleted \n                            key={tweetId} \n                            id={tweetId} \n                            deleted={true} \n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n            });\n        //console.log('listResult: ', listResult);\n        return listResult;\n    }\n\n    function handleHideTweet(event, id){\n        //console.log(\"handleHideTweet\");\n        setTweetList( prev => {\n            //console.log(\"setTweetList\");\n            const tweetListTmp = ( prev.map(item => {\n                if(item[0]['index']===id)\n                {\n                    //console.log(\"hidden\");\n                    return [item[0], !item[1]];\n                }\n                else\n                {\n                    //console.log(id);\n                    return item;\n                }\n            }));\n            setTweets(genTweetsToRender(tweetListTmp));\n            return tweetListTmp;\n        });\n    }\n\n    async function handleRenderNewTweet(event, newTweetId){\n        await axios\n            .get(`/apiTweet/tweet/${newTweetId}`)\n            .then( (res) => {\n                console.log('res.data: ', res.data);\n                //console.log(\"handleRenderNewTweet\");\n                setTweetList( prev => {\n                    //console.log(\"setter\");\n                    prev.unshift([res.data, false]);\n                    const tweetListTmp = [...prev];\n                    setTweets(genTweetsToRender(tweetListTmp));\n                    return tweetListTmp;\n                });\n            });\n\n        \n    }\n\n    return (\n        <div className=\"timeline column\">\n            <header className=\"timeline-header\">\n                <div onClick={props.scroll} className=\"timeline-home\">Home</div>\n            </header>\n            {/* if default timeline, no new tweets needed */}\n            {props.default || <NewTweet onPost={handleRenderNewTweet} user={props.user} />}\n            <main id=\"timeline-main\" className=\"timeline-main\">\n                <section className=\"timeline-tweets\">\n                    {tweets===[] ? \"\" : tweets}\n                </section>\n            </main>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}