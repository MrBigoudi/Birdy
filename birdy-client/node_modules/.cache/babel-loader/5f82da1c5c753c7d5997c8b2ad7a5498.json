{"ast":null,"code":"import _slicedToArray from \"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/*!\n * React Native Autolink\n *\n * Copyright 2016-2021 Josh Swan\n * Released under the MIT license\n * https://github.com/joshswan/react-native-autolink/blob/master/LICENSE\n */\nimport { Platform } from 'react-native';\nexport var LatLngMatcher = {\n  pattern: /[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)/g,\n  type: 'latlng',\n  getLinkUrl: function getLinkUrl(_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        latlng = _ref2[0];\n\n    var query = latlng.replace(/\\s/g, '');\n    return Platform.OS === 'ios' || Platform.OS === 'macos' ? \"http://maps.apple.com/?q=\".concat(encodeURIComponent(latlng), \"&ll=\").concat(query) : \"https://www.google.com/maps/search/?api=1&query=\".concat(query);\n  }\n};","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/node_modules/react-native-autolink/dist/matchers/location.js"],"names":["Platform","LatLngMatcher","pattern","type","getLinkUrl","latlng","query","replace","OS","encodeURIComponent"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,cAAzB;AACA,OAAO,IAAMC,aAAa,GAAG;AACzBC,EAAAA,OAAO,EAAE,yFADgB;AAEzBC,EAAAA,IAAI,EAAE,QAFmB;AAGzBC,EAAAA,UAAU,EAAE,0BAAc;AAAA;AAAA,QAAZC,MAAY;;AACtB,QAAMC,KAAK,GAAGD,MAAM,CAACE,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAAd;AACA,WAAOP,QAAQ,CAACQ,EAAT,KAAgB,KAAhB,IAAyBR,QAAQ,CAACQ,EAAT,KAAgB,OAAzC,sCAC2BC,kBAAkB,CAACJ,MAAD,CAD7C,iBAC4DC,KAD5D,8DAEkDA,KAFlD,CAAP;AAGH;AARwB,CAAtB","sourcesContent":["/*!\n * React Native Autolink\n *\n * Copyright 2016-2021 Josh Swan\n * Released under the MIT license\n * https://github.com/joshswan/react-native-autolink/blob/master/LICENSE\n */\nimport { Platform } from 'react-native';\nexport const LatLngMatcher = {\n    pattern: /[-+]?([1-8]?\\d(\\.\\d+)?|90(\\.0+)?),\\s*[-+]?(180(\\.0+)?|((1[0-7]\\d)|([1-9]?\\d))(\\.\\d+)?)/g,\n    type: 'latlng',\n    getLinkUrl: ([latlng]) => {\n        const query = latlng.replace(/\\s/g, '');\n        return Platform.OS === 'ios' || Platform.OS === 'macos'\n            ? `http://maps.apple.com/?q=${encodeURIComponent(latlng)}&ll=${query}`\n            : `https://www.google.com/maps/search/?api=1&query=${query}`;\n    },\n};\n"]},"metadata":{},"sourceType":"module"}