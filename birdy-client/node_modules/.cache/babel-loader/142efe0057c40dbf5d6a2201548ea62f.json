{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/yannis/Documents/Project/ProjectWeb/birdy/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/yannis/Documents/Project/ProjectWeb/birdy/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport * as ERROR_MSG from \"../constants/errorMessages.js\";\n\nvar _PRIVATE_ID_GENERATOR = /*#__PURE__*/_classPrivateFieldLooseKey(\"PRIVATE_ID_GENERATOR\");\n\nvar _id = /*#__PURE__*/_classPrivateFieldLooseKey(\"id\");\n\nvar _username = /*#__PURE__*/_classPrivateFieldLooseKey(\"username\");\n\nvar _fullname = /*#__PURE__*/_classPrivateFieldLooseKey(\"fullname\");\n\nvar _dateOfBirth = /*#__PURE__*/_classPrivateFieldLooseKey(\"dateOfBirth\");\n\nvar _emailAddress = /*#__PURE__*/_classPrivateFieldLooseKey(\"emailAddress\");\n\nvar _passwd = /*#__PURE__*/_classPrivateFieldLooseKey(\"passwd\");\n\nvar _following = /*#__PURE__*/_classPrivateFieldLooseKey(\"following\");\n\nvar _followers = /*#__PURE__*/_classPrivateFieldLooseKey(\"followers\");\n\nvar _dateCreated = /*#__PURE__*/_classPrivateFieldLooseKey(\"dateCreated\");\n\nexport class User {\n  constructor(username, fullname, dateOfBirth, emailAddress, passwd) {\n    Object.defineProperty(this, _id, {\n      writable: true,\n      value: `user${++_classPrivateFieldLooseBase(User, _PRIVATE_ID_GENERATOR)[_PRIVATE_ID_GENERATOR]}`\n    });\n    Object.defineProperty(this, _username, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _fullname, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _dateOfBirth, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emailAddress, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _passwd, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _following, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _followers, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _dateCreated, {\n      writable: true,\n      value: Date.now()\n    });\n    _classPrivateFieldLooseBase(this, _username)[_username] = username;\n    _classPrivateFieldLooseBase(this, _fullname)[_fullname] = fullname;\n    _classPrivateFieldLooseBase(this, _dateOfBirth)[_dateOfBirth] = dateOfBirth;\n    _classPrivateFieldLooseBase(this, _emailAddress)[_emailAddress] = emailAddress;\n    _classPrivateFieldLooseBase(this, _passwd)[_passwd] = passwd;\n  }\n\n  getId() {\n    return _classPrivateFieldLooseBase(this, _id)[_id];\n  }\n\n  getUsername() {\n    return _classPrivateFieldLooseBase(this, _username)[_username];\n  }\n\n  getFullname() {\n    return _classPrivateFieldLooseBase(this, _fullname)[_fullname];\n  }\n\n  getDateOfBirth() {\n    return _classPrivateFieldLooseBase(this, _dateOfBirth)[_dateOfBirth];\n  }\n\n  getEmailAddress() {\n    return _classPrivateFieldLooseBase(this, _emailAddress)[_emailAddress];\n  }\n\n  getFollowing() {\n    return _classPrivateFieldLooseBase(this, _following)[_following];\n  }\n\n  getFollowers() {\n    return _classPrivateFieldLooseBase(this, _followers)[_followers];\n  }\n\n  getDateCreated() {\n    return _classPrivateFieldLooseBase(this, _dateCreated)[_dateCreated];\n  }\n\n  checkEmailAddress(emailAddress) {\n    return emailAddress === _classPrivateFieldLooseBase(this, _emailAddress)[_emailAddress];\n  }\n\n  checkPasswd(passwd) {\n    return passwd === _classPrivateFieldLooseBase(this, _passwd)[_passwd];\n  }\n\n}\n/**\n * generate a random string of size n\n **/\n\nObject.defineProperty(User, _PRIVATE_ID_GENERATOR, {\n  writable: true,\n  value: 0\n});\n\nfunction genRandomString(n) {\n  let res = \"\";\n\n  for (let i = 0; i < n; i++) {\n    const random = Math.floor(Math.random() * 26);\n    res += String.fromCharCode(97 + random);\n  }\n\n  return res;\n}\n\nfunction genRandomName() {\n  return genRandomString(Math.floor(Math.random() * 8 + 3)); //names size between 3 and 10\n}\n\nfunction genRandomFullName() {\n  return `${genRandomName()} ${genRandomName()}`;\n}\n\nfunction genRandomEmailAddress(fullname) {\n  const domains = [\"gmail\", \"yahoo\", \"hotmail\"];\n  const dots = [\"com\", \"net\", \"fr\"];\n  const domain = domains[Math.floor(Math.random() * domains.length)];\n  const dot = dots[Math.floor(Math.random() * dots.length)];\n  const names = fullname.split(\" \");\n  return `${names[0]}.${names[1]}@${domain}.${dot}`;\n}\n\nfunction genRandomDate(start, end) {\n  return new Date(+start + Math.random() * (end - start)).toDateString();\n}\n\nfunction genRandomUser() {\n  const username = genRandomName();\n  const fullname = genRandomFullName();\n  const dateOfBirth = genRandomDate(new Date(1900, 1), new Date(2022, 12));\n  const emailAddress = genRandomEmailAddress(fullname);\n  const passwd = genRandomName();\n  return new User(username, fullname, dateOfBirth, emailAddress, passwd);\n}\n\nfunction genRandomUsers(n) {\n  let usersTmp = [];\n\n  for (let i = 0; i < n; i++) {\n    usersTmp.push(genRandomUser());\n  }\n\n  return usersTmp;\n}\n\nexport function checkLogin(emailAddress, passwd) {\n  return new Promise((resolve, reject) => {\n    let valid = true;\n    let msg = \"\";\n    let username = \"\"; //console.log(users);\n\n    for (let user of users) {\n      if (user.checkEmailAddress(emailAddress)) {\n        if (user.checkPasswd(passwd)) {\n          username = user.getUsername();\n          break;\n        }\n\n        msg = ERROR_MSG.WRONG_PASSWD;\n        valid = false;\n        break;\n      }\n    }\n\n    if (userId === \"\" && msg === \"\") {\n      msg = ERROR_MSG.WRONG_EMAIL;\n      valid = false;\n    }\n    /* gestion de la promesse */\n\n\n    if (valid) {\n      resolve(userId);\n    } else {\n      reject(Error(msg));\n    }\n  });\n}\nexport const users = [new User(\"mrBigoudi\", \"Yannis Kedadry\", \"Tue May 12 2000\", \"yayakeda94490@gmail.com\", \"yep\"), new User(\"karl\", \"Karl Hadwen\", \"Fri Dec 10 1965\", \"karlhadwen@gmail.com\", \"1234\"), new User(\"raphael\", \"Raffaello Sanzio\", \"Fri Dec 10 1965\", \"raphael@sanzio.com\", \"0000\")];","map":{"version":3,"sources":["/home/yannis/Documents/Project/ProjectWeb/birdy/src/database/users.js"],"names":["ERROR_MSG","User","constructor","username","fullname","dateOfBirth","emailAddress","passwd","Date","now","getId","getUsername","getFullname","getDateOfBirth","getEmailAddress","getFollowing","getFollowers","getDateCreated","checkEmailAddress","checkPasswd","genRandomString","n","res","i","random","Math","floor","String","fromCharCode","genRandomName","genRandomFullName","genRandomEmailAddress","domains","dots","domain","length","dot","names","split","genRandomDate","start","end","toDateString","genRandomUser","genRandomUsers","usersTmp","push","checkLogin","Promise","resolve","reject","valid","msg","user","users","WRONG_PASSWD","userId","WRONG_EMAIL","Error"],"mappings":"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","sourcesContent":["import * as ERROR_MSG from \"../constants/errorMessages.js\";\n\nexport class User{\n    static #PRIVATE_ID_GENERATOR = 0;\n    #id = `user${++User.#PRIVATE_ID_GENERATOR}`;\n    #username;\n    #fullname;\n    #dateOfBirth;\n    #emailAddress;\n    #passwd;\n    #following = [];\n    #followers = [];\n    #dateCreated = Date.now();\n    \n    constructor(username, fullname, dateOfBirth, emailAddress, passwd){\n        this.#username = username;\n        this.#fullname = fullname;\n        this.#dateOfBirth = dateOfBirth;\n        this.#emailAddress = emailAddress;\n        this.#passwd = passwd;   \n    }\n\n    getId(){return this.#id;}\n    getUsername(){return this.#username;}\n    getFullname(){return this.#fullname;}\n    getDateOfBirth(){return this.#dateOfBirth;}\n    getEmailAddress(){return this.#emailAddress;}\n    getFollowing(){return this.#following;}\n    getFollowers(){return this.#followers;}\n    getDateCreated(){return this.#dateCreated;}\n\n    checkEmailAddress(emailAddress){\n        return emailAddress === this.#emailAddress;\n    }\n    checkPasswd(passwd){\n        return passwd === this.#passwd;\n    }\n\n}\n\n/**\n * generate a random string of size n\n **/\nfunction genRandomString(n){\n    let res = \"\";\n    for (let i=0; i<n; i++){\n        const random = Math.floor(Math.random()*26);\n        res += String.fromCharCode(97+random);\n    }\n    return res;\n}\n\nfunction genRandomName(){\n    return genRandomString(Math.floor(Math.random()*8 + 3))//names size between 3 and 10\n}\n\nfunction genRandomFullName(){\n    return `${genRandomName()} ${genRandomName()}`;\n}\n\nfunction genRandomEmailAddress(fullname){\n    const domains = [\"gmail\", \"yahoo\", \"hotmail\"];\n    const dots = [\"com\", \"net\", \"fr\"];\n    const domain = domains[Math.floor(Math.random()*domains.length)];\n    const dot = dots[Math.floor(Math.random()*dots.length)];\n    const names = fullname.split(\" \");\n    return `${names[0]}.${names[1]}@${domain}.${dot}`;\n}\n\nfunction genRandomDate(start, end){\n    return new Date(+start + Math.random() * (end-start)).toDateString();\n}\n\nfunction genRandomUser(){\n    const username = genRandomName();\n    const fullname = genRandomFullName();\n    const dateOfBirth = genRandomDate(new Date(1900, 1), new Date(2022, 12));\n    const emailAddress = genRandomEmailAddress(fullname);\n    const passwd = genRandomName();\n\n    return new User(username, fullname, dateOfBirth, emailAddress, passwd);\n}\n\nfunction genRandomUsers(n){\n    let usersTmp = []\n    for (let i=0; i<n; i++){\n        usersTmp.push(genRandomUser());\n    }\n    return usersTmp;\n}\n\nexport function checkLogin(emailAddress, passwd){\n    return new Promise( (resolve, reject) => {\n        let valid = true;\n        let msg = \"\";\n        let username = \"\";\n        //console.log(users);\n        for (let user of users){\n            if (user.checkEmailAddress(emailAddress)){\n                if(user.checkPasswd(passwd)){\n                    username = user.getUsername();\n                    break;\n                }\n                msg = ERROR_MSG.WRONG_PASSWD;\n                valid = false;\n                break;\n            }\n        }\n\n        if(userId === \"\" && msg === \"\"){\n            msg = ERROR_MSG.WRONG_EMAIL;\n            valid = false;\n        }\n\n        /* gestion de la promesse */\n        if(valid){\n            resolve(userId);\n        }\n        else{\n            reject(Error(msg));\n        }\n    }); \n}\n\nexport const users = [\n    new User(\"mrBigoudi\", \"Yannis Kedadry\", \"Tue May 12 2000\", \"yayakeda94490@gmail.com\", \"yep\"),\n    new User(\"karl\", \"Karl Hadwen\", \"Fri Dec 10 1965\", \"karlhadwen@gmail.com\", \"1234\"),\n    new User(\"raphael\", \"Raffaello Sanzio\", \"Fri Dec 10 1965\", \"raphael@sanzio.com\", \"0000\")\n];"]},"metadata":{},"sourceType":"module"}