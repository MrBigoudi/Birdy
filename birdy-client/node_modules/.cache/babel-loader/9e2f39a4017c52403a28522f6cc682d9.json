{"ast":null,"code":"var _jsxFileName = \"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\nimport \"../../stylesheets/components/timeline.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_NB_TWEETS = 100; //props an array of tweets to render\n//default: boolean\n\nexport default function Timeline(props) {\n  _s();\n\n  const [tweetList, setTweetList] = useState([]);\n  const [tweets, setTweets] = useState([]); //console.log('props.tweets: ', props.tweets);\n  //console.log('tweetList: ', tweetList);\n\n  useEffect(() => {\n    let listTmp = props.tweets.map(item => {\n      return [item, false]; //[value, deleted?]\n    });\n\n    function handleHideTweet(event, id) {\n      //console.log(\"handleHideTweet\");\n      setTweetList(prev => {\n        //console.log(\"setTweetList\");\n        const tweetListTmp = prev.map(item => {\n          if (item[0]['index'] === id) {\n            //console.log(\"hidden\");\n            return [item[0], !item[1]];\n          } else {\n            //console.log(id);\n            return item;\n          }\n        });\n        setTweets(genTweetsToRender(tweetListTmp));\n        return tweetListTmp;\n      });\n    }\n\n    async function genTweetsToRender(listToMap) {\n      //console.log('list to map: ', listToMap);\n      const listResult = await Promise.all(listToMap.map(async item => {\n        let tweetId = 0;\n        await axios.post(\"/apiTweet/tweet/getTweetId\", item[0]).then(res => {\n          tweetId = res.data;\n        });\n\n        if (!item[1]) {\n          return /*#__PURE__*/_jsxDEV(Tweet, {\n            id: tweetId,\n            tweet: item[0],\n            default: props.default,\n            user: props.user,\n            deleted: false,\n            onDelete: handleHideTweet\n          }, tweetId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(TweetDeleted, {\n            id: tweetId,\n            deleted: true,\n            onDelete: handleHideTweet\n          }, tweetId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this);\n        }\n      }));\n      console.log('listResult: ', listResult);\n      return listResult;\n    }\n\n    setTweetList(listTmp);\n    setTweets(genTweetsToRender(listTmp));\n  }, [props.tweets, props.default, props.user]);\n\n  function genTweetsToRender(listToMap) {\n    //console.log('list to map: ', listToMap);\n    const listResult = listToMap.map(async item => {\n      let tweetId = 0;\n      await axios.post(\"/apiTweet/tweet/getTweetId\", item[0]).then(res => {\n        tweetId = res.data;\n      });\n\n      if (!item[1]) {\n        return /*#__PURE__*/_jsxDEV(Tweet, {\n          id: tweetId,\n          tweet: item[0],\n          default: props.default,\n          user: props.user,\n          deleted: false,\n          onDelete: handleHideTweet\n        }, tweetId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(TweetDeleted, {\n          id: tweetId,\n          deleted: true,\n          onDelete: handleHideTweet\n        }, tweetId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this);\n      }\n    }); //console.log('listResult: ', listResult);\n\n    return listResult;\n  }\n\n  function handleHideTweet(event, id) {\n    //console.log(\"handleHideTweet\");\n    setTweetList(prev => {\n      //console.log(\"setTweetList\");\n      const tweetListTmp = prev.map(item => {\n        if (item[0]['index'] === id) {\n          //console.log(\"hidden\");\n          return [item[0], !item[1]];\n        } else {\n          //console.log(id);\n          return item;\n        }\n      });\n      setTweets(genTweetsToRender(tweetListTmp));\n      return tweetListTmp;\n    });\n  }\n\n  function handleRenderNewTweet(event, newTweetId) {\n    axios.get(`/apiTweet/tweet/getNTweets/${MAX_NB_TWEETS}`).then(res => {\n      //console.log('tweets: ', res.data);\n      setTweetList(prev => {\n        const tweetListTmp = res.data.map(item => {\n          return [item, false];\n        });\n        setTweets(genTweetsToRender(tweetListTmp));\n        return tweetListTmp;\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline column\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"timeline-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: props.scroll,\n        className: \"timeline-home\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), props.default || /*#__PURE__*/_jsxDEV(NewTweet, {\n      onPost: handleRenderNewTweet,\n      user: props.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"timeline-main\",\n      className: \"timeline-main\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timeline-tweets\",\n        children: tweets === [] ? \"\" : tweets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timeline, \"v1WQPC+XjM8ABGncI1TYwkasJjg=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js"],"names":["React","useState","useEffect","axios","Tweet","NewTweet","TweetDeleted","MAX_NB_TWEETS","Timeline","props","tweetList","setTweetList","tweets","setTweets","listTmp","map","item","handleHideTweet","event","id","prev","tweetListTmp","genTweetsToRender","listToMap","listResult","Promise","all","tweetId","post","then","res","data","default","user","console","log","handleRenderNewTweet","newTweetId","get","scroll"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\";\n\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\n\nimport \"../../stylesheets/components/timeline.css\";\n\nconst MAX_NB_TWEETS = 100;\n\n//props an array of tweets to render\n//default: boolean\nexport default function Timeline(props){\n    const [tweetList, setTweetList] = useState([]);\n    const [tweets, setTweets] = useState([]);\n\n    //console.log('props.tweets: ', props.tweets);\n    //console.log('tweetList: ', tweetList);\n\n    useEffect( () => {\n        let listTmp = props.tweets.map( item => {\n           return [item, false]; //[value, deleted?]\n        })\n\n        function handleHideTweet(event, id){\n            //console.log(\"handleHideTweet\");\n            setTweetList( prev => {\n                //console.log(\"setTweetList\");\n                const tweetListTmp = ( prev.map(item => {\n                    if(item[0]['index']===id)\n                    {\n                        //console.log(\"hidden\");\n                        return [item[0], !item[1]];\n                    }\n                    else\n                    {\n                        //console.log(id);\n                        return item;\n                    }\n                }));\n                setTweets(genTweetsToRender(tweetListTmp));\n                return tweetListTmp;\n            });\n        }\n\n        async function genTweetsToRender(listToMap){\n            //console.log('list to map: ', listToMap);\n            const listResult = await Promise.all(\n                listToMap.map(async (item) => {\n                    let tweetId = 0; \n                    await axios\n                        .post(\"/apiTweet/tweet/getTweetId\", item[0])\n                        .then( (res) => { tweetId = res.data; })\n                    if (!item[1])\n                    {\n                        return(\n                            <Tweet \n                                key={tweetId}\n                                id={tweetId}\n                                tweet={item[0]}\n                                default={props.default}\n                                user={props.user}\n                                deleted={false}\n                                onDelete={handleHideTweet}\n                            />\n                        );\n                    }\n                    else\n                    {\n                        return(\n                            <TweetDeleted \n                                key={tweetId} \n                                id={tweetId} \n                                deleted={true} \n                                onDelete={handleHideTweet}\n                            />\n                        );\n                    }\n                })\n            )\n            console.log('listResult: ', listResult);\n            return listResult;\n        }\n\n        setTweetList(listTmp);\n        setTweets(genTweetsToRender(listTmp));\n\n    }, [props.tweets, props.default, props.user]);\n\n    function genTweetsToRender(listToMap){\n        //console.log('list to map: ', listToMap);\n        const listResult = \n            listToMap.map(async (item) => {\n                let tweetId = 0; \n                await axios\n                    .post(\"/apiTweet/tweet/getTweetId\", item[0])\n                    .then( (res) => { tweetId = res.data; })\n\n                if (!item[1])\n                {\n                    return(\n                        <Tweet \n                            key={tweetId}\n                            id={tweetId}\n                            tweet={item[0]}\n                            default={props.default}\n                            user={props.user}\n                            deleted={false}\n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n                else\n                {\n                    return(\n                        <TweetDeleted \n                            key={tweetId} \n                            id={tweetId} \n                            deleted={true} \n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n            });\n        //console.log('listResult: ', listResult);\n        return listResult;\n    }\n\n    function handleHideTweet(event, id){\n        //console.log(\"handleHideTweet\");\n        setTweetList( prev => {\n            //console.log(\"setTweetList\");\n            const tweetListTmp = ( prev.map(item => {\n                if(item[0]['index']===id)\n                {\n                    //console.log(\"hidden\");\n                    return [item[0], !item[1]];\n                }\n                else\n                {\n                    //console.log(id);\n                    return item;\n                }\n            }));\n            setTweets(genTweetsToRender(tweetListTmp));\n            return tweetListTmp;\n        });\n    }\n\n    function handleRenderNewTweet(event, newTweetId){\n        axios\n            .get(`/apiTweet/tweet/getNTweets/${MAX_NB_TWEETS}`)\n            .then( (res) => {\n                //console.log('tweets: ', res.data);\n                setTweetList(prev => {\n                    const tweetListTmp = res.data.map( item => {\n                        return [item, false];\n                    })\n                    setTweets(genTweetsToRender(tweetListTmp));\n                    return tweetListTmp;\n                });\n            });        \n    }\n\n    return (\n        <div className=\"timeline column\">\n            <header className=\"timeline-header\">\n                <div onClick={props.scroll} className=\"timeline-home\">Home</div>\n            </header>\n            {/* if default timeline, no new tweets needed */}\n            {props.default || <NewTweet onPost={handleRenderNewTweet} user={props.user} />}\n            <main id=\"timeline-main\" className=\"timeline-main\">\n                <section className=\"timeline-tweets\">\n                    {tweets===[] ? \"\" : tweets}\n                </section>\n            </main>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}