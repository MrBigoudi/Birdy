{"ast":null,"code":"var _jsxFileName = \"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\nimport \"../../stylesheets/components/timeline.css\"; //props an array of tweets to render\n//default: boolean\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timeline(props) {\n  _s();\n\n  useEffect(() => {\n    setTweetList(props.tweets.map(item => {\n      return [item, false]; //[value, deleted?]\n    }));\n  }, [props.tweets]);\n  const [tweetList, setTweetList] = useState();\n  const [tweets, setTweets] = useState(genTweetsToRender(tweetList));\n\n  function genTweetsToRender(listToMap) {\n    console.log('tweetList: ', listToMap);\n    return listToMap.map(async item => {\n      const tweetId = item[0]['index'];\n\n      if (!item[1]) {\n        return /*#__PURE__*/_jsxDEV(Tweet, {\n          id: tweetId,\n          tweet: item[0],\n          default: props.default,\n          user: props.user,\n          deleted: false,\n          onDelete: handleHideTweet\n        }, tweetId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(TweetDeleted, {\n          id: tweetId,\n          deleted: true,\n          onDelete: handleHideTweet\n        }, tweetId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this);\n      }\n    });\n  }\n\n  function handleHideTweet(event, id) {\n    //console.log(\"handleHideTweet\");\n    setTweetList(prev => {\n      //console.log(\"setTweetList\");\n      return prev.map(item => {\n        if (item[0]['index'] === id) {\n          //console.log(\"hidden\");\n          return [item[0], !item[1]];\n        } else {\n          //console.log(id);\n          return item;\n        }\n      });\n    });\n  }\n\n  async function handleRenderNewTweet(event, newTweetId) {\n    await axios.get(`/apiTweet/tweet/${newTweetId}`).then(res => {\n      console.log('res.data: ', res.data); //console.log(\"handleRenderNewTweet\");\n\n      setTweetList(prev => {\n        //console.log(\"setter\");\n        prev.unshift([res.data, false]);\n        return [...prev];\n      });\n      setTweets(genTweetsToRender(tweetList));\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline column\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"timeline-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: props.scroll,\n        className: \"timeline-home\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), props.default || /*#__PURE__*/_jsxDEV(NewTweet, {\n      onPost: handleRenderNewTweet,\n      user: props.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"timeline-main\",\n      className: \"timeline-main\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"timeline-tweets\",\n        children: tweets ? \"\" : tweets\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timeline, \"oyo39tVT7MlPbG2pJNemFsY3CNc=\");\n\n_c = Timeline;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js"],"names":["React","useState","useEffect","axios","Tweet","NewTweet","TweetDeleted","Timeline","props","setTweetList","tweets","map","item","tweetList","setTweets","genTweetsToRender","listToMap","console","log","tweetId","default","user","handleHideTweet","event","id","prev","handleRenderNewTweet","newTweetId","get","then","res","data","unshift","scroll"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\";\n\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\n\nimport \"../../stylesheets/components/timeline.css\";\n\n//props an array of tweets to render\n//default: boolean\nexport default function Timeline(props){\n    useEffect( () => {\n        setTweetList(props.tweets.map( item => {\n            return [item, false]; //[value, deleted?]\n        }));\n    }, [props.tweets]);\n    \n    const [tweetList, setTweetList] = useState();\n\n    const [tweets, setTweets] = useState(genTweetsToRender(tweetList));\n\n    function genTweetsToRender(listToMap){\n        console.log('tweetList: ', listToMap);\n        return (\n            listToMap.map(async (item) => {\n                const tweetId = item[0]['index']; \n                if (!item[1])\n                {\n                    return(\n                        <Tweet \n                            key={tweetId}\n                            id={tweetId}\n                            tweet={item[0]}\n                            default={props.default}\n                            user={props.user}\n                            deleted={false}\n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n                else\n                {\n                    return(\n                        <TweetDeleted \n                            key={tweetId} \n                            id={tweetId} \n                            deleted={true} \n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n            })\n        )\n    }\n\n    function handleHideTweet(event, id){\n        //console.log(\"handleHideTweet\");\n        setTweetList( prev => {\n            //console.log(\"setTweetList\");\n            return( prev.map(item => {\n                if(item[0]['index']===id)\n                {\n                    //console.log(\"hidden\");\n                    return [item[0], !item[1]];\n                }\n                else\n                {\n                    //console.log(id);\n                    return item;\n                }\n            }));\n        });\n    }\n\n    async function handleRenderNewTweet(event, newTweetId){\n        await axios\n            .get(`/apiTweet/tweet/${newTweetId}`)\n            .then( (res) => {\n                console.log('res.data: ', res.data);\n                //console.log(\"handleRenderNewTweet\");\n                setTweetList( prev => {\n                    //console.log(\"setter\");\n                    prev.unshift([res.data, false]);\n                    return([...prev]);\n                });\n                setTweets(genTweetsToRender(tweetList));\n            });\n\n        \n    }\n\n    return (\n        <div className=\"timeline column\">\n            <header className=\"timeline-header\">\n                <div onClick={props.scroll} className=\"timeline-home\">Home</div>\n            </header>\n            {/* if default timeline, no new tweets needed */}\n            {props.default || <NewTweet onPost={handleRenderNewTweet} user={props.user} />}\n            <main id=\"timeline-main\" className=\"timeline-main\">\n                <section className=\"timeline-tweets\">\n                    {tweets ? \"\" : tweets}\n                </section>\n            </main>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}