{"ast":null,"code":"import { HtmlTag } from \"./html-tag\";\nimport { truncateSmart } from \"./truncate/truncate-smart\";\nimport { truncateMiddle } from \"./truncate/truncate-middle\";\nimport { truncateEnd } from \"./truncate/truncate-end\";\n/**\n * @protected\n * @class Autolinker.AnchorTagBuilder\n * @extends Object\n *\n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\n * found.\n *\n * Normally this class is instantiated, configured, and used internally by an\n * {@link Autolinker} instance, but may actually be used indirectly in a\n * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\n * instances which may be modified before returning from the\n * {@link Autolinker#replaceFn replaceFn}. For example:\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n */\n\nvar AnchorTagBuilder =\n/** @class */\nfunction () {\n  /**\n   * @method constructor\n   * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n   */\n  function AnchorTagBuilder(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    /**\n     * @cfg {Boolean} newWindow\n     * @inheritdoc Autolinker#newWindow\n     */\n\n\n    this.newWindow = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {Object} truncate\n     * @inheritdoc Autolinker#truncate\n     */\n\n    this.truncate = {}; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    /**\n     * @cfg {String} className\n     * @inheritdoc Autolinker#className\n     */\n\n    this.className = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n\n    this.newWindow = cfg.newWindow || false;\n    this.truncate = cfg.truncate || {};\n    this.className = cfg.className || '';\n  }\n  /**\n   * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\n   * matched text, via its `match` object.\n   *\n   * @param {Autolinker.match.Match} match The Match instance to generate an\n   *   anchor tag from.\n   * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n   */\n\n\n  AnchorTagBuilder.prototype.build = function (match) {\n    return new HtmlTag({\n      tagName: 'a',\n      attrs: this.createAttrs(match),\n      innerHtml: this.processAnchorText(match.getAnchorText())\n    });\n  };\n  /**\n   * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\n   *   tag being generated.\n   *\n   * @protected\n   * @param {Autolinker.match.Match} match The Match instance to generate an\n   *   anchor tag from.\n   * @return {Object} A key/value Object (map) of the anchor tag's attributes.\n   */\n\n\n  AnchorTagBuilder.prototype.createAttrs = function (match) {\n    var attrs = {\n      'href': match.getAnchorHref() // we'll always have the `href` attribute\n\n    };\n    var cssClass = this.createCssClass(match);\n\n    if (cssClass) {\n      attrs['class'] = cssClass;\n    }\n\n    if (this.newWindow) {\n      attrs['target'] = \"_blank\";\n      attrs['rel'] = \"noopener noreferrer\"; // Issue #149. See https://mathiasbynens.github.io/rel-noopener/\n    }\n\n    if (this.truncate) {\n      if (this.truncate.length && this.truncate.length < match.getAnchorText().length) {\n        attrs['title'] = match.getAnchorHref();\n      }\n    }\n\n    return attrs;\n  };\n  /**\n   * Creates the CSS class that will be used for a given anchor tag, based on\n   * the `matchType` and the {@link #className} config.\n   *\n   * Example returns:\n   *\n   * - \"\"                                      // no {@link #className}\n   * - \"myLink myLink-url\"                     // url match\n   * - \"myLink myLink-email\"                   // email match\n   * - \"myLink myLink-phone\"                   // phone match\n   * - \"myLink myLink-hashtag\"                 // hashtag match\n   * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\n   *\n   * @protected\n   * @param {Autolinker.match.Match} match The Match instance to generate an\n   *   anchor tag from.\n   * @return {String} The CSS class string for the link. Example return:\n   *   \"myLink myLink-url\". If no {@link #className} was configured, returns\n   *   an empty string.\n   */\n\n\n  AnchorTagBuilder.prototype.createCssClass = function (match) {\n    var className = this.className;\n\n    if (!className) {\n      return \"\";\n    } else {\n      var returnClasses = [className],\n          cssClassSuffixes = match.getCssClassSuffixes();\n\n      for (var i = 0, len = cssClassSuffixes.length; i < len; i++) {\n        returnClasses.push(className + '-' + cssClassSuffixes[i]);\n      }\n\n      return returnClasses.join(' ');\n    }\n  };\n  /**\n   * Processes the `anchorText` by truncating the text according to the\n   * {@link #truncate} config.\n   *\n   * @private\n   * @param {String} anchorText The anchor tag's text (i.e. what will be\n   *   displayed).\n   * @return {String} The processed `anchorText`.\n   */\n\n\n  AnchorTagBuilder.prototype.processAnchorText = function (anchorText) {\n    anchorText = this.doTruncate(anchorText);\n    return anchorText;\n  };\n  /**\n   * Performs the truncation of the `anchorText` based on the {@link #truncate}\n   * option. If the `anchorText` is longer than the length specified by the\n   * {@link #truncate} option, the truncation is performed based on the\n   * `location` property. See {@link #truncate} for details.\n   *\n   * @private\n   * @param {String} anchorText The anchor tag's text (i.e. what will be\n   *   displayed).\n   * @return {String} The truncated anchor text.\n   */\n\n\n  AnchorTagBuilder.prototype.doTruncate = function (anchorText) {\n    var truncate = this.truncate;\n    if (!truncate || !truncate.length) return anchorText;\n    var truncateLength = truncate.length,\n        truncateLocation = truncate.location;\n\n    if (truncateLocation === 'smart') {\n      return truncateSmart(anchorText, truncateLength);\n    } else if (truncateLocation === 'middle') {\n      return truncateMiddle(anchorText, truncateLength);\n    } else {\n      return truncateEnd(anchorText, truncateLength);\n    }\n  };\n\n  return AnchorTagBuilder;\n}();\n\nexport { AnchorTagBuilder };","map":{"version":3,"mappings":"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","names":["HtmlTag","truncateSmart","truncateMiddle","truncateEnd","cfg","newWindow","truncate","className","AnchorTagBuilder","match","tagName","attrs","createAttrs","innerHtml","processAnchorText","getAnchorText","getAnchorHref","cssClass","createCssClass","length","returnClasses","cssClassSuffixes","getCssClassSuffixes","i","len","push","join","anchorText","doTruncate","truncateLength","truncateLocation","location"],"sources":["/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/node_modules/autolinker/dist/src/anchor-tag-builder.ts"],"sourcesContent":["import { Match } from \"./match/match\";\nimport { HtmlTag } from \"./html-tag\";\nimport { TruncateConfigObj } from \"./autolinker\";\nimport { truncateSmart } from \"./truncate/truncate-smart\";\nimport { truncateMiddle } from \"./truncate/truncate-middle\";\nimport { truncateEnd } from \"./truncate/truncate-end\";\n\n/**\n * @protected\n * @class Autolinker.AnchorTagBuilder\n * @extends Object\n *\n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is\n * found.\n *\n * Normally this class is instantiated, configured, and used internally by an\n * {@link Autolinker} instance, but may actually be used indirectly in a\n * {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag}\n * instances which may be modified before returning from the\n * {@link Autolinker#replaceFn replaceFn}. For example:\n *\n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( match ) {\n *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n *             tag.setAttr( 'rel', 'nofollow' );\n *\n *             return tag;\n *         }\n *     } );\n *\n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n */\nexport class AnchorTagBuilder {\n\n\t/**\n\t * @cfg {Boolean} newWindow\n\t * @inheritdoc Autolinker#newWindow\n\t */\n\tprivate readonly newWindow: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Object} truncate\n\t * @inheritdoc Autolinker#truncate\n\t */\n\tprivate readonly truncate: TruncateConfigObj = {};  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} className\n\t * @inheritdoc Autolinker#className\n\t */\n\tprivate readonly className: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: AnchorTagBuilderCfg = {} ) {\n\t\tthis.newWindow = cfg.newWindow || false;\n\t\tthis.truncate = cfg.truncate || {};\n\t\tthis.className = cfg.className || '';\n\t}\n\n\n\t/**\n\t * Generates the actual anchor (&lt;a&gt;) tag to use in place of the\n\t * matched text, via its `match` object.\n\t *\n\t * @param {Autolinker.match.Match} match The Match instance to generate an\n\t *   anchor tag from.\n\t * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n\t */\n\tbuild( match: Match ) {\n\t\treturn new HtmlTag( {\n\t\t\ttagName   : 'a',\n\t\t\tattrs     : this.createAttrs( match ),\n\t\t\tinnerHtml : this.processAnchorText( match.getAnchorText() )\n\t\t} );\n\t}\n\n\n\t/**\n\t * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;)\n\t *   tag being generated.\n\t *\n\t * @protected\n\t * @param {Autolinker.match.Match} match The Match instance to generate an\n\t *   anchor tag from.\n\t * @return {Object} A key/value Object (map) of the anchor tag's attributes.\n\t */\n\tprotected createAttrs( match: Match ) {\n\t\tlet attrs: {[attrName: string]: string} = {\n\t\t\t'href' : match.getAnchorHref()  // we'll always have the `href` attribute\n\t\t};\n\n\t\tlet cssClass = this.createCssClass( match );\n\t\tif( cssClass ) {\n\t\t\tattrs[ 'class' ] = cssClass;\n\t\t}\n\t\tif( this.newWindow ) {\n\t\t\tattrs[ 'target' ] = \"_blank\";\n\t\t\tattrs[ 'rel' ] = \"noopener noreferrer\";  // Issue #149. See https://mathiasbynens.github.io/rel-noopener/\n\t\t}\n\n\t\tif( this.truncate ) {\n\t\t\tif( this.truncate.length && this.truncate.length < match.getAnchorText().length ) {\n\t\t\t\tattrs[ 'title' ] = match.getAnchorHref();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\n\t/**\n\t * Creates the CSS class that will be used for a given anchor tag, based on\n\t * the `matchType` and the {@link #className} config.\n\t *\n\t * Example returns:\n\t *\n\t * - \"\"                                      // no {@link #className}\n\t * - \"myLink myLink-url\"                     // url match\n\t * - \"myLink myLink-email\"                   // email match\n\t * - \"myLink myLink-phone\"                   // phone match\n\t * - \"myLink myLink-hashtag\"                 // hashtag match\n\t * - \"myLink myLink-mention myLink-twitter\"  // mention match with Twitter service\n\t *\n\t * @protected\n\t * @param {Autolinker.match.Match} match The Match instance to generate an\n\t *   anchor tag from.\n\t * @return {String} The CSS class string for the link. Example return:\n\t *   \"myLink myLink-url\". If no {@link #className} was configured, returns\n\t *   an empty string.\n\t */\n\tprotected createCssClass( match: Match ) {\n\t\tlet className = this.className;\n\n\t\tif( !className ) {\n\t\t\treturn \"\";\n\n\t\t} else {\n\t\t\tlet returnClasses = [ className ],\n\t\t\t\tcssClassSuffixes = match.getCssClassSuffixes();\n\n\t\t\tfor( let i = 0, len = cssClassSuffixes.length; i < len; i++ ) {\n\t\t\t\treturnClasses.push( className + '-' + cssClassSuffixes[ i ] );\n\t\t\t}\n\t\t\treturn returnClasses.join( ' ' );\n\t\t}\n\t}\n\n\n\t/**\n\t * Processes the `anchorText` by truncating the text according to the\n\t * {@link #truncate} config.\n\t *\n\t * @private\n\t * @param {String} anchorText The anchor tag's text (i.e. what will be\n\t *   displayed).\n\t * @return {String} The processed `anchorText`.\n\t */\n\tprivate processAnchorText( anchorText: string ) {\n\t\tanchorText = this.doTruncate( anchorText );\n\n\t\treturn anchorText;\n\t}\n\n\n\t/**\n\t * Performs the truncation of the `anchorText` based on the {@link #truncate}\n\t * option. If the `anchorText` is longer than the length specified by the\n\t * {@link #truncate} option, the truncation is performed based on the\n\t * `location` property. See {@link #truncate} for details.\n\t *\n\t * @private\n\t * @param {String} anchorText The anchor tag's text (i.e. what will be\n\t *   displayed).\n\t * @return {String} The truncated anchor text.\n\t */\n\tprivate doTruncate( anchorText: string ) {\n\t\tlet truncate = this.truncate;\n\t\tif( !truncate || !truncate.length ) return anchorText;\n\n\t\tlet truncateLength = truncate.length,\n\t\t\ttruncateLocation = truncate.location;\n\n\t\tif( truncateLocation === 'smart' ) {\n\t\t\treturn truncateSmart( anchorText, truncateLength );\n\n\t\t} else if( truncateLocation === 'middle' ) {\n\t\t\treturn truncateMiddle( anchorText, truncateLength );\n\n\t\t} else {\n\t\t\treturn truncateEnd( anchorText, truncateLength );\n\t\t}\n\t}\n}\n\n\nexport interface AnchorTagBuilderCfg {\n\tnewWindow?: boolean;\n\ttruncate?: TruncateConfigObj;\n\tclassName?: string\n}"]},"metadata":{},"sourceType":"module"}