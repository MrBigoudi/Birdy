[{"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/index.js":"1","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/App.js":"2","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/constants/routes.js":"3","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/atomComponents/Loading.js":"4","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Dashboard.js":"5","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Login.js":"6","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Profile.js":"7","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Not-found.js":"8","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Signup.js":"9","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/atomComponents/Birdy-logo.js":"10","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/NavBar/NavBar.js":"11","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js":"12","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/SideBar/SideBar.js":"13","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/NavBar/MenuIcon.js":"14","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/NewTweet.js":"15","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/SideBar/SearchBar.js":"16","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/TweetDeleted.js":"17","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Tweet.js":"18","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/TweetIcon.js":"19","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/atomComponents/CustomLink.js":"20"},{"size":202,"mtime":1650269897433,"results":"21","hashOfConfig":"22"},{"size":1101,"mtime":1651500308361,"results":"23","hashOfConfig":"22"},{"size":166,"mtime":1651428117448,"results":"24","hashOfConfig":"22"},{"size":290,"mtime":1650269897433,"results":"25","hashOfConfig":"22"},{"size":1789,"mtime":1651830660791,"results":"26","hashOfConfig":"22"},{"size":4555,"mtime":1651504233345,"results":"27","hashOfConfig":"22"},{"size":4373,"mtime":1651856976090,"results":"28","hashOfConfig":"22"},{"size":299,"mtime":1650269897433,"results":"29","hashOfConfig":"22"},{"size":6464,"mtime":1651500950517,"results":"30","hashOfConfig":"22"},{"size":139,"mtime":1650269897433,"results":"31","hashOfConfig":"22"},{"size":582,"mtime":1651856580266,"results":"32","hashOfConfig":"22"},{"size":5801,"mtime":1651821491763,"results":"33","hashOfConfig":"22"},{"size":4251,"mtime":1651859168595,"results":"34","hashOfConfig":"22"},{"size":406,"mtime":1650269897433,"results":"35","hashOfConfig":"22"},{"size":5569,"mtime":1651827798390,"results":"36","hashOfConfig":"22"},{"size":604,"mtime":1650269897433,"results":"37","hashOfConfig":"22"},{"size":700,"mtime":1650269897433,"results":"38","hashOfConfig":"22"},{"size":8663,"mtime":1651915333964,"results":"39","hashOfConfig":"22"},{"size":555,"mtime":1651828249727,"results":"40","hashOfConfig":"22"},{"size":201,"mtime":1650269897433,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wtgilw",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/index.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/App.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/constants/routes.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/atomComponents/Loading.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Dashboard.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Login.js",["88","89"],"import React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport * as ROUTES from \"../constants/routes.js\";\n// import * as ERROR_MSG from \"../constants/errorMessages.js\";\n\nimport BirdyLogo from \"../atomComponents/Birdy-logo.js\";\nimport \"../stylesheets/form.css\";\n\n// import { checkLogin } from \"../database/users.js\";\n\nexport default function Login(){\n\n    const navigate = useNavigate();\n\n    const [formData, setFormData] = useState(\n        {emailAddress:\"\", passwd:\"\"}\n    );\n\n    const [error, setError] = useState(\"\");\n\n    const isInvalid = formData.passwd === \"\" || formData.emailAddress === \"\";\n\n    useEffect( () => {\n        document.title = \"Login - Birdy\";\n    }, []);\n\n    function handleChange(event){\n        setFormData( prev => {\n            return {\n                ...prev,\n                [event.target.name]: event.target.value\n            }\n        })\n    };\n\n    const answer_login = async (res) => {\n        //console.log('res.data: ', res.data);\n        if(res.data['status'] !== 200){\n            setError(res.data['message']);\n            console.log('error: ', error);\n        }else{\n            const _id = res.data['id'];\n            //console.log('user_id: ', _id);\n            navigate(`/p/${_id}`, { state: {}, replace: true, });\n        }\n    }\n\n    const answer_login_err = (err) => {\n        if (err.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log('err.response.data: ',    err.response.data);\n            console.log('err.response.status: ',  err.response.status);\n            console.log('err.response.headers: ', err.response.headers);\n            setError(err.response.data['message']);\n            if(err.response.status === 403){\n                setFormData( prev => {return {...prev, passwd:\"\"}});\n            }\n        } else if (err.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(err.request);\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', err.message);\n        }\n        \n        console.log(err.config);\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault();\n        axios\n            .post(\"/api/user/login\", formData)\n            .then( (res) => {\n                //console.log('then');\n                answer_login(res);\n            })\n            .catch( (err) => {\n                //console.log('catch');\n                answer_login_err(err);\n            });\n    }\n\n    return(\n        <main className=\"form-page-main column gap20\">\n            <div className=\"form-container column gap20\">\n                <BirdyLogo />\n                <form className=\"base-form column\" onSubmit={handleLogin}>\n                    <input\n                        className=\"form-input\" \n                        type=\"email\" \n                        placeholder=\"Email address\" \n                        aria-label=\"Enter your email address\"\n                        onChange={handleChange}\n                        name=\"emailAddress\"\n                        value={formData.emailAddress}\n                    />\n                    <input\n                        className=\"form-input\" \n                        type=\"password\" \n                        placeholder=\"Password\" \n                        aria-label=\"Enter your password\"\n                        onChange={handleChange}\n                        name=\"passwd\"\n                        value={formData.passwd}                        \n                    />\n                    <input \n                        className={`form-submit ${isInvalid && \"submit-invalid\" || \"submit\"}`}\n                        type=\"submit\" \n                        value=\"Log In\"\n                        disabled={isInvalid}\n                    />\n                </form>\n                {error && <p className=\"error-message form-error\">{error}</p>}\n            </div>\n            <div className=\"base-form-footer\">\n                <p>\n                    Don't have an account?&ensp;\n                    <Link className=\"link-route\" to={ROUTES.SIGN_UP}>\n                        Sign up\n                    </Link>\n                </p>\n            </div>\n        </main>\n    )\n};","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Profile.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Not-found.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/pages/Signup.js",["90","91","92"],"import React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport * as ROUTES from \"../constants/routes.js\";\n\nimport BirdyLogo from \"../atomComponents/Birdy-logo.js\";\nimport \"../stylesheets/pages/signup.css\";\nimport \"../stylesheets/form.css\";\n\n// import { checkAlreadyExist, addUserFromSignup } from \"../database/users.js\";\n\nexport default function Signup(){\n    const server_config = {\n        headers: {\n            'Access-Control-Allow-Origin': \"*\",\n            'Content-Type': 'application/json:charset=UTF-8',\n        }\n    }\n\n    useEffect( () => {\n        document.title = \"Signup - Birdy\";\n    },[]);\n\n    const onFocusHandler = (e) => {\n        e.target.type = \"date\";\n    };\n\n    const onBlurHandler = (e) => {\n        e.target.type = \"text\";\n    };\n\n    const navigate = useNavigate();\n\n    const [formData, setFormData] = useState(\n        {username:\"\", dateOfBirth:\"\", fullname:\"\", emailAddress:\"\", passwd:\"\"}\n    );\n\n    const [error, setError] = useState(true);\n\n    const isInvalid = formData.passwd === \"\" || formData.emailAddress === \"\" \n                        || formData.username === \"\" || formData.dateOfBirth === \"\"\n                        || formData.fullname === \"\";\n\n    function handleChange(event){\n        setFormData( prev => {\n            return {\n                ...prev,\n                [event.target.name]: event.target.value\n            }\n        })\n    };\n\n    const answer_signup = (res) => {\n        //console.log('res.data: ', res.data);\n        if(res.data['status'] !== 201){\n            setError(res.data['message']);\n            console.log('error: ', error);\n        }else{\n            const _id = res.data['id'];\n            //console.log('user_id: ', _id);\n            navigate(`/p/${_id}`, { user_id: _id, state: {}, replace: true, });\n        }\n    }\n\n    const answer_signup_err = (err) => {\n        if (err.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.log('err.response.data: ',    err.response.data);\n            console.log('err.response.status: ',  err.response.status);\n            console.log('err.response.headers: ', err.response.headers);\n            setError(err.response.data['message']);\n        } else if (err.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n            // http.ClientRequest in node.js\n            console.log(err.request);\n        } else {\n            // Something happened in setting up the request that triggered an Error\n            console.log('Error', err.message);\n        }\n        \n        console.log(err.config);\n    }\n\n    const handleSignup = async (event) => {\n        event.preventDefault();\n        axios\n            .post(\"/api/user/signup\", formData)\n            .then( (res) => {\n                //console.log('then');\n                answer_signup(res);\n            })\n            .catch( (err) => {\n                //console.log('catch');\n                answer_signup_err(err);\n            });\n        /*\n        try{\n            await checkAlreadyExist(formData.username, formData.emailAddress);\n            addUserFromSignup(formData);\n            navigate(ROUTES.PROFILE);\n        } catch (err) {\n            setError(err.message);\n        }\n        */\n    }\n    \n    return(\n        <main className=\"form-page-main column gap20\">\n            <div className=\"form-container column gap20\">\n                <BirdyLogo />\n                <form className=\"base-form column\" onSubmit={handleSignup}>\n                    <input\n                        className=\"form-input\" \n                        type=\"text\" \n                        placeholder=\"Username\" \n                        aria-label=\"Enter your username\"\n                        name=\"username\"\n                        onChange={handleChange}\n                        value={formData.username}\n                    />\n                    <input\n                        className=\"form-input\" \n                        type=\"text\" \n                        placeholder=\"Fullname\" \n                        aria-label=\"Enter your fullname\"\n                        name=\"fullname\"\n                        onChange={handleChange}\n                        value={formData.fullname}\n                    />\n                    <input\n                        className=\"form-input signup-birthday\"\n                        type=\"text\"\n                        onFocus={onFocusHandler}\n                        onBlur={onBlurHandler}\n                        placeholder=\"Date of Birth\"\n                        aria-label=\"Enter your date of birth\"\n                        name=\"dateOfBirth\"\n                        onChange={handleChange}\n                        value={formData.dateOfBirth}\n                    />\n                    <input\n                        className=\"form-input\" \n                        type=\"email\" \n                        placeholder=\"Email address\" \n                        aria-label=\"Enter your email address\"\n                        name=\"emailAddress\"\n                        onChange={handleChange}\n                        value={formData.emailAddress}\n                    />\n                    <input\n                        className=\"form-input\" \n                        type=\"password\" \n                        placeholder=\"Password\" \n                        aria-label=\"Enter your password\"\n                        name=\"passwd\"\n                        onChange={handleChange}\n                        value={formData.passwd}                   \n                    />\n                    <input \n                        className={`form-submit ${isInvalid && \"submit-invalid\" || \"submit\"}`}\n                        type=\"submit\" \n                        value=\"Sign Up\"\n                        disabled={isInvalid}\n                    />\n                </form>\n                {error && <p className=\"error-message form-error\">{error}</p>}\n            </div>\n            <div className=\"base-form-footer\">\n                <p>\n                    Have an account?&ensp;\n                    <Link className=\"link-route\" to={ROUTES.LOGIN}>\n                        Log in\n                    </Link>\n                </p>\n            </div>\n        </main>\n    )\n};","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/atomComponents/Birdy-logo.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/NavBar/NavBar.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Timeline.js",["93"],"import React, { useState, useEffect } from \"react\"\nimport axios from \"axios\";\n\nimport Tweet from \"./Tweet.js\";\nimport NewTweet from \"./NewTweet.js\";\nimport TweetDeleted from \"./TweetDeleted.js\";\n\nimport \"../../stylesheets/components/timeline.css\";\n\nconst MAX_NB_TWEETS = 100;\n\n//props an array of tweets to render\n//default: boolean\nexport default function Timeline(props){\n    const [tweetList, setTweetList] = useState([]);\n    const [tweets, setTweets] = useState([]);\n\n    //console.log('props.tweets: ', props.tweets);\n    //console.log('tweetList: ', tweetList);\n\n    useEffect( () => {\n        let listTmp = props.tweets.map( item => {\n           return [item, false]; //[value, deleted?]\n        })\n\n        function handleHideTweet(event, id){\n            //console.log(\"handleHideTweet\");\n            setTweetList( prev => {\n                //console.log(\"setTweetList\");\n                const tweetListTmp = ( prev.map(item => {\n                    if(item[0]['_id']===id)\n                    {\n                        //console.log(\"hidden\");\n                        return [item[0], !item[1]];\n                    }\n                    else\n                    {\n                        //console.log(id);\n                        return item;\n                    }\n                }));\n                setTweets(genTweetsToRender(tweetListTmp));\n                return tweetListTmp;\n            });\n        }\n\n        function genTweetsToRender(listToMap){\n            //console.log('list to map: ', listToMap);\n            const listResult = \n                listToMap.map((item) => {\n                    const tweetId = item[0]['_id']; \n                    if (!item[1])\n                    {\n                        return(\n                            <Tweet \n                                key={tweetId}\n                                id={tweetId}\n                                tweet={item[0]}\n                                default={props.default}\n                                user={props.user}\n                                deleted={false}\n                                onDelete={handleHideTweet}\n                            />\n                        );\n                    }\n                    else\n                    {\n                        return(\n                            <TweetDeleted \n                                key={tweetId} \n                                id={tweetId} \n                                deleted={true} \n                                onDelete={handleHideTweet}\n                            />\n                        );\n                    }\n                });\n            //console.log('listResult: ', listResult);\n            return listResult;\n        }\n\n        setTweetList(listTmp);\n        setTweets(genTweetsToRender(listTmp));\n\n    }, [props.tweets, props.default, props.user]);\n\n    function genTweetsToRender(listToMap){\n        //console.log('list to map: ', listToMap);\n        const listResult = \n            listToMap.map((item) => {\n                const tweetId = item[0]['_id']; \n                if (!item[1])\n                {\n                    return(\n                        <Tweet \n                            key={tweetId}\n                            id={tweetId}\n                            tweet={item[0]}\n                            default={props.default}\n                            user={props.user}\n                            deleted={false}\n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n                else\n                {\n                    return(\n                        <TweetDeleted \n                            key={tweetId} \n                            id={tweetId} \n                            deleted={true} \n                            onDelete={handleHideTweet}\n                        />\n                    );\n                }\n            });\n        //console.log('listResult: ', listResult);\n        return listResult;\n    }\n\n    function handleHideTweet(event, id){\n        //console.log(\"handleHideTweet\");\n        setTweetList( prev => {\n            //console.log(\"setTweetList\");\n            const tweetListTmp = ( prev.map(item => {\n                if(item[0]['_id']===id)\n                {\n                    //console.log(\"hidden\");\n                    return [item[0], !item[1]];\n                }\n                else\n                {\n                    //console.log(id);\n                    return item;\n                }\n            }));\n            setTweets(genTweetsToRender(tweetListTmp));\n            return tweetListTmp;\n        });\n    }\n\n    function handleRenderNewTweet(event, newTweetId){\n        axios\n            .get(`/apiTweet/tweet/getNTweets/${MAX_NB_TWEETS}`)\n            .then( (res) => {\n                //console.log('tweets: ', res.data);\n                setTweetList(prev => {\n                    const tweetListTmp = res.data.map( item => {\n                        return [item, false];\n                    })\n                    setTweets(genTweetsToRender(tweetListTmp));\n                    return tweetListTmp;\n                });\n            });        \n    }\n\n    return (\n        <div className=\"timeline column\">\n            <header className=\"timeline-header\">\n                <div onClick={props.scroll} className=\"timeline-home\">Home</div>\n            </header>\n            {/* if default timeline, no new tweets needed */}\n            {props.default || <NewTweet onPost={handleRenderNewTweet} user={props.user} />}\n            <main id=\"timeline-main\" className=\"timeline-main\">\n                <section className=\"timeline-tweets\">\n                    {tweets===[] ? \"\" : tweets}\n                </section>\n            </main>\n        </div>\n    )\n}","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/SideBar/SideBar.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/NavBar/MenuIcon.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/NewTweet.js",["94"],"import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport \"../../stylesheets/components/tweet.css\";\nimport \"../../stylesheets/components/newTweet.css\";\nimport \"../../stylesheets/form.css\";\n\nimport DEFAULT_PP from \"../../images/icons/outline_account_circle_white_36dp_2x.png\";\n\nexport default function NewTweet(props){\n\n    const initTweetContent = {content:\"\", image:\"\", imageDom:\"\", gifDom:\"\"}\n    const [tweetContent, setTweetContent] = useState(initTweetContent);\n    const navigate = useNavigate();\n\n    const [error, setError] = useState(true);\n\n    const handlePostTweet = async (event) => {\n        //console.log(\"handlePostTweet\");\n        event.preventDefault();\n        //console.log(tweetContent);\n        if(!error){\n            //on recupere l'id de l'auteur\n            let userId = `${props.user['_id']}`;\n\n            const formData = {\n                author: `${userId}`,\n                content: tweetContent['content'],\n                image: tweetContent['image']\n            }\n\n            //on recupere l'id du tweet\n            await axios\n                .post(\"/apiTweet/tweet/newTweet\", formData)\n                .then( async (res) => { \n                    let newTweetId = res.data.id; \n                    await props.onPost(event, newTweetId);\n                });\n\n            //await props.user.createTweet(tweetContent.content, tweetContent.image);\n            //console.log('newTweetId: ', newTweetId);\n            clearNewTweet();\n            navigate(`/p/${userId}`, { state: { alreadyLogged: false, userId: userId }, replace: false, });\n        }\n    }\n\n    function resetError(){\n        setError(prev => {\n            if(tweetContent.content!==\"\" || tweetContent.image!==\"\"){\n                return false;\n            }\n            return true;\n        });\n    }\n\n    function removeError(){\n        setError(false);\n    }\n\n    function handleChange(event){\n        setTweetContent( prev => {\n            //console.log(\"[\",event.target.name,\",\",event.target.value,\"]\");\n            return {\n                ...prev,\n                [event.target.name]: event.target.value\n            };\n        });\n        //console.log(\"onChange: error?\", error);\n        resetError();\n    };\n\n    function onImageChange(event){\n        if(event.target.files && event.target.files[0]){\n            const img = event.target.files[0];\n            //console.log(img);\n            //console.log(URL.createObjectURL(img));\n            setTweetContent( prev => {\n                return {\n                    ...prev,\n                    image: URL.createObjectURL(img)\n                };\n            });\n        }\n        //console.log(\"onImage: error?\", error);\n        removeError();\n    }\n\n    function clearNewTweet(){\n        setTweetContent(prev => {return initTweetContent;});\n        setError(prev => true);\n    }\n\n    return(\n        <div id=\"new-tweet\" className=\"tweet new-tweet\">\n            <div className=\"left-side-tweet\">\n            <img src={props.user['profilePicture']!==\"\" ? props.user['profilePicture'] : DEFAULT_PP}\n                    alt=\"profile picture\"\n                    height=\"70\" width=\"70\"\n                />\n            </div>\n            <div className=\"new-tweet-container\">\n                <header className=\"tweet-header\">\n                    <span className=\"color-light-pink bold huge-font\">\n                        {props.user['username']}\n                    </span>\n                </header>\n                <form>\n                    <div className=\"tweet-content\">\n                        {tweetContent.image!==\"\" && <img className=\"tweet-image\" src={tweetContent.image} width={\"250px\"} alt=\"not found\"/>}\n                        <textarea className=\"new-tweet-text\" \n                            placeholder=\"What's happening ?\" required \n                            maxLength=\"140\" rows=\"2\"\n                            name=\"content\"\n                            onChange={handleChange}\n                            value={tweetContent.content}\n                        />\n                    </div>\n                    <footer className=\"tweet-footer\">\n                        <div className=\"new-tweet-icons\">\n                            <label className=\"small-font new-tweet-button pointer\" htmlFor=\"imageFile\">Img</label>\n                            <input \n                                type=\"file\" name=\"imageDom\" id=\"imageFile\" \n                                className=\"display-none\" \n                                accept=\"image/png\"\n                                onChange={(event) => {handleChange(event); onImageChange(event);}}\n                                value={tweetContent.imageDom}\n                            />\n                            <label className=\"small-font new-tweet-button pointer\" htmlFor=\"gifFile\">Gif</label>\n                            <input \n                                type=\"file\" name=\"gifDom\" id=\"gifFile\" \n                                className=\"display-none\" \n                                accept=\"image/gif\"\n                                onChange={(event) => {handleChange(event); onImageChange(event);}}\n                                value={tweetContent.gifDom}\n                            />\n                        </div>\n                        <input className=\"small-font new-tweet-button pointer\" onClick={ (event) => handlePostTweet(event) } type=\"button\" value=\"Tweet\"/>\n                    </footer>\n                </form>\n            </div>\n        </div>\n    )\n}","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/SideBar/SearchBar.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/TweetDeleted.js",["95"],"import React, { useState } from \"react\";\n\nimport \"../../stylesheets/components/tweet.css\";\n\nexport default function TweetDeleted(props){\n\n    const [deleted, setDeleted] = useState(props.deleted);\n\n    function handleDelete(event){\n        //console.log(\"handleDelete\");\n        setDeleted (prev => {\n            return !prev;\n        })\n        return props.id;\n    }\n\n    return (\n        <article className=\"tweet tweet-deleted\">\n            <span className=\"tweet-del-msg color-light-grey\">This tweet has been successfully hidden</span>\n            <input className=\"tweet-del-res\" type=\"button\" value=\"Res\" onClick={(event) => props.onDelete(event, handleDelete())} />\n        </article>\n    )\n}","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/Tweet.js",["96","97","98"],"import React, { useState } from \"react\";\nimport AutoLink from \"react-native-autolink\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nimport CustomLink from \"../../atomComponents/CustomLink.js\";\nimport TweetIcon from \"./TweetIcon.js\";\n\n\nimport COMMENT_ICON from \"../../images/icons/tweetIcons/outline_chat_bubble_outline_white_18dp_1x.png\";\nimport RETWEET_ICON from \"../../images/icons/tweetIcons/outline_reply_white_18dp_1x.png\";\nimport LIKE_ICON from \"../../images/icons/tweetIcons/outline_favorite_border_white_18dp_1x.png\";\nimport SHARE_ICON from \"../../images/icons/tweetIcons/outline_file_upload_white_18dp_1x.png\";\n\nimport DEFAULT_PP from \"../../images/icons/outline_account_circle_white_36dp_2x.png\";\n\nimport \"../../stylesheets/components/tweet.css\";\n\n\n//a tweet as a prop\nexport default function Tweet(props){\n\n    const [nbReplies, setNbReplies] = useState([props.tweet['nbComments'], false]);\n    const [nbRetweets, setNbRetweets] = useState([props.tweet['nbRetweets'], false]);\n    const [nbLikes, setNbLikes] = useState([props.tweet['nbLikes'],false]);\n\n    const [deleted, setDeleted] = useState(props.deleted);\n    const navigate = useNavigate();\n\n    const [author, setAuthor] = useState(\n        async () => {\n            await axios\n                .get(`/api/user/${props.tweet['author']}`)\n                .then( (res) => {\n                    //console.log('user: ', res.data);\n                    setAuthor(res.data);\n                });\n        }\n    );\n\n    function handleDelete(event){\n        //console.log(\"handleDelete\");\n        setDeleted (prev => {\n            return !prev;\n        })\n        return props.id;\n    }\n\n    // function handleReplyChange(event){\n    //     setNbReplies( prev => {\n    //         let replied = nbReplies[1]\n    //         if(!replied)\n    //             props.tweet.addReply();\n    //         else\n    //             props.tweet.removeReply();\n    //         return [props.tweet.getNbReplies(), !replied];\n    //     });\n    // }\n\n    async function handleRetweetChange(event){\n        event.preventDefault();\n        //console.log('tweet: ', props.tweet);\n        let userId = props.user['_id'];\n        let tweetId = props.tweet['_id'];\n        // await Promise.all([\n        //     axios\n        //         .get(`/api/user/getUserId/${props.user['username']}`)\n        //         .then( (res) => { userId = res.data; }),\n\n        //     axios\n        //         .post(\"/apiTweet/tweet/getTweetId\", props.tweet)\n        //         .then( (res) => { tweetId = res.data; }),\n        // ]);\n        //console.log('tweetId: ', tweetId);\n        //console.log('userId: ', userId);\n        //console.log('retweeted? ', nbRetweets[1]);\n        if(!nbRetweets[1]){\n            axios\n                .put(`/api/user/${userId}/tweet/${tweetId}/retweet`)\n                .then( () => {\n                    axios\n                        .get(`/apiTweet/tweet/${tweetId}`)\n                        .then( (res) => {\n                            //console.log('res last get: ', res);\n                            setNbRetweets( prev => {\n                                return [res.data['nbRetweets'], true];\n                        });\n                    });\n                });\n        } else {\n            axios\n                .put(`/api/user/${userId}/tweet/${tweetId}/unretweet`)\n                .then( () => {\n                    axios\n                        .get(`/apiTweet/tweet/${tweetId}`)\n                        .then( (res) => {\n                            //console.log('res last get: ', res);\n                            setNbRetweets( prev => {\n                                return [res.data['nbRetweets'], false];\n                        });\n                    });\n                });\n        }\n    }\n\n    async function handleLikeChange(event){\n        event.preventDefault();\n        //console.log('tweet: ', props.tweet);\n        let userId = '';\n        let tweetId = '';\n        await Promise.all([\n            axios\n                .get(`/api/user/getUserId/${props.user['username']}`)\n                .then( (res) => { userId = res.data; }),\n\n            axios\n                .post(\"/apiTweet/tweet/getTweetId\", props.tweet)\n                .then( (res) => { tweetId = res.data; }),\n        ]);\n        //console.log('tweetId: ', tweetId);\n        //console.log('userId: ', userId);\n        //console.log('liked? ', nbLikes[1]);\n        if(!nbLikes[1]){\n            axios\n                .put(`/api/user/${userId}/tweet/${tweetId}/like`)\n                .then( () => {\n                    axios\n                        .get(`/apiTweet/tweet/${tweetId}`)\n                        .then( (res) => {\n                            //console.log('res last get: ', res);\n                            setNbLikes( prev => {\n                                return [res.data['nbLikes'], true];\n                        });\n                    });\n                });\n        } else {\n            axios\n                .put(`/api/user/${userId}/tweet/${tweetId}/unlike`)\n                .then( () => {\n                    axios\n                        .get(`/apiTweet/tweet/${tweetId}`)\n                        .then( (res) => {\n                            //console.log('res last get: ', res);\n                            setNbLikes( prev => {\n                                return [res.data['nbLikes'], false];\n                        });\n                    });\n                });\n        }\n    }\n\n    async function handleCheckUserPage(event){\n        event.preventDefault();\n        //console.log('tweet: ', props.tweet);\n        let userId = props.user['_id'];\n        /*\n        await axios\n                .get(`/api/user/getUserId/${props.user['username']}`)\n                .then( (res) => { userId = res.data; });\n        */\n\n        const author = props.tweet['author'];\n        //console.log('test handle check user page');\n        if(author!==userId){\n            navigate(`/p/${userId}`, { state: { alreadyLogged: true, userId: author }, replace: false, });\n        }\n    }\n\n    const text = props.tweet['content'];\n\n\n    return(\n        <article className=\"tweet\">\n            <div className=\"left-side-tweet\">\n                <img src={author['profilePicture']===\"\" ? DEFAULT_PP : author['profilePicture']}\n                    alt=\"tweet author's profile picture\"\n                    height=\"60\" width=\"60\"\n                />\n            </div>\n            <div className=\"tweet-container\">\n                <header className=\"tweet-header\">\n                    <span className={`color-light-pink bold tweet-username ${props.default? \"disabled-pointer\" : \"pointer\"}`}\n                        onClick={props.default? undefined : handleCheckUserPage}\n                    >\n                        {author['username']}\n                    </span>\n                    <span className=\"color-light-grey\">\n                        {moment(props.tweet[\"dateCreated\"]).fromNow()}\n                    </span>\n                </header>\n                <main className=\"tweet-content\">\n                    {props.tweet['image']!==\"\" && <img className=\"tweet-image\" src={props.tweet['image']} alt=\"Not Found\" width={\"300px\"} />}\n                    <AutoLink text={text} \n                        renderText={(txt) => <span className=\"default-font\">{txt}</span>}\n                        renderLink={(txt, match) => <CustomLink url={match.getAnchorHref()} msg={txt}/>}\n                    />\n                </main>\n                <footer className=\"tweet-footer\">\n                    <TweetIcon default={props.default} onClick={props.default? undefined : undefined/*handleReplyChange*/} imageSrc={COMMENT_ICON} \n                        name=\"comments\" cpt={nbReplies[0]} action={nbReplies[1] && \"commented\"}/>\n                    <TweetIcon default={props.default} onClick={props.default? undefined : handleRetweetChange} imageSrc={RETWEET_ICON} \n                        name=\"retweet\" cpt={nbRetweets[0]} action={nbRetweets[1] && \"retweeted\"}/>\n                    <TweetIcon default={props.default} onClick={props.default? undefined : handleLikeChange} imageSrc={LIKE_ICON} \n                        name=\"like\" cpt={nbLikes[0]} action={nbLikes[1] && \"liked\"}/>\n                    <TweetIcon default={props.default} imageSrc={SHARE_ICON} name=\"share\" cpt={0} />\n                </footer>\n            </div>\n            <div className=\"ride-side-tweet\">\n                <input className=\"tweet-del-res\" type=\"button\" value=\"Hide\" onClick={(event) => props.onDelete(event, handleDelete())} />\n            </div>\n        </article>\n    )\n}","/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/components/Timeline/TweetIcon.js",[],"/home/mrbigoudi/Documents/Projects/Birdy/birdy-client/src/atomComponents/CustomLink.js",[],{"ruleId":"99","severity":1,"message":"100","line":112,"column":61,"nodeType":"101","messageId":"102","endLine":112,"endColumn":63},{"ruleId":"99","severity":1,"message":"100","line":112,"column":81,"nodeType":"101","messageId":"102","endLine":112,"endColumn":83},{"ruleId":"103","severity":1,"message":"104","line":14,"column":11,"nodeType":"105","messageId":"106","endLine":14,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":163,"column":61,"nodeType":"101","messageId":"102","endLine":163,"endColumn":63},{"ruleId":"99","severity":1,"message":"100","line":163,"column":81,"nodeType":"101","messageId":"102","endLine":163,"endColumn":83},{"ruleId":"103","severity":1,"message":"107","line":15,"column":12,"nodeType":"105","messageId":"106","endLine":15,"endColumn":21},{"ruleId":"108","severity":1,"message":"109","line":97,"column":13,"nodeType":"110","endLine":100,"endColumn":19},{"ruleId":"103","severity":1,"message":"111","line":7,"column":12,"nodeType":"105","messageId":"106","endLine":7,"endColumn":19},{"ruleId":"103","severity":1,"message":"112","line":24,"column":23,"nodeType":"105","messageId":"106","endLine":24,"endColumn":35},{"ruleId":"103","severity":1,"message":"111","line":28,"column":12,"nodeType":"105","messageId":"106","endLine":28,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":176,"column":17,"nodeType":"110","endLine":179,"endColumn":19},"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","no-unused-vars","'server_config' is assigned a value but never used.","Identifier","unusedVar","'tweetList' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'deleted' is assigned a value but never used.","'setNbReplies' is assigned a value but never used."]